{"version":3,"file":"index79.js","sources":["../../src/utils/token-usage-tracker.ts"],"sourcesContent":["import { BaseCallbackHandler } from '@langchain/core/callbacks/base';\nimport { LLMResult } from '@langchain/core/outputs';\nimport { Logger } from './logger';\n\nconst DEFAULT_MODEL = 'gpt-4o-mini';\n\n/**\n * Token usage data structure\n */\nexport interface TokenUsage {\n  promptTokens: number;\n  completionTokens: number;\n  totalTokens: number;\n  modelName?: string | undefined;\n  timestamp?: Date | undefined;\n}\n\n/**\n * Cost calculation result\n */\nexport interface CostCalculation {\n  promptCost: number;\n  completionCost: number;\n  totalCost: number;\n  currency: string;\n}\n\n/**\n * OpenRouter model pricing structure\n */\nexport interface OpenRouterModel {\n  id: string;\n  name: string;\n  pricing: {\n    prompt: string;\n    completion: string;\n  };\n}\n\n/**\n * Model pricing manager that fetches and caches pricing from OpenRouter API\n */\nexport class ModelPricingManager {\n  private static instance: ModelPricingManager;\n  private pricingCache: Map<string, { prompt: number; completion: number }> =\n    new Map();\n  private lastFetchTime: number = 0;\n  private readonly CACHE_DURATION = 24 * 60 * 60 * 1000;\n  private readonly OPENROUTER_API_URL = 'https://openrouter.ai/api/v1/models';\n  private readonly DEFAULT_MODEL = 'gpt-4o-mini';\n  private logger: Logger;\n\n  private constructor() {\n    this.logger = new Logger({ module: 'ModelPricingManager', level: 'info' });\n    this.initializeFallbackPricing();\n  }\n\n  public static getInstance(): ModelPricingManager {\n    if (!ModelPricingManager.instance) {\n      ModelPricingManager.instance = new ModelPricingManager();\n    }\n    return ModelPricingManager.instance;\n  }\n\n  private initializeFallbackPricing(): void {\n    const fallbackPricing = {\n      'gpt-4o': { prompt: 0.005, completion: 0.015 },\n      [this.DEFAULT_MODEL]: { prompt: 0.00015, completion: 0.0006 },\n      'gpt-4-turbo': { prompt: 0.01, completion: 0.03 },\n      'gpt-4': { prompt: 0.03, completion: 0.06 },\n      'gpt-3.5-turbo': { prompt: 0.0005, completion: 0.0015 },\n    };\n\n    for (const [model, pricing] of Object.entries(fallbackPricing)) {\n      this.pricingCache.set(model, pricing);\n    }\n  }\n\n  private async fetchPricingFromAPI(): Promise<void> {\n    try {\n      const response = await fetch(this.OPENROUTER_API_URL, {\n        headers: {\n          Accept: 'application/json',\n          'User-Agent': 'hedera-agent-kit/1.0',\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      const models: OpenRouterModel[] = data.data || [];\n\n      for (const model of models) {\n        if (model.pricing?.prompt && model.pricing?.completion) {\n          const promptPrice = parseFloat(model.pricing.prompt);\n          const completionPrice = parseFloat(model.pricing.completion);\n\n          if (!isNaN(promptPrice) && !isNaN(completionPrice)) {\n            this.pricingCache.set(model.id, {\n              prompt: promptPrice * 1000,\n              completion: completionPrice * 1000,\n            });\n\n            const simplifiedId = this.getSimplifiedModelId(model.id);\n            if (simplifiedId !== model.id) {\n              this.pricingCache.set(simplifiedId, {\n                prompt: promptPrice * 1000,\n                completion: completionPrice * 1000,\n              });\n            }\n          }\n        }\n      }\n\n      this.lastFetchTime = Date.now();\n      this.logger.info(\n        `Loaded pricing for ${models.length} models from OpenRouter API`\n      );\n    } catch (error) {\n      this.logger.warn(\n        'Failed to fetch pricing from API, using fallback pricing',\n        error\n      );\n    }\n  }\n\n  private getSimplifiedModelId(fullId: string): string {\n    const prefixes = [\n      'openai/',\n      'anthropic/',\n      'google/',\n      'mistralai/',\n      'meta-llama/',\n    ];\n    for (const prefix of prefixes) {\n      if (fullId.startsWith(prefix)) {\n        return fullId.replace(prefix, '');\n      }\n    }\n    return fullId;\n  }\n\n  private async ensurePricingLoaded(): Promise<void> {\n    const now = Date.now();\n    const shouldRefresh = now - this.lastFetchTime > this.CACHE_DURATION;\n\n    if (shouldRefresh || this.pricingCache.size < 10) {\n      await this.fetchPricingFromAPI();\n    }\n  }\n\n  public async getPricing(\n    modelName: string\n  ): Promise<{ prompt: number; completion: number }> {\n    await this.ensurePricingLoaded();\n\n    const exactMatch = this.pricingCache.get(modelName);\n    if (exactMatch) {\n      return exactMatch;\n    }\n\n    const normalizedName = modelName.toLowerCase();\n    for (const [key, value] of this.pricingCache.entries()) {\n      if (\n        key.toLowerCase().includes(normalizedName) ||\n        normalizedName.includes(key.toLowerCase())\n      ) {\n        return value;\n      }\n    }\n\n    return (\n      this.pricingCache.get(this.DEFAULT_MODEL) || {\n        prompt: 0.00015,\n        completion: 0.0006,\n      }\n    );\n  }\n\n  public getPricingSync(modelName: string): {\n    prompt: number;\n    completion: number;\n  } {\n    const exactMatch = this.pricingCache.get(modelName);\n    if (exactMatch) {\n      return exactMatch;\n    }\n\n    const normalizedName = modelName.toLowerCase();\n    for (const [key, value] of this.pricingCache.entries()) {\n      if (\n        key.toLowerCase().includes(normalizedName) ||\n        normalizedName.includes(key.toLowerCase())\n      ) {\n        return value;\n      }\n    }\n\n    return (\n      this.pricingCache.get(this.DEFAULT_MODEL) || {\n        prompt: 0.00015,\n        completion: 0.0006,\n      }\n    );\n  }\n}\n\n/**\n * Callback handler to track token usage from OpenAI API responses\n */\nexport class TokenUsageCallbackHandler extends BaseCallbackHandler {\n  name = 'TokenUsageCallbackHandler';\n  private tokenUsageHistory: TokenUsage[] = [];\n  private currentTokenUsage: TokenUsage | undefined = undefined;\n  private logger: Logger;\n  private modelName?: string | undefined;\n\n  constructor(modelName?: string, logger?: Logger) {\n    super();\n    this.modelName = modelName;\n    this.logger =\n      logger || new Logger({ module: 'TokenUsageTracker', level: 'info' });\n  }\n\n  override async handleLLMEnd(output: LLMResult): Promise<void> {\n    try {\n      if (output.llmOutput?.tokenUsage) {\n        this.currentTokenUsage = {\n          promptTokens: output.llmOutput.tokenUsage.promptTokens || 0,\n          completionTokens: output.llmOutput.tokenUsage.completionTokens || 0,\n          totalTokens: output.llmOutput.tokenUsage.totalTokens || 0,\n          modelName: this.modelName,\n          timestamp: new Date(),\n        };\n\n        this.tokenUsageHistory.push(this.currentTokenUsage);\n\n        this.logger.debug('Token usage tracked:', {\n          promptTokens: this.currentTokenUsage.promptTokens,\n          completionTokens: this.currentTokenUsage.completionTokens,\n          totalTokens: this.currentTokenUsage.totalTokens,\n          model: this.modelName,\n        });\n      }\n    } catch (error) {\n      this.logger.error('Failed to track token usage:', error);\n    }\n  }\n\n  getLatestTokenUsage(): TokenUsage | undefined {\n    return this.currentTokenUsage;\n  }\n\n  getTokenUsageHistory(): TokenUsage[] {\n    return [...this.tokenUsageHistory];\n  }\n\n  getTotalTokenUsage(): TokenUsage {\n    const total = this.tokenUsageHistory.reduce(\n      (acc, usage) => ({\n        promptTokens: acc.promptTokens + usage.promptTokens,\n        completionTokens: acc.completionTokens + usage.completionTokens,\n        totalTokens: acc.totalTokens + usage.totalTokens,\n      }),\n      { promptTokens: 0, completionTokens: 0, totalTokens: 0 }\n    );\n\n    return {\n      ...total,\n      modelName: this.modelName,\n      timestamp: new Date(),\n    };\n  }\n\n  reset(): void {\n    this.currentTokenUsage = undefined;\n    this.tokenUsageHistory = [];\n  }\n}\n\n/**\n * Calculate cost based on token usage and model with dynamic pricing\n */\nexport async function calculateTokenCost(\n  tokenUsage: TokenUsage,\n  modelName?: string\n): Promise<CostCalculation> {\n  const model = modelName || tokenUsage.modelName || DEFAULT_MODEL;\n  const pricingManager = ModelPricingManager.getInstance();\n  const pricing = await pricingManager.getPricing(model);\n\n  const promptCost = (tokenUsage.promptTokens / 1000) * pricing.prompt;\n  const completionCost =\n    (tokenUsage.completionTokens / 1000) * pricing.completion;\n\n  return {\n    promptCost,\n    completionCost,\n    totalCost: promptCost + completionCost,\n    currency: 'USD',\n  };\n}\n\n/**\n * Synchronous version of calculateTokenCost using cached pricing\n */\nexport function calculateTokenCostSync(\n  tokenUsage: TokenUsage,\n  modelName?: string\n): CostCalculation {\n  const model = modelName || tokenUsage.modelName || DEFAULT_MODEL;\n  const pricingManager = ModelPricingManager.getInstance();\n  const pricing = pricingManager.getPricingSync(model);\n\n  const promptCost = (tokenUsage.promptTokens / 1000) * pricing.prompt;\n  const completionCost =\n    (tokenUsage.completionTokens / 1000) * pricing.completion;\n\n  return {\n    promptCost,\n    completionCost,\n    totalCost: promptCost + completionCost,\n    currency: 'USD',\n  };\n}\n\n/**\n * Format cost for display\n */\nexport function formatCost(\n  cost: CostCalculation,\n  precision: number = 6\n): string {\n  return `$${cost.totalCost.toFixed(precision)} ${cost.currency}`;\n}\n\n/**\n * Estimate tokens from text (rough approximation)\n */\nexport function estimateTokens(text: string): number {\n  return Math.ceil(text.length / 4);\n}\n"],"names":[],"mappings":"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"}