{"version":3,"file":"index82.js","sources":["../../src/utils/key-type-detector.ts"],"sourcesContent":["import { PrivateKey } from '@hashgraph/sdk';\n\nexport type KeyType = 'ed25519' | 'ecdsa';\n\nexport interface KeyDetectionResult {\n  detectedType: KeyType;\n  privateKey: PrivateKey;\n}\n\n/**\n * Detects the key type from a private key string and returns the parsed PrivateKey\n * @param privateKeyString The private key string to detect type from\n * @returns The detected key type and parsed PrivateKey\n * @throws Error if the private key cannot be parsed\n */\nexport function detectKeyTypeFromString(\n  privateKeyString: string\n): KeyDetectionResult {\n  let detectedType: KeyType = 'ed25519';\n\n  if (privateKeyString.startsWith('0x')) {\n    detectedType = 'ecdsa';\n  } else if (privateKeyString.startsWith('302e020100300506032b6570')) {\n    detectedType = 'ed25519';\n  } else if (privateKeyString.startsWith('3030020100300706052b8104000a')) {\n    detectedType = 'ecdsa';\n  } else if (privateKeyString.length === 96) {\n    detectedType = 'ed25519';\n  } else if (privateKeyString.length === 88) {\n    detectedType = 'ecdsa';\n  }\n\n  try {\n    const privateKey =\n      detectedType === 'ecdsa'\n        ? PrivateKey.fromStringECDSA(privateKeyString)\n        : PrivateKey.fromStringED25519(privateKeyString);\n    return { detectedType, privateKey };\n  } catch (parseError) {\n    const alternateType = detectedType === 'ecdsa' ? 'ed25519' : 'ecdsa';\n    try {\n      const privateKey =\n        alternateType === 'ecdsa'\n          ? PrivateKey.fromStringECDSA(privateKeyString)\n          : PrivateKey.fromStringED25519(privateKeyString);\n      return { detectedType: alternateType, privateKey };\n    } catch (secondError) {\n      throw new Error(\n        `Failed to parse private key as either ED25519 or ECDSA: ${parseError}`\n      );\n    }\n  }\n}\n"],"names":[],"mappings":";AAeO,SAAS,wBACd,kBACoB;AACpB,MAAI,eAAwB;AAE5B,MAAI,iBAAiB,WAAW,IAAI,GAAG;AACrC,mBAAe;AAAA,EAAA,WACN,iBAAiB,WAAW,0BAA0B,GAAG;AAClE,mBAAe;AAAA,EAAA,WACN,iBAAiB,WAAW,8BAA8B,GAAG;AACtE,mBAAe;AAAA,EAAA,WACN,iBAAiB,WAAW,IAAI;AACzC,mBAAe;AAAA,EAAA,WACN,iBAAiB,WAAW,IAAI;AACzC,mBAAe;AAAA,EAAA;AAGjB,MAAI;AACF,UAAM,aACJ,iBAAiB,UACb,WAAW,gBAAgB,gBAAgB,IAC3C,WAAW,kBAAkB,gBAAgB;AACnD,WAAO,EAAE,cAAc,WAAA;AAAA,EAAW,SAC3B,YAAY;AACnB,UAAM,gBAAgB,iBAAiB,UAAU,YAAY;AAC7D,QAAI;AACF,YAAM,aACJ,kBAAkB,UACd,WAAW,gBAAgB,gBAAgB,IAC3C,WAAW,kBAAkB,gBAAgB;AACnD,aAAO,EAAE,cAAc,eAAe,WAAA;AAAA,IAAW,SAC1C,aAAa;AACpB,YAAM,IAAI;AAAA,QACR,2DAA2D,UAAU;AAAA,MAAA;AAAA,IACvE;AAAA,EACF;AAEJ;"}