{"version":3,"file":"index59.js","sources":["../../src/langchain/tools/hts/wipe-token-account-tool.ts"],"sourcesContent":["import { z } from 'zod';\nimport { WipeTokenAccountParams } from '../../../types';\nimport {\n  BaseHederaTransactionTool,\n  BaseHederaTransactionToolParams,\n} from '../common/base-hedera-transaction-tool';\nimport { BaseServiceBuilder } from '../../../builders/base-service-builder';\nimport { HtsBuilder } from '../../../builders/hts/hts-builder';\n\nconst WipeTokenAccountZodSchemaCore = z.object({\n  tokenId: z\n    .string()\n    .describe('The ID of the token to wipe (e.g., \"0.0.xxxx\").'),\n  accountId: z\n    .string()\n    .describe(\n      'The account ID from which tokens will be wiped (e.g., \"0.0.yyyy\").'\n    ),\n  amount: z\n    .union([z.number(), z.string()])\n    .optional()\n    .describe(\n      'For Fungible Tokens: amount to wipe (smallest unit). Builder handles conversion and validation.'\n    ),\n  serials: z\n    .array(z.union([z.number().int().positive(), z.string()]))\n    .optional()\n    .describe(\n      'For Non-Fungible Tokens: array of serial numbers to wipe. Builder handles conversion and validation.'\n    ),\n});\n\nexport class HederaWipeTokenAccountTool extends BaseHederaTransactionTool<\n  typeof WipeTokenAccountZodSchemaCore\n> {\n  name = 'hedera-hts-wipe-token-account';\n  description =\n    \"Wipes tokens (fungible or non-fungible) from an account. Provide 'amount' for FTs or 'serials' for NFTs. Builder validates inputs.\";\n  specificInputSchema = WipeTokenAccountZodSchemaCore;\n  namespace = 'hts';\n\n  constructor(params: BaseHederaTransactionToolParams) {\n    super(params);\n  }\n\n  protected getServiceBuilder(): BaseServiceBuilder {\n    return this.hederaKit.hts();\n  }\n\n  protected async callBuilderMethod(\n    builder: BaseServiceBuilder,\n    specificArgs: z.infer<typeof WipeTokenAccountZodSchemaCore>\n  ): Promise<void> {\n    await (builder as HtsBuilder).wipeTokenAccount(\n      specificArgs as unknown as WipeTokenAccountParams\n    );\n  }\n}\n"],"names":[],"mappings":";;AASA,MAAM,gCAAgC,EAAE,OAAO;AAAA,EAC7C,SAAS,EACN,SACA,SAAS,iDAAiD;AAAA,EAC7D,WAAW,EACR,OAAA,EACA;AAAA,IACC;AAAA,EAAA;AAAA,EAEJ,QAAQ,EACL,MAAM,CAAC,EAAE,OAAA,GAAU,EAAE,OAAA,CAAQ,CAAC,EAC9B,WACA;AAAA,IACC;AAAA,EAAA;AAAA,EAEJ,SAAS,EACN,MAAM,EAAE,MAAM,CAAC,EAAE,SAAS,IAAA,EAAM,SAAA,GAAY,EAAE,OAAA,CAAQ,CAAC,CAAC,EACxD,WACA;AAAA,IACC;AAAA,EAAA;AAEN,CAAC;AAEM,MAAM,mCAAmC,0BAE9C;AAAA,EAOA,YAAY,QAAyC;AACnD,UAAM,MAAM;AAPd,SAAA,OAAO;AACP,SAAA,cACE;AACF,SAAA,sBAAsB;AACtB,SAAA,YAAY;AAAA,EAAA;AAAA,EAMF,oBAAwC;AAChD,WAAO,KAAK,UAAU,IAAA;AAAA,EAAI;AAAA,EAG5B,MAAgB,kBACd,SACA,cACe;AACf,UAAO,QAAuB;AAAA,MAC5B;AAAA,IAAA;AAAA,EACF;AAEJ;"}