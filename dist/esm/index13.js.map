{"version":3,"file":"index13.js","sources":["../../src/langchain/tools/account/approve-token-nft-allowance-tool.ts"],"sourcesContent":["import { z } from 'zod';\nimport { ApproveTokenNftAllowanceParams } from '../../../types';\nimport {\n  BaseHederaTransactionTool,\n  BaseHederaTransactionToolParams,\n} from '../common/base-hedera-transaction-tool';\nimport { BaseServiceBuilder } from '../../../builders/base-service-builder';\nimport { AccountBuilder } from '../../../builders/account/account-builder';\n\nconst ApproveTokenNftAllowanceZodSchemaCore = z.object({\n  ownerAccountId: z\n    .string()\n    .optional()\n    .describe(\n      'Optional. The NFT owner account ID (e.g., \"0.0.xxxx\"). Defaults to operator.'\n    ),\n  spenderAccountId: z\n    .string()\n    .describe('The spender account ID (e.g., \"0.0.yyyy\").'),\n  tokenId: z.string().describe('The NFT collection ID (e.g., \"0.0.zzzz\").'),\n  serials: z\n    .array(z.union([z.number().int().positive(), z.string()]))\n    .optional()\n    .describe(\n      'Optional. Specific serial numbers to approve. Use this OR allSerials. Builder handles conversion.'\n    ),\n  allSerials: z\n    .boolean()\n    .optional()\n    .describe(\n      'Optional. If true, approves spender for all serials of the NFT ID. Use this OR serials.'\n    ),\n  memo: z.string().optional().describe('Optional. Memo for the transaction.'),\n});\n\nexport class HederaApproveTokenNftAllowanceTool extends BaseHederaTransactionTool<\n  typeof ApproveTokenNftAllowanceZodSchemaCore\n> {\n  name = 'hedera-account-approve-nft-allowance';\n  description =\n    'Approves an NFT allowance. Builder validates serials/allSerials logic and handles serial conversion.';\n  specificInputSchema = ApproveTokenNftAllowanceZodSchemaCore;\n  namespace = 'account';\n\n  constructor(params: BaseHederaTransactionToolParams) {\n    super(params);\n  }\n\n  protected getServiceBuilder(): BaseServiceBuilder {\n    return this.hederaKit.accounts();\n  }\n\n  protected async callBuilderMethod(\n    builder: BaseServiceBuilder,\n    specificArgs: z.infer<typeof ApproveTokenNftAllowanceZodSchemaCore>\n  ): Promise<void> {\n    await (builder as AccountBuilder).approveTokenNftAllowance(\n      specificArgs as unknown as ApproveTokenNftAllowanceParams\n    );\n  }\n}\n"],"names":[],"mappings":";;AASA,MAAM,wCAAwC,EAAE,OAAO;AAAA,EACrD,gBAAgB,EACb,SACA,WACA;AAAA,IACC;AAAA,EAAA;AAAA,EAEJ,kBAAkB,EACf,SACA,SAAS,4CAA4C;AAAA,EACxD,SAAS,EAAE,SAAS,SAAS,2CAA2C;AAAA,EACxE,SAAS,EACN,MAAM,EAAE,MAAM,CAAC,EAAE,SAAS,IAAA,EAAM,SAAA,GAAY,EAAE,OAAA,CAAQ,CAAC,CAAC,EACxD,WACA;AAAA,IACC;AAAA,EAAA;AAAA,EAEJ,YAAY,EACT,UACA,WACA;AAAA,IACC;AAAA,EAAA;AAAA,EAEJ,MAAM,EAAE,OAAA,EAAS,SAAA,EAAW,SAAS,qCAAqC;AAC5E,CAAC;AAEM,MAAM,2CAA2C,0BAEtD;AAAA,EAOA,YAAY,QAAyC;AACnD,UAAM,MAAM;AAPd,SAAA,OAAO;AACP,SAAA,cACE;AACF,SAAA,sBAAsB;AACtB,SAAA,YAAY;AAAA,EAAA;AAAA,EAMF,oBAAwC;AAChD,WAAO,KAAK,UAAU,SAAA;AAAA,EAAS;AAAA,EAGjC,MAAgB,kBACd,SACA,cACe;AACf,UAAO,QAA2B;AAAA,MAChC;AAAA,IAAA;AAAA,EACF;AAEJ;"}