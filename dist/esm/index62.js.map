{"version":3,"file":"index62.js","sources":["../../src/langchain/tools/scs/get-contract-tool.ts"],"sourcesContent":["import { z } from 'zod';\nimport {\n  BaseHederaQueryTool,\n  BaseHederaQueryToolParams,\n  FieldProcessor,\n} from '../common/base-hedera-query-tool';\n\nconst GetContractZodSchema = z.object({\n  contractIdOrAddress: z.string().describe('The contract ID or EVM address'),\n  timestamp: z\n    .string()\n    .optional()\n    .describe('Optional timestamp for historical data'),\n  includeBytecode: z\n    .boolean()\n    .optional()\n    .default(false)\n    .describe(\n      'Whether to include full bytecode in response (may be very large)'\n    ),\n});\n\n/**\n * Tool for retrieving a specific contract by ID or address.\n */\nexport class HederaGetContractTool extends BaseHederaQueryTool<\n  typeof GetContractZodSchema\n> {\n  name = 'hedera-get-contract';\n  description =\n    'Retrieves a specific contract by ID or EVM address from the Hedera network. Use includeBytecode=true for full bytecode (may be large).';\n  specificInputSchema = GetContractZodSchema;\n  namespace = 'scs';\n\n  constructor(params: BaseHederaQueryToolParams) {\n    super(params);\n  }\n\n  protected override getLargeFieldProcessors(\n    args: z.infer<typeof GetContractZodSchema>\n  ): Record<string, FieldProcessor> {\n    if (args.includeBytecode) {\n      return {};\n    }\n\n    return {\n      'contract.bytecode': {\n        maxLength: 200,\n        truncateMessage: '[Use includeBytecode=true for full bytecode]',\n      },\n      'contract.runtime_bytecode': {\n        maxLength: 200,\n        truncateMessage: '[Use includeBytecode=true for full runtime bytecode]',\n      },\n      'contract.creation_bytecode': {\n        maxLength: 200,\n        truncateMessage:\n          '[Use includeBytecode=true for full creation bytecode]',\n      },\n      bytecode: {\n        maxLength: 200,\n        truncateMessage: '[Use includeBytecode=true for full bytecode]',\n      },\n      runtime_bytecode: {\n        maxLength: 200,\n        truncateMessage: '[Use includeBytecode=true for full runtime bytecode]',\n      },\n      creation_bytecode: {\n        maxLength: 200,\n        truncateMessage:\n          '[Use includeBytecode=true for full creation bytecode]',\n      },\n    };\n  }\n\n  protected async executeQuery(\n    args: z.infer<typeof GetContractZodSchema>\n  ): Promise<unknown> {\n    this.logger.info(`Getting contract: ${args.contractIdOrAddress}`);\n\n    const contract = await this.hederaKit\n      .query()\n      .getContract(args.contractIdOrAddress, args.timestamp);\n\n    if (contract === null) {\n      return {\n        success: false,\n        error: `Contract ${args.contractIdOrAddress} not found`,\n      };\n    }\n\n    return {\n      success: true,\n      contract,\n      summary: {\n        contractId: contract.contract_id,\n        evmAddress: contract.evm_address,\n        created: contract.created_timestamp,\n        expiration: contract.expiration_timestamp,\n        deleted: contract.deleted,\n        memo: contract.memo || 'No memo',\n        autoRenewPeriod: contract.auto_renew_period,\n        maxAutomaticTokenAssociations:\n          contract.max_automatic_token_associations,\n        hasAdminKey: Boolean(contract.admin_key),\n        hasBytecode: Boolean(contract.bytecode),\n        hasRuntimeBytecode: Boolean(contract.runtime_bytecode),\n        bytecodeIncluded: args.includeBytecode,\n      },\n    };\n  }\n}\n"],"names":[],"mappings":";;AAOA,MAAM,uBAAuB,EAAE,OAAO;AAAA,EACpC,qBAAqB,EAAE,SAAS,SAAS,gCAAgC;AAAA,EACzE,WAAW,EACR,OAAA,EACA,SAAA,EACA,SAAS,wCAAwC;AAAA,EACpD,iBAAiB,EACd,QAAA,EACA,WACA,QAAQ,KAAK,EACb;AAAA,IACC;AAAA,EAAA;AAEN,CAAC;AAKM,MAAM,8BAA8B,oBAEzC;AAAA,EAOA,YAAY,QAAmC;AAC7C,UAAM,MAAM;AAPd,SAAA,OAAO;AACP,SAAA,cACE;AACF,SAAA,sBAAsB;AACtB,SAAA,YAAY;AAAA,EAAA;AAAA,EAMO,wBACjB,MACgC;AAChC,QAAI,KAAK,iBAAiB;AACxB,aAAO,CAAA;AAAA,IAAC;AAGV,WAAO;AAAA,MACL,qBAAqB;AAAA,QACnB,WAAW;AAAA,QACX,iBAAiB;AAAA,MAAA;AAAA,MAEnB,6BAA6B;AAAA,QAC3B,WAAW;AAAA,QACX,iBAAiB;AAAA,MAAA;AAAA,MAEnB,8BAA8B;AAAA,QAC5B,WAAW;AAAA,QACX,iBACE;AAAA,MAAA;AAAA,MAEJ,UAAU;AAAA,QACR,WAAW;AAAA,QACX,iBAAiB;AAAA,MAAA;AAAA,MAEnB,kBAAkB;AAAA,QAChB,WAAW;AAAA,QACX,iBAAiB;AAAA,MAAA;AAAA,MAEnB,mBAAmB;AAAA,QACjB,WAAW;AAAA,QACX,iBACE;AAAA,MAAA;AAAA,IACJ;AAAA,EACF;AAAA,EAGF,MAAgB,aACd,MACkB;AAClB,SAAK,OAAO,KAAK,qBAAqB,KAAK,mBAAmB,EAAE;AAEhE,UAAM,WAAW,MAAM,KAAK,UACzB,MAAA,EACA,YAAY,KAAK,qBAAqB,KAAK,SAAS;AAEvD,QAAI,aAAa,MAAM;AACrB,aAAO;AAAA,QACL,SAAS;AAAA,QACT,OAAO,YAAY,KAAK,mBAAmB;AAAA,MAAA;AAAA,IAC7C;AAGF,WAAO;AAAA,MACL,SAAS;AAAA,MACT;AAAA,MACA,SAAS;AAAA,QACP,YAAY,SAAS;AAAA,QACrB,YAAY,SAAS;AAAA,QACrB,SAAS,SAAS;AAAA,QAClB,YAAY,SAAS;AAAA,QACrB,SAAS,SAAS;AAAA,QAClB,MAAM,SAAS,QAAQ;AAAA,QACvB,iBAAiB,SAAS;AAAA,QAC1B,+BACE,SAAS;AAAA,QACX,aAAa,QAAQ,SAAS,SAAS;AAAA,QACvC,aAAa,QAAQ,SAAS,QAAQ;AAAA,QACtC,oBAAoB,QAAQ,SAAS,gBAAgB;AAAA,QACrD,kBAAkB,KAAK;AAAA,MAAA;AAAA,IACzB;AAAA,EACF;AAEJ;"}