{"version":3,"file":"index85.js","sources":["../../src/plugins/PluginRegistry.ts"],"sourcesContent":["import { IPlugin, PluginContext, HederaTool } from './PluginInterface';\nimport { Logger } from '../utils/logger';\n\n/**\n * Registry for managing plugins in the Hedera Agent Kit\n */\nexport class PluginRegistry {\n  private plugins: Map<string, IPlugin> = new Map();\n  private context: PluginContext;\n  private logger: Logger;\n\n  /**\n   * Creates a new PluginRegistry instance\n   * @param context The context to provide to plugins during initialization\n   */\n  constructor(context: PluginContext) {\n    this.context = context;\n    this.logger = context.logger;\n  }\n\n  /**\n   * Register a plugin with the registry\n   * @param plugin The plugin to register\n   * @throws Error if a plugin with the same ID is already registered\n   */\n  async registerPlugin(plugin: IPlugin): Promise<void> {\n    if (this.plugins.has(plugin.id)) {\n      throw new Error(`Plugin with ID ${plugin.id} is already registered`);\n    }\n\n    await plugin.initialize(this.context);\n    this.plugins.set(plugin.id, plugin);\n    this.logger.info(`Plugin registered: ${plugin.name} (${plugin.id}) v${plugin.version}`);\n  }\n\n  /**\n   * Get a plugin by ID\n   * @param id The ID of the plugin to retrieve\n   * @returns The plugin, or undefined if not found\n   */\n  getPlugin(id: string): IPlugin | undefined {\n    return this.plugins.get(id);\n  }\n\n  /**\n   * Get all registered plugins\n   * @returns Array of all registered plugins\n   */\n  getAllPlugins(): IPlugin[] {\n    return Array.from(this.plugins.values());\n  }\n\n  /**\n   * Get all tools from all registered plugins\n   * @returns Array of all tools provided by registered plugins\n   */\n  getAllTools(): HederaTool[] {\n    return this.getAllPlugins().flatMap(plugin => plugin.getTools());\n  }\n\n  /**\n   * Unregister a plugin\n   * @param id The ID of the plugin to unregister\n   * @returns true if the plugin was unregistered, false if it wasn't found\n   */\n  async unregisterPlugin(id: string): Promise<boolean> {\n    const plugin = this.plugins.get(id);\n    if (!plugin) {\n      return false;\n    }\n\n    if (plugin.cleanup) {\n      try {\n        await plugin.cleanup();\n      } catch (error) {\n        this.logger.error(`Error during plugin cleanup: ${error}`);\n      }\n    }\n\n    const result = this.plugins.delete(id);\n    if (result) {\n      this.logger.info(`Plugin unregistered: ${plugin.name} (${plugin.id})`);\n    }\n\n    return result;\n  }\n\n  /**\n   * Unregister all plugins\n   */\n  async unregisterAllPlugins(): Promise<void> {\n    const pluginIds = Array.from(this.plugins.keys());\n    for (const id of pluginIds) {\n      await this.unregisterPlugin(id);\n    }\n  }\n}"],"names":[],"mappings":"AAMO,MAAM,eAAe;AAAA;AAAA;AAAA;AAAA;AAAA,EAS1B,YAAY,SAAwB;AARpC,SAAQ,8BAAoC,IAAA;AAS1C,SAAK,UAAU;AACf,SAAK,SAAS,QAAQ;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQxB,MAAM,eAAe,QAAgC;AACnD,QAAI,KAAK,QAAQ,IAAI,OAAO,EAAE,GAAG;AAC/B,YAAM,IAAI,MAAM,kBAAkB,OAAO,EAAE,wBAAwB;AAAA,IAAA;AAGrE,UAAM,OAAO,WAAW,KAAK,OAAO;AACpC,SAAK,QAAQ,IAAI,OAAO,IAAI,MAAM;AAClC,SAAK,OAAO,KAAK,sBAAsB,OAAO,IAAI,KAAK,OAAO,EAAE,MAAM,OAAO,OAAO,EAAE;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQxF,UAAU,IAAiC;AACzC,WAAO,KAAK,QAAQ,IAAI,EAAE;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAO5B,gBAA2B;AACzB,WAAO,MAAM,KAAK,KAAK,QAAQ,QAAQ;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOzC,cAA4B;AAC1B,WAAO,KAAK,gBAAgB,QAAQ,CAAA,WAAU,OAAO,UAAU;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQjE,MAAM,iBAAiB,IAA8B;AACnD,UAAM,SAAS,KAAK,QAAQ,IAAI,EAAE;AAClC,QAAI,CAAC,QAAQ;AACX,aAAO;AAAA,IAAA;AAGT,QAAI,OAAO,SAAS;AAClB,UAAI;AACF,cAAM,OAAO,QAAA;AAAA,MAAQ,SACd,OAAO;AACd,aAAK,OAAO,MAAM,gCAAgC,KAAK,EAAE;AAAA,MAAA;AAAA,IAC3D;AAGF,UAAM,SAAS,KAAK,QAAQ,OAAO,EAAE;AACrC,QAAI,QAAQ;AACV,WAAK,OAAO,KAAK,wBAAwB,OAAO,IAAI,KAAK,OAAO,EAAE,GAAG;AAAA,IAAA;AAGvE,WAAO;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAMT,MAAM,uBAAsC;AAC1C,UAAM,YAAY,MAAM,KAAK,KAAK,QAAQ,MAAM;AAChD,eAAW,MAAM,WAAW;AAC1B,YAAM,KAAK,iBAAiB,EAAE;AAAA,IAAA;AAAA,EAChC;AAEJ;"}