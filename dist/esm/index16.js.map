{"version":3,"file":"index16.js","sources":["../../src/langchain/tools/account/delete-nft-spender-allowance-tool.ts"],"sourcesContent":["import { z } from 'zod';\nimport {\n  BaseHederaTransactionTool,\n  BaseHederaTransactionToolParams,\n} from '../common/base-hedera-transaction-tool';\nimport { AccountBuilder } from '../../../builders/account/account-builder';\nimport { BaseServiceBuilder } from '../../../builders/base-service-builder';\nimport { DeleteNftSpenderAllowanceToolParams } from '../../../types';\n\nconst DeleteNftSpenderAllowanceZodSchemaCore = z.object({\n  ownerAccountId: z\n    .string()\n    .optional()\n    .describe(\n      'Optional. The ID of the NFT owner. Defaults to the operator/signer if not provided.'\n    ),\n  spenderAccountId: z\n    .string()\n    .describe(\n      'The ID of the spender whose allowance for specific NFTs will be deleted.'\n    ),\n\n  nftIdString: z\n    .string()\n    .describe(\n      'The NFT ID including serial number (e.g., \"0.0.token.serial\") for which the allowance will be deleted.'\n    ),\n\n  tokenId: z\n    .string()\n    .describe('The token ID of the NFT collection (e.g., \"0.0.xxxx\").'),\n  serials: z\n    .array(z.union([z.number().int().positive(), z.string()]))\n    .min(1)\n    .describe('An array of serial numbers of the NFT to remove allowance for.'),\n});\n\nexport class HederaDeleteNftSpenderAllowanceTool extends BaseHederaTransactionTool<\n  typeof DeleteNftSpenderAllowanceZodSchemaCore\n> {\n  name = 'hedera-account-delete-nft-spender-allowance';\n  description =\n    'Deletes/revokes NFT allowances for specific serial numbers of a token for a specific spender. The owner of the NFTs must sign.';\n  specificInputSchema = DeleteNftSpenderAllowanceZodSchemaCore;\n  namespace = 'account';\n\n  constructor(params: BaseHederaTransactionToolParams) {\n    super(params);\n  }\n\n  protected getServiceBuilder(): BaseServiceBuilder {\n    return this.hederaKit.accounts();\n  }\n\n  protected async callBuilderMethod(\n    builder: BaseServiceBuilder,\n    specificArgs: z.infer<typeof DeleteNftSpenderAllowanceZodSchemaCore>\n  ): Promise<void> {\n    await (builder as AccountBuilder).deleteTokenNftAllowanceForSpender(\n      specificArgs as unknown as DeleteNftSpenderAllowanceToolParams\n    );\n  }\n}\n"],"names":[],"mappings":";;AASA,MAAM,yCAAyC,EAAE,OAAO;AAAA,EACtD,gBAAgB,EACb,SACA,WACA;AAAA,IACC;AAAA,EAAA;AAAA,EAEJ,kBAAkB,EACf,OAAA,EACA;AAAA,IACC;AAAA,EAAA;AAAA,EAGJ,aAAa,EACV,OAAA,EACA;AAAA,IACC;AAAA,EAAA;AAAA,EAGJ,SAAS,EACN,SACA,SAAS,wDAAwD;AAAA,EACpE,SAAS,EACN,MAAM,EAAE,MAAM,CAAC,EAAE,OAAA,EAAS,IAAA,EAAM,YAAY,EAAE,QAAQ,CAAC,CAAC,EACxD,IAAI,CAAC,EACL,SAAS,gEAAgE;AAC9E,CAAC;AAEM,MAAM,4CAA4C,0BAEvD;AAAA,EAOA,YAAY,QAAyC;AACnD,UAAM,MAAM;AAPd,SAAA,OAAO;AACP,SAAA,cACE;AACF,SAAA,sBAAsB;AACtB,SAAA,YAAY;AAAA,EAAA;AAAA,EAMF,oBAAwC;AAChD,WAAO,KAAK,UAAU,SAAA;AAAA,EAAS;AAAA,EAGjC,MAAgB,kBACd,SACA,cACe;AACf,UAAO,QAA2B;AAAA,MAChC;AAAA,IAAA;AAAA,EACF;AAEJ;"}