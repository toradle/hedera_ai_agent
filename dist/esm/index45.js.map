{"version":3,"file":"index45.js","sources":["../../src/langchain/tools/hts/get-token-info-tool.ts"],"sourcesContent":["import { z } from 'zod';\nimport {\n  BaseHederaQueryTool,\n  BaseHederaQueryToolParams,\n} from '../common/base-hedera-query-tool';\n\nconst GetTokenInfoZodSchema = z.object({\n  tokenId: z\n    .string()\n    .describe('The token ID to get information for (e.g., \"0.0.12345\")'),\n});\n\n/**\n * Tool for retrieving Hedera Token Service token information.\n * This is a read-only operation that queries the mirror node.\n */\nexport class HederaGetTokenInfoTool extends BaseHederaQueryTool<\n  typeof GetTokenInfoZodSchema\n> {\n  name = 'hedera-get-token-info';\n  description =\n    'Retrieves comprehensive information about a Hedera token including name, symbol, supply, keys, and other metadata.';\n  specificInputSchema = GetTokenInfoZodSchema;\n  namespace = 'hts';\n\n  constructor(params: BaseHederaQueryToolParams) {\n    super(params);\n  }\n\n  protected async executeQuery(\n    args: z.infer<typeof GetTokenInfoZodSchema>\n  ): Promise<unknown> {\n    this.logger.info(`Getting token info for token ID: ${args.tokenId}`);\n\n    const tokenInfo = await this.hederaKit.query().getTokenInfo(args.tokenId);\n\n    if (!tokenInfo) {\n      return {\n        success: false,\n        error: `Token ${args.tokenId} not found`,\n      };\n    }\n\n    return {\n      success: true,\n      tokenInfo,\n    };\n  }\n}\n\n "],"names":[],"mappings":";;AAMA,MAAM,wBAAwB,EAAE,OAAO;AAAA,EACrC,SAAS,EACN,OAAA,EACA,SAAS,yDAAyD;AACvE,CAAC;AAMM,MAAM,+BAA+B,oBAE1C;AAAA,EAOA,YAAY,QAAmC;AAC7C,UAAM,MAAM;AAPd,SAAA,OAAO;AACP,SAAA,cACE;AACF,SAAA,sBAAsB;AACtB,SAAA,YAAY;AAAA,EAAA;AAAA,EAMZ,MAAgB,aACd,MACkB;AAClB,SAAK,OAAO,KAAK,oCAAoC,KAAK,OAAO,EAAE;AAEnE,UAAM,YAAY,MAAM,KAAK,UAAU,QAAQ,aAAa,KAAK,OAAO;AAExE,QAAI,CAAC,WAAW;AACd,aAAO;AAAA,QACL,SAAS;AAAA,QACT,OAAO,SAAS,KAAK,OAAO;AAAA,MAAA;AAAA,IAC9B;AAGF,WAAO;AAAA,MACL,SAAS;AAAA,MACT;AAAA,IAAA;AAAA,EACF;AAEJ;"}