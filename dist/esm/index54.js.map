{"version":3,"file":"index54.js","sources":["../../src/langchain/tools/hts/transfer-tokens-tool.ts"],"sourcesContent":["import { z } from 'zod';\nimport { TransferTokensParams } from '../../../types';\nimport {\n  BaseHederaTransactionTool,\n  BaseHederaTransactionToolParams,\n} from '../common/base-hedera-transaction-tool';\nimport { BaseServiceBuilder } from '../../../builders/base-service-builder';\nimport { HtsBuilder } from '../../../builders/hts/hts-builder';\n\nconst FungibleTokenTransferInputSchema = z.object({\n  type: z.literal('fungible'),\n  tokenId: z.string().describe('Token ID (e.g., \"0.0.xxxx\").'),\n  accountId: z\n    .string()\n    .describe('Account ID for the transfer (e.g., \"0.0.yyyy\").'),\n  amount: z\n    .union([z.number(), z.string()])\n    .describe(\n      'Amount in smallest unit. Positive for credit, negative for debit. Builder handles conversion.'\n    ),\n});\n\nconst NftTransferInputSchema = z.object({\n  type: z.literal('nft'),\n  tokenId: z.string().describe('Token ID of the NFT (e.g., \"0.0.xxxx\").'),\n  serial: z\n    .union([z.number().int().positive(), z.string()])\n    .describe('Serial number of the NFT.'),\n  senderAccountId: z.string().describe('Sender account ID (e.g., \"0.0.ssss\").'),\n  receiverAccountId: z\n    .string()\n    .describe('Receiver account ID (e.g., \"0.0.rrrr\").'),\n  isApproved: z\n    .boolean()\n    .optional()\n    .describe('Optional. True if sender is an approved operator.'),\n});\n\nconst HbarTransferInputSchema = z.object({\n  accountId: z\n    .string()\n    .describe('Account ID for the HBAR transfer (e.g., \"0.0.zzzz\").'),\n  amount: z\n    .union([z.number(), z.string()])\n    .describe(\n      'HBAR amount in tinybars. Positive for credit, negative for debit. Builder handles Hbar unit conversion.'\n    ),\n});\n\nconst TransferTokensZodObjectSchema = z.object({\n  tokenTransfers: z\n    .array(\n      z.discriminatedUnion('type', [\n        FungibleTokenTransferInputSchema,\n        NftTransferInputSchema,\n      ])\n    )\n    .min(1)\n    .describe('Array of fungible token and/or NFT transfers.'),\n  hbarTransfers: z\n    .array(HbarTransferInputSchema)\n    .optional()\n    .describe(\n      'Optional. Array of HBAR transfers. Sum of amounts must be zero.'\n    ),\n  memo: z\n    .string()\n    .optional()\n    .describe('Optional. Memo for the entire transaction.'),\n});\n\nexport class HederaTransferTokensTool extends BaseHederaTransactionTool<\n  //@ts-ignore\n  typeof TransferTokensZodObjectSchema\n> {\n  name = 'hedera-hts-transfer-tokens';\n  description =\n    'Transfers multiple fungible tokens, NFTs, and/or HBAR in a single transaction. Builder handles parsing and validation.';\n  specificInputSchema = TransferTokensZodObjectSchema;\n  namespace = 'hts';\n\n  constructor(params: BaseHederaTransactionToolParams) {\n    super(params);\n  }\n\n  protected getServiceBuilder(): BaseServiceBuilder {\n    return this.hederaKit.hts();\n  }\n\n  protected async callBuilderMethod(\n    builder: BaseServiceBuilder,\n    specificArgs: z.infer<typeof TransferTokensZodObjectSchema>\n  ): Promise<void> {\n    await (builder as HtsBuilder).transferTokens(\n      specificArgs as unknown as TransferTokensParams\n    );\n  }\n}\n"],"names":[],"mappings":";;AASA,MAAM,mCAAmC,EAAE,OAAO;AAAA,EAChD,MAAM,EAAE,QAAQ,UAAU;AAAA,EAC1B,SAAS,EAAE,SAAS,SAAS,8BAA8B;AAAA,EAC3D,WAAW,EACR,SACA,SAAS,iDAAiD;AAAA,EAC7D,QAAQ,EACL,MAAM,CAAC,EAAE,OAAA,GAAU,EAAE,QAAQ,CAAC,EAC9B;AAAA,IACC;AAAA,EAAA;AAEN,CAAC;AAED,MAAM,yBAAyB,EAAE,OAAO;AAAA,EACtC,MAAM,EAAE,QAAQ,KAAK;AAAA,EACrB,SAAS,EAAE,SAAS,SAAS,yCAAyC;AAAA,EACtE,QAAQ,EACL,MAAM,CAAC,EAAE,SAAS,IAAA,EAAM,SAAA,GAAY,EAAE,OAAA,CAAQ,CAAC,EAC/C,SAAS,2BAA2B;AAAA,EACvC,iBAAiB,EAAE,SAAS,SAAS,uCAAuC;AAAA,EAC5E,mBAAmB,EAChB,SACA,SAAS,yCAAyC;AAAA,EACrD,YAAY,EACT,QAAA,EACA,SAAA,EACA,SAAS,mDAAmD;AACjE,CAAC;AAED,MAAM,0BAA0B,EAAE,OAAO;AAAA,EACvC,WAAW,EACR,SACA,SAAS,sDAAsD;AAAA,EAClE,QAAQ,EACL,MAAM,CAAC,EAAE,OAAA,GAAU,EAAE,QAAQ,CAAC,EAC9B;AAAA,IACC;AAAA,EAAA;AAEN,CAAC;AAED,MAAM,gCAAgC,EAAE,OAAO;AAAA,EAC7C,gBAAgB,EACb;AAAA,IACC,EAAE,mBAAmB,QAAQ;AAAA,MAC3B;AAAA,MACA;AAAA,IAAA,CACD;AAAA,EAAA,EAEF,IAAI,CAAC,EACL,SAAS,+CAA+C;AAAA,EAC3D,eAAe,EACZ,MAAM,uBAAuB,EAC7B,WACA;AAAA,IACC;AAAA,EAAA;AAAA,EAEJ,MAAM,EACH,OAAA,EACA,SAAA,EACA,SAAS,4CAA4C;AAC1D,CAAC;AAEM,MAAM,iCAAiC,0BAG5C;AAAA,EAOA,YAAY,QAAyC;AACnD,UAAM,MAAM;AAPd,SAAA,OAAO;AACP,SAAA,cACE;AACF,SAAA,sBAAsB;AACtB,SAAA,YAAY;AAAA,EAAA;AAAA,EAMF,oBAAwC;AAChD,WAAO,KAAK,UAAU,IAAA;AAAA,EAAI;AAAA,EAG5B,MAAgB,kBACd,SACA,cACe;AACf,UAAO,QAAuB;AAAA,MAC5B;AAAA,IAAA;AAAA,EACF;AAEJ;"}