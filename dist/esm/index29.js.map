{"version":3,"file":"index29.js","sources":["../../src/langchain/tools/hcs/submit-message-tool.ts"],"sourcesContent":["import { z } from 'zod';\nimport { SubmitMessageParams } from '../../../types';\nimport {\n  BaseHederaTransactionTool,\n  BaseHederaTransactionToolParams,\n} from '../common/base-hedera-transaction-tool';\nimport { HcsBuilder } from '../../../builders/hcs/hcs-builder';\nimport { BaseServiceBuilder } from '../../../builders/base-service-builder';\n\nconst SubmitMessageZodSchemaCore = z.object({\n  topicId: z.string().describe('The ID of the topic (e.g., \"0.0.xxxx\").'),\n  message: z\n    .string()\n    .describe(\n      'The message content. For binary data, provide as a base64 encoded string; the builder handles decoding.'\n    ),\n  maxChunks: z\n    .number()\n    .int()\n    .positive()\n    .optional()\n    .describe(\n      'Optional. Maximum number of chunks for messages exceeding single transaction limits. Builder handles chunking.'\n    ),\n  chunkSize: z\n    .number()\n    .int()\n    .positive()\n    .optional()\n    .describe(\n      'Optional. Size of each chunk in bytes if chunking is performed. Builder applies default if needed.'\n    ),\n  submitKey: z\n    .string()\n    .optional()\n    .describe(\n      'Optional. Submit key if required by the topic and different from the operator (e.g., serialized public key string, or private key string for derivation by builder).'\n    ),\n});\n\nexport class HederaSubmitMessageTool extends BaseHederaTransactionTool<\n  typeof SubmitMessageZodSchemaCore\n> {\n  name = 'hedera-hcs-submit-message';\n  description =\n    'Submits a message to a Hedera Consensus Service (HCS) topic. The builder handles chunking and base64 decoding for binary messages.';\n  specificInputSchema = SubmitMessageZodSchemaCore;\n  namespace = 'hcs';\n\n  constructor(params: BaseHederaTransactionToolParams) {\n    super(params);\n  }\n\n  protected getServiceBuilder(): BaseServiceBuilder {\n    return this.hederaKit.hcs();\n  }\n\n  protected async callBuilderMethod(\n    builder: BaseServiceBuilder,\n    specificArgs: z.infer<typeof SubmitMessageZodSchemaCore>\n  ): Promise<void> {\n    await (builder as HcsBuilder).submitMessageToTopic(\n      specificArgs as unknown as SubmitMessageParams\n    );\n  }\n}\n"],"names":[],"mappings":";;AASA,MAAM,6BAA6B,EAAE,OAAO;AAAA,EAC1C,SAAS,EAAE,SAAS,SAAS,yCAAyC;AAAA,EACtE,SAAS,EACN,OAAA,EACA;AAAA,IACC;AAAA,EAAA;AAAA,EAEJ,WAAW,EACR,SACA,MACA,SAAA,EACA,SAAA,EACA;AAAA,IACC;AAAA,EAAA;AAAA,EAEJ,WAAW,EACR,SACA,MACA,SAAA,EACA,SAAA,EACA;AAAA,IACC;AAAA,EAAA;AAAA,EAEJ,WAAW,EACR,SACA,WACA;AAAA,IACC;AAAA,EAAA;AAEN,CAAC;AAEM,MAAM,gCAAgC,0BAE3C;AAAA,EAOA,YAAY,QAAyC;AACnD,UAAM,MAAM;AAPd,SAAA,OAAO;AACP,SAAA,cACE;AACF,SAAA,sBAAsB;AACtB,SAAA,YAAY;AAAA,EAAA;AAAA,EAMF,oBAAwC;AAChD,WAAO,KAAK,UAAU,IAAA;AAAA,EAAI;AAAA,EAG5B,MAAgB,kBACd,SACA,cACe;AACf,UAAO,QAAuB;AAAA,MAC5B;AAAA,IAAA;AAAA,EACF;AAEJ;"}