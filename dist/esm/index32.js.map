{"version":3,"file":"index32.js","sources":["../../src/langchain/tools/hcs/get-topic-messages-tool.ts"],"sourcesContent":["import { z } from 'zod';\nimport {\n  BaseHederaQueryTool,\n  BaseHederaQueryToolParams,\n} from '../common/base-hedera-query-tool';\n\nconst GetTopicMessagesByFilterZodSchema = z.object({\n  topicId: z\n    .string()\n    .describe('The topic ID to get messages for (e.g., \"0.0.12345\")'),\n  sequenceNumber: z\n    .string()\n    .optional()\n    .describe('Filter by sequence number (e.g., \"gt:10\", \"lte:20\")'),\n  startTime: z\n    .string()\n    .optional()\n    .describe('Filter by start consensus timestamp (e.g., \"1629400000.000000000\")'),\n  endTime: z\n    .string()\n    .optional()\n    .describe('Filter by end consensus timestamp (e.g., \"1629500000.000000000\")'),\n  limit: z\n    .number()\n    .int()\n    .positive()\n    .optional()\n    .describe('Maximum number of messages to return'),\n  order: z\n    .enum(['asc', 'desc'])\n    .optional()\n    .describe('Order of messages (ascending or descending)'),\n});\n\n/**\n * Tool for retrieving filtered messages from a Hedera Consensus Service topic.\n * This is a read-only operation that queries the mirror node.\n */\nexport class HederaGetTopicMessages extends BaseHederaQueryTool<\n  typeof GetTopicMessagesByFilterZodSchema\n> {\n  name = 'hedera-get-topic-messages-by-filter';\n  description =\n    'Retrieves filtered messages from a Hedera Consensus Service topic with optional filters for sequence number, time range, limit, and order.';\n  specificInputSchema = GetTopicMessagesByFilterZodSchema;\n  namespace = 'hcs';\n\n  constructor(params: BaseHederaQueryToolParams) {\n    super(params);\n  }\n\n  protected async executeQuery(\n    args: z.infer<typeof GetTopicMessagesByFilterZodSchema>\n  ): Promise<unknown> {\n    this.logger.info(`Getting filtered messages for topic ID: ${args.topicId}`);\n    \n    const options: {\n      sequenceNumber?: string;\n      startTime?: string;\n      endTime?: string;\n      limit?: number;\n      order?: 'asc' | 'desc';\n    } = {};\n\n    if (args.sequenceNumber) options.sequenceNumber = args.sequenceNumber;\n    if (args.startTime) options.startTime = args.startTime;\n    if (args.endTime) options.endTime = args.endTime;\n    if (args.limit) options.limit = args.limit;\n    if (args.order) options.order = args.order;\n\n    const messages = await this.hederaKit.query().getTopicMessagesByFilter(\n      args.topicId,\n      options\n    );\n    \n    if (!messages) {\n      return {\n        success: false,\n        error: `Could not retrieve messages for topic ${args.topicId}`,\n      };\n    }\n\n    return {\n      success: true,\n      topicId: args.topicId,\n      messageCount: messages.length,\n      filters: options,\n      messages,\n    };\n  }\n} "],"names":[],"mappings":";;AAMA,MAAM,oCAAoC,EAAE,OAAO;AAAA,EACjD,SAAS,EACN,SACA,SAAS,sDAAsD;AAAA,EAClE,gBAAgB,EACb,OAAA,EACA,SAAA,EACA,SAAS,qDAAqD;AAAA,EACjE,WAAW,EACR,OAAA,EACA,SAAA,EACA,SAAS,oEAAoE;AAAA,EAChF,SAAS,EACN,OAAA,EACA,SAAA,EACA,SAAS,kEAAkE;AAAA,EAC9E,OAAO,EACJ,OAAA,EACA,IAAA,EACA,SAAA,EACA,SAAA,EACA,SAAS,sCAAsC;AAAA,EAClD,OAAO,EACJ,KAAK,CAAC,OAAO,MAAM,CAAC,EACpB,WACA,SAAS,6CAA6C;AAC3D,CAAC;AAMM,MAAM,+BAA+B,oBAE1C;AAAA,EAOA,YAAY,QAAmC;AAC7C,UAAM,MAAM;AAPd,SAAA,OAAO;AACP,SAAA,cACE;AACF,SAAA,sBAAsB;AACtB,SAAA,YAAY;AAAA,EAAA;AAAA,EAMZ,MAAgB,aACd,MACkB;AAClB,SAAK,OAAO,KAAK,2CAA2C,KAAK,OAAO,EAAE;AAE1E,UAAM,UAMF,CAAA;AAEJ,QAAI,KAAK,eAAgB,SAAQ,iBAAiB,KAAK;AACvD,QAAI,KAAK,UAAW,SAAQ,YAAY,KAAK;AAC7C,QAAI,KAAK,QAAS,SAAQ,UAAU,KAAK;AACzC,QAAI,KAAK,MAAO,SAAQ,QAAQ,KAAK;AACrC,QAAI,KAAK,MAAO,SAAQ,QAAQ,KAAK;AAErC,UAAM,WAAW,MAAM,KAAK,UAAU,QAAQ;AAAA,MAC5C,KAAK;AAAA,MACL;AAAA,IAAA;AAGF,QAAI,CAAC,UAAU;AACb,aAAO;AAAA,QACL,SAAS;AAAA,QACT,OAAO,yCAAyC,KAAK,OAAO;AAAA,MAAA;AAAA,IAC9D;AAGF,WAAO;AAAA,MACL,SAAS;AAAA,MACT,SAAS,KAAK;AAAA,MACd,cAAc,SAAS;AAAA,MACvB,SAAS;AAAA,MACT;AAAA,IAAA;AAAA,EACF;AAEJ;"}