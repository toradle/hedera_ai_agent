{"version":3,"file":"index74.js","sources":["../../src/builders/scs/scs-builder.ts"],"sourcesContent":["import {\n  ContractCreateTransaction,\n  ContractExecuteTransaction,\n  ContractUpdateTransaction,\n  ContractDeleteTransaction,\n  Hbar,\n  Long,\n  TransactionId,\n  ContractCallQuery,\n  ContractFunctionResult,\n} from '@hashgraph/sdk';\nimport { Buffer } from 'buffer';\nimport {\n  CreateContractParams,\n  ExecuteContractParams,\n  UpdateContractParams,\n  DeleteContractParams,\n  ContractCallQueryParams,\n} from '../../types';\nimport { BaseServiceBuilder } from '../base-service-builder';\nimport { HederaAgentKit } from '../../agent/agent';\nimport { detectKeyTypeFromString } from '../../utils/key-type-detector';\n\nconst DEFAULT_CONTRACT_AUTORENEW_PERIOD_SECONDS = 7776000;\n\n/**\n * ScsBuilder facilitates Hedera Smart Contract Service (SCS) transactions.\n */\nexport class ScsBuilder extends BaseServiceBuilder {\n  constructor(hederaKit: HederaAgentKit) {\n    super(hederaKit);\n  }\n\n  /**\n   * @param {CreateContractParams} params\n   * @returns {this}\n   * @throws {Error}\n   */\n  public createContract(params: CreateContractParams): this {\n    this.clearNotes();\n    const transaction = new ContractCreateTransaction();\n\n    if (params.bytecodeFileId) {\n      transaction.setBytecodeFileId(params.bytecodeFileId);\n    } else if (params.bytecode) {\n      if (typeof params.bytecode === 'string') {\n        transaction.setBytecode(Buffer.from(params.bytecode, 'hex'));\n      } else {\n        transaction.setBytecode(params.bytecode);\n      }\n    } else {\n      throw new Error(\n        'Either bytecodeFileId or bytecode must be provided to create a contract.'\n      );\n    }\n\n    if (params.adminKey) {\n      if (typeof params.adminKey === 'string') {\n        const keyDetection = detectKeyTypeFromString(params.adminKey);\n        transaction.setAdminKey(keyDetection.privateKey);\n      } else {\n        transaction.setAdminKey(params.adminKey);\n      }\n    }\n\n    if (typeof params.gas === 'number') {\n      transaction.setGas(params.gas);\n    } else {\n      transaction.setGas(Long.fromValue(params.gas));\n    }\n\n    if (params.initialBalance) {\n      let balance: Hbar;\n      if (typeof params.initialBalance === 'number') {\n        balance = new Hbar(params.initialBalance);\n      } else {\n        balance = Hbar.fromTinybars(\n          Long.fromString(params.initialBalance.toString())\n        );\n      }\n      transaction.setInitialBalance(balance);\n    }\n\n    if (params.constructorParameters) {\n      transaction.setConstructorParameters(params.constructorParameters);\n    }\n\n    if (params.memo) {\n      transaction.setContractMemo(params.memo);\n    }\n\n    if (params.autoRenewPeriod) {\n      transaction.setAutoRenewPeriod(params.autoRenewPeriod);\n    } else {\n      transaction.setAutoRenewPeriod(DEFAULT_CONTRACT_AUTORENEW_PERIOD_SECONDS);\n      this.addNote(`Default auto-renew period of ${DEFAULT_CONTRACT_AUTORENEW_PERIOD_SECONDS} seconds applied for contract.`);\n    }\n\n    if (params.stakedAccountId) {\n      transaction.setStakedAccountId(params.stakedAccountId);\n    }\n    if (params.stakedNodeId) {\n      transaction.setStakedNodeId(params.stakedNodeId);\n    }\n    if (params.declineStakingReward) {\n      transaction.setDeclineStakingReward(params.declineStakingReward);\n    }\n    if (params.maxAutomaticTokenAssociations) {\n      transaction.setMaxAutomaticTokenAssociations(\n        params.maxAutomaticTokenAssociations\n      );\n    }\n\n    this.setCurrentTransaction(transaction);\n    return this;\n  }\n\n  /**\n   * @param {ExecuteContractParams} params\n   * @returns {this}\n   */\n  public executeContract(params: ExecuteContractParams): this {\n    this.clearNotes();\n    let gasValue: Long | number;\n    if (typeof params.gas === 'number') {\n      gasValue = params.gas;\n    } else {\n      gasValue = Long.fromValue(params.gas);\n    }\n\n    const transaction = new ContractExecuteTransaction()\n      .setContractId(params.contractId)\n      .setGas(gasValue)\n      .setFunction(params.functionName, params.functionParameters);\n\n    if (params.payableAmount) {\n      let hbarAmount: Hbar;\n      if (params.payableAmount instanceof Hbar) {\n        hbarAmount = params.payableAmount;\n      } else if (typeof params.payableAmount === 'number') {\n        hbarAmount = new Hbar(params.payableAmount);\n      } else {\n        hbarAmount = Hbar.fromTinybars(\n          Long.fromString(params.payableAmount.toString())\n        );\n      }\n      transaction.setPayableAmount(hbarAmount);\n    }\n\n    if (params.memo) {\n      transaction.setTransactionMemo(params.memo);\n    }\n\n    this.setCurrentTransaction(transaction);\n    return this;\n  }\n\n  /**\n   * @param {UpdateContractParams} params\n   * @returns {this}\n   * @throws {Error}\n   */\n  public updateContract(params: UpdateContractParams): this {\n    this.clearNotes();\n    if (params.contractId === undefined) {\n      throw new Error('Contract ID is required to update a contract.');\n    }\n    const transaction = new ContractUpdateTransaction().setContractId(\n      params.contractId\n    );\n\n    if (params.adminKey) {\n      if (typeof params.adminKey === 'string') {\n        const keyDetection = detectKeyTypeFromString(params.adminKey);\n        transaction.setAdminKey(keyDetection.privateKey);\n      } else {\n        transaction.setAdminKey(params.adminKey);\n      }\n    }\n    if (params.autoRenewPeriod) {\n      transaction.setAutoRenewPeriod(params.autoRenewPeriod);\n    }\n\n    if (params.memo) {\n      transaction.setContractMemo(params.memo);\n    }\n\n    if (params.stakedAccountId) {\n      transaction.setStakedAccountId(params.stakedAccountId);\n    }\n    if (params.stakedNodeId) {\n      transaction.setStakedNodeId(params.stakedNodeId);\n    }\n\n    if (params.declineStakingReward) {\n      transaction.setDeclineStakingReward(params.declineStakingReward);\n    }\n    if (params.maxAutomaticTokenAssociations) {\n      transaction.setMaxAutomaticTokenAssociations(\n        params.maxAutomaticTokenAssociations\n      );\n    }\n\n    if (params.proxyAccountId) {\n      transaction.setProxyAccountId(params.proxyAccountId);\n    }\n\n    this.setCurrentTransaction(transaction);\n    return this;\n  }\n\n  /**\n   * @param {DeleteContractParams} params\n   * @returns {this}\n   * @throws {Error}\n   */\n  public deleteContract(params: DeleteContractParams): this {\n    this.clearNotes();\n    if (params.contractId === undefined) {\n      throw new Error('Contract ID is required to delete a contract.');\n    }\n    const transaction = new ContractDeleteTransaction().setContractId(\n      params.contractId\n    );\n\n    if (params.transferAccountId) {\n      transaction.setTransferAccountId(params.transferAccountId);\n    } else if (params.transferContractId) {\n      transaction.setTransferContractId(params.transferContractId);\n    }\n\n    this.setCurrentTransaction(transaction);\n    return this;\n  }\n\n  /**\n   * Executes a local smart contract query (does not modify state, no consensus needed).\n   * @param {ContractCallQueryParams} params - Parameters for the contract query.\n   * @returns {Promise<ContractFunctionResult>} A promise that resolves to the result of the contract call.\n   * @throws {Error} If query execution fails.\n   */\n  public async callContract(\n    params: ContractCallQueryParams\n  ): Promise<ContractFunctionResult> {\n    const query = new ContractCallQuery().setContractId(params.contractId);\n\n    if (params.gas) {\n      if (typeof params.gas === 'number') {\n        query.setGas(params.gas);\n      } else {\n        query.setGas(Long.fromValue(params.gas));\n      }\n    }\n\n    if (params.functionName) {\n      if (params.functionParameters) {\n        query.setFunction(params.functionName, params.functionParameters);\n      } else {\n        query.setFunction(params.functionName);\n      }\n    }\n\n    if (params.maxQueryPayment) {\n      query.setQueryPayment(params.maxQueryPayment);\n    }\n\n    if (params.paymentTransactionId) {\n      if (typeof params.paymentTransactionId === 'string') {\n        query.setPaymentTransactionId(\n          TransactionId.fromString(params.paymentTransactionId)\n        );\n      } else {\n        query.setPaymentTransactionId(params.paymentTransactionId);\n      }\n    }\n\n    try {\n      this.logger.info(\n        `Executing ContractCallQuery for contract ${params.contractId.toString()}`\n      );\n      return await query.execute(this.kit.client);\n    } catch (error: unknown) {\n      this.logger.error(\n        `ContractCallQuery failed for contract ${params.contractId.toString()}: ${\n          error instanceof Error ? error.message : JSON.stringify(error)\n        }`\n      );\n      throw error;\n    }\n  }\n}\n"],"names":[],"mappings":"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"}