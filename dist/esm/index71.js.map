{"version":3,"file":"index71.js","sources":["../../src/builders/account/account-builder.ts"],"sourcesContent":["import {\n  AccountCreateTransaction,\n  AccountUpdateTransaction,\n  AccountDeleteTransaction,\n  Hbar,\n  TransferTransaction,\n  Long,\n  AccountAllowanceApproveTransaction,\n  AccountAllowanceDeleteTransaction,\n  TokenId,\n  NftId,\n  Key,\n  AccountId,\n  ScheduleId,\n  ScheduleSignTransaction,\n} from '@hashgraph/sdk';\nimport BigNumber from 'bignumber.js';\nimport {\n  CreateAccountParams,\n  HbarTransferParams,\n  UpdateAccountParams,\n  DeleteAccountParams,\n  ApproveHbarAllowanceParams,\n  ApproveTokenNftAllowanceParams,\n  ApproveFungibleTokenAllowanceParams,\n  RevokeHbarAllowanceParams,\n  RevokeFungibleTokenAllowanceParams,\n  DeleteNftSpenderAllowanceParams,\n  DeleteNftSpenderAllowanceToolParams,\n  DeleteNftSerialAllowancesParams,\n  SignScheduledTransactionParams,\n} from '../../types';\nimport { BaseServiceBuilder } from '../base-service-builder';\nimport { HederaAgentKit } from '../../agent/agent';\nimport { detectKeyTypeFromString } from '../../utils/key-type-detector';\n\nconst DEFAULT_ACCOUNT_AUTORENEW_PERIOD_SECONDS = 7776000;\n\n/**\n * AccountBuilder facilitates the construction and execution of Hedera account-related transactions.\n */\nexport class AccountBuilder extends BaseServiceBuilder {\n  constructor(hederaKit: HederaAgentKit) {\n    super(hederaKit);\n  }\n\n  /**\n   * Creates a new Hedera account.\n   * @param {CreateAccountParams} params Parameters for creating an account.\n   * @returns {this} The builder instance for chaining.\n   * @throws {Error} If required parameters are missing.\n   */\n  public createAccount(params: CreateAccountParams): this {\n    this.clearNotes();\n    const transaction = new AccountCreateTransaction();\n    let autoRenewPeriodSetByUser = false;\n\n    if (typeof params.key !== 'undefined') {\n      if (params.key === null) {\n        this.logger.warn(\n          'Received null for key in createAccount. A key or alias is typically required.'\n        );\n      } else if (typeof params.key === 'string') {\n        const keyDetection = detectKeyTypeFromString(params.key);\n        transaction.setKeyWithoutAlias(keyDetection.privateKey);\n      } else {\n        transaction.setKeyWithoutAlias(params.key as Key);\n      }\n    }\n\n    if (typeof params.initialBalance !== 'undefined') {\n      if (params.initialBalance === null) {\n        this.logger.warn('Received null for initialBalance in createAccount.');\n      } else if (typeof params.initialBalance === 'string') {\n        transaction.setInitialBalance(Hbar.fromString(params.initialBalance));\n      } else if (typeof params.initialBalance === 'number') {\n        transaction.setInitialBalance(new Hbar(params.initialBalance));\n      } else {\n        transaction.setInitialBalance(params.initialBalance);\n      }\n    }\n\n    if (typeof params.receiverSignatureRequired !== 'undefined') {\n      if (params.receiverSignatureRequired === null) {\n        this.logger.warn(\n          'Received null for receiverSignatureRequired in createAccount.'\n        );\n      } else {\n        transaction.setReceiverSignatureRequired(\n          params.receiverSignatureRequired\n        );\n      }\n    }\n\n    if (typeof params.autoRenewPeriod !== 'undefined') {\n      if (params.autoRenewPeriod === null) {\n        this.logger.warn('Received null for autoRenewPeriod in createAccount.');\n      } else if (\n        typeof params.autoRenewPeriod === 'number' ||\n        (params.autoRenewPeriod as unknown) instanceof Long\n      ) {\n        transaction.setAutoRenewPeriod(params.autoRenewPeriod as number | Long);\n        autoRenewPeriodSetByUser = true;\n      } else if (\n        typeof params.autoRenewPeriod === 'object' &&\n        typeof (params.autoRenewPeriod as unknown as { seconds?: number }).seconds === 'number'\n      ) {\n        transaction.setAutoRenewPeriod(\n          (params.autoRenewPeriod as { seconds: number }).seconds\n        );\n        autoRenewPeriodSetByUser = true;\n      } else {\n        this.logger.warn(\n          'Invalid autoRenewPeriod in createAccount, using default.'\n        );\n        transaction.setAutoRenewPeriod(\n          DEFAULT_ACCOUNT_AUTORENEW_PERIOD_SECONDS\n        );\n      }\n    } else {\n      transaction.setAutoRenewPeriod(DEFAULT_ACCOUNT_AUTORENEW_PERIOD_SECONDS);\n    }\n\n    if (!autoRenewPeriodSetByUser) {\n      this.addNote(\n        `Default auto-renew period of ${DEFAULT_ACCOUNT_AUTORENEW_PERIOD_SECONDS} seconds applied.`\n      );\n    }\n\n    if (typeof params.memo !== 'undefined') {\n      if (params.memo === null) {\n        this.logger.warn('Received null for memo in createAccount.');\n      } else {\n        transaction.setAccountMemo(params.memo);\n      }\n    }\n\n    if (typeof params.maxAutomaticTokenAssociations !== 'undefined') {\n      if (params.maxAutomaticTokenAssociations === null) {\n        this.logger.warn(\n          'Received null for maxAutomaticTokenAssociations in createAccount.'\n        );\n      } else {\n        transaction.setMaxAutomaticTokenAssociations(\n          params.maxAutomaticTokenAssociations\n        );\n      }\n    }\n\n    if (typeof params.stakedAccountId !== 'undefined') {\n      if (params.stakedAccountId === null) {\n        this.logger.warn('Received null for stakedAccountId in createAccount.');\n      } else {\n        transaction.setStakedAccountId(params.stakedAccountId);\n      }\n    }\n\n    if (typeof params.stakedNodeId !== 'undefined') {\n      if (params.stakedNodeId === null) {\n        this.logger.warn('Received null for stakedNodeId in createAccount.');\n      } else {\n        transaction.setStakedNodeId(params.stakedNodeId);\n      }\n    }\n\n    if (typeof params.declineStakingReward !== 'undefined') {\n      if (params.declineStakingReward === null) {\n        this.logger.warn(\n          'Received null for declineStakingReward in createAccount.'\n        );\n      } else {\n        transaction.setDeclineStakingReward(params.declineStakingReward);\n      }\n    }\n\n    if (typeof params.alias !== 'undefined') {\n      if (params.alias === null) {\n        this.logger.warn('Received null for alias in createAccount.');\n      } else {\n        transaction.setAlias(params.alias);\n      }\n    }\n\n    if (!params.key && !params.alias) {\n      this.logger.warn(\n        'AccountCreateTransaction: Neither key nor a usable alias (PublicKey/EvmAddress) was provided. Transaction might fail.'\n      );\n    }\n\n    this.setCurrentTransaction(transaction);\n    return this;\n  }\n\n  /**\n   * Transfers HBAR between accounts.\n   * @param {HbarTransferParams} params Parameters for the HBAR transfer.\n   * @param {boolean} [isUserInitiated=true] Whether this transfer was initiated by the user (vs. system/agent)\n   * @returns {this} The builder instance for chaining.\n   * @throws {Error} If transfers are missing or do not sum to zero.\n   */\n  public transferHbar(\n    params: HbarTransferParams,\n    isUserInitiated: boolean = true\n  ): this {\n    this.clearNotes();\n    const transaction = new TransferTransaction();\n    if (!params.transfers || params.transfers.length === 0) {\n      throw new Error('HbarTransferParams must include at least one transfer.');\n    }\n\n    let netZeroInTinybars = new BigNumber(0);\n    let userTransferProcessedForScheduling = false;\n\n    if (\n      isUserInitiated &&\n      this.kit.userAccountId &&\n      this.kit.operationalMode === 'returnBytes' &&\n      params.transfers.length === 1\n    ) {\n      const receiverTransfer = params.transfers[0];\n      const amountValue =\n        typeof receiverTransfer.amount === 'string' ||\n        typeof receiverTransfer.amount === 'number'\n          ? receiverTransfer.amount\n          : receiverTransfer.amount.toString();\n\n      const amountBigNum = new BigNumber(amountValue);\n\n      if (amountBigNum.isPositive()) {\n        const recipientAccountId =\n          typeof receiverTransfer.accountId === 'string'\n            ? AccountId.fromString(receiverTransfer.accountId)\n            : receiverTransfer.accountId;\n\n        const sdkHbarAmount = Hbar.fromString(amountValue.toString());\n\n        this.logger.info(\n          `[AccountBuilder.transferHbar] Configuring user-initiated scheduled transfer: ${sdkHbarAmount.toString()} from ${\n            this.kit.userAccountId\n          } to ${recipientAccountId.toString()}`\n        );\n        this.addNote(\n          `Configured HBAR transfer from your account (${\n            this.kit.userAccountId\n          }) to ${recipientAccountId.toString()} for ${sdkHbarAmount.toString()}.`\n        );\n\n        transaction.addHbarTransfer(recipientAccountId, sdkHbarAmount);\n        transaction.addHbarTransfer(\n          AccountId.fromString(this.kit.userAccountId),\n          sdkHbarAmount.negated()\n        );\n\n        userTransferProcessedForScheduling = true;\n      }\n    }\n\n    if (!userTransferProcessedForScheduling) {\n      for (const transferInput of params.transfers) {\n        const accountId =\n          typeof transferInput.accountId === 'string'\n            ? AccountId.fromString(transferInput.accountId)\n            : transferInput.accountId;\n\n        const amountValue =\n          typeof transferInput.amount === 'string' ||\n          typeof transferInput.amount === 'number'\n            ? transferInput.amount\n            : transferInput.amount.toString();\n\n        const sdkHbarAmount = Hbar.fromString(amountValue.toString());\n\n        transaction.addHbarTransfer(accountId, sdkHbarAmount);\n\n        const tinybarsContribution = sdkHbarAmount.toTinybars();\n        netZeroInTinybars = netZeroInTinybars.plus(\n          tinybarsContribution.toString()\n        );\n      }\n\n      if (!netZeroInTinybars.isZero()) {\n        throw new Error('The sum of all HBAR transfers must be zero.');\n      }\n    }\n\n    if (typeof params.memo !== 'undefined') {\n      if (params.memo === null) {\n        this.logger.warn('Received null for memo in transferHbar.');\n      } else {\n        transaction.setTransactionMemo(params.memo);\n      }\n    }\n    this.setCurrentTransaction(transaction);\n    return this;\n  }\n\n  /**\n   * Updates an existing Hedera account.\n   * If an optional field in `params` is `undefined`, that aspect of the account is not changed.\n   * Specific string or number values (e.g., memo: \"\", stakedAccountId: \"0.0.0\", stakedNodeId: -1)\n   * provided by the LLM (and allowed by the Zod schema in the tool) will be applied directly.\n   * @param {UpdateAccountParams} params Parameters for updating an account.\n   * @returns {this} The builder instance for chaining.\n   * @throws {Error} If accountIdToUpdate is missing or key parsing fails.\n   */\n  public updateAccount(params: UpdateAccountParams): this {\n    if (!params.accountIdToUpdate) {\n      throw new Error('accountIdToUpdate is required for updating an account.');\n    }\n    const transaction = new AccountUpdateTransaction().setAccountId(\n      params.accountIdToUpdate\n    );\n\n    if (typeof params.key !== 'undefined') {\n      if (params.key === null) {\n        this.logger.warn('Received null for key, skipping update for key.');\n      } else if (typeof params.key === 'string') {\n        try {\n          const keyDetection = detectKeyTypeFromString(params.key);\n          transaction.setKey(keyDetection.privateKey);\n        } catch (e) {\n          this.logger.error(`Failed to parse key string: ${params.key}`, e);\n          throw new Error(`Invalid key string provided: ${params.key}`);\n        }\n      } else {\n        transaction.setKey(params.key as Key);\n      }\n    }\n\n    if (typeof params.autoRenewPeriod !== 'undefined') {\n      if (params.autoRenewPeriod === null) {\n        this.logger.warn('Received null for autoRenewPeriod, skipping update.');\n      } else if (typeof params.autoRenewPeriod === 'number') {\n        transaction.setAutoRenewPeriod(params.autoRenewPeriod);\n      } else {\n        this.logger.warn(\n          `Invalid autoRenewPeriod format: ${JSON.stringify(\n            params.autoRenewPeriod\n          )}. Skipping.`\n        );\n      }\n    }\n\n    if (typeof params.receiverSignatureRequired !== 'undefined') {\n      if (params.receiverSignatureRequired === null) {\n        this.logger.warn(\n          'Received null for receiverSignatureRequired, skipping update.'\n        );\n      } else {\n        transaction.setReceiverSignatureRequired(\n          params.receiverSignatureRequired\n        );\n      }\n    }\n\n    if (typeof params.stakedAccountId !== 'undefined') {\n      if (params.stakedAccountId === null) {\n        this.logger.warn('Received null for stakedAccountId, skipping update.');\n      } else {\n        const saId = String(params.stakedAccountId);\n        if (saId === '0.0.0' || /^\\d+\\.\\d+\\.\\d+$/.test(saId)) {\n          transaction.setStakedAccountId(saId);\n        } else {\n          this.logger.warn(\n            `Invalid stakedAccountId format: ${saId}. Skipping.`\n          );\n        }\n      }\n    }\n\n    if (typeof params.stakedNodeId !== 'undefined') {\n      if (params.stakedNodeId === null) {\n        this.logger.warn('Received null for stakedNodeId, skipping update.');\n      } else {\n        transaction.setStakedNodeId(params.stakedNodeId);\n      }\n    }\n\n    if (typeof params.declineStakingReward !== 'undefined') {\n      if (params.declineStakingReward === null) {\n        this.logger.warn(\n          'Received null for declineStakingReward, skipping update.'\n        );\n      } else {\n        transaction.setDeclineStakingReward(params.declineStakingReward);\n      }\n    }\n\n    if (typeof params.memo !== 'undefined') {\n      if (params.memo === null) {\n        this.logger.warn('Received null for memo, skipping update.');\n      } else {\n        transaction.setAccountMemo(params.memo);\n      }\n    }\n\n    if (typeof params.maxAutomaticTokenAssociations !== 'undefined') {\n      if (params.maxAutomaticTokenAssociations === null) {\n        this.logger.warn(\n          'Received null for maxAutomaticTokenAssociations, skipping update.'\n        );\n      } else if (typeof params.maxAutomaticTokenAssociations === 'number') {\n        transaction.setMaxAutomaticTokenAssociations(\n          params.maxAutomaticTokenAssociations\n        );\n      } else {\n        this.logger.warn(\n          `Invalid type for maxAutomaticTokenAssociations: ${typeof params.maxAutomaticTokenAssociations}. Skipping.`\n        );\n      }\n    }\n\n    this.setCurrentTransaction(transaction);\n    return this;\n  }\n\n  /**\n   * Deletes an existing Hedera account.\n   * @param {DeleteAccountParams} params Parameters for deleting an account.\n   * @returns {this} The builder instance for chaining.\n   * @throws {Error} If required parameters are missing.\n   */\n  public deleteAccount(params: DeleteAccountParams): this {\n    if (!params.deleteAccountId) {\n      throw new Error('deleteAccountId is required for deleting an account.');\n    }\n    if (!params.transferAccountId) {\n      throw new Error('transferAccountId is required for deleting an account.');\n    }\n\n    const transaction = new AccountDeleteTransaction()\n      .setAccountId(params.deleteAccountId)\n      .setTransferAccountId(params.transferAccountId);\n\n    this.setCurrentTransaction(transaction);\n    return this;\n  }\n\n  /**\n   * Approves an HBAR allowance for a spender.\n   * @param {ApproveHbarAllowanceParams} params Parameters for approving HBAR allowance.\n   * @returns {this} The builder instance for chaining.\n   */\n  public approveHbarAllowance(params: ApproveHbarAllowanceParams): this {\n    const transaction =\n      new AccountAllowanceApproveTransaction().approveHbarAllowance(\n        params.ownerAccountId || this.kit.signer.getAccountId(),\n        params.spenderAccountId,\n        params.amount\n      );\n    this.setCurrentTransaction(transaction);\n    return this;\n  }\n\n  /**\n   * Approves an NFT allowance for a spender.\n   * @param {ApproveTokenNftAllowanceParams} params Parameters for approving NFT allowance.\n   * @returns {this} The builder instance for chaining.\n   * @throws {Error} If NFT allowance parameters are invalid.\n   */\n  public approveTokenNftAllowance(\n    params: ApproveTokenNftAllowanceParams\n  ): this {\n    const transaction = new AccountAllowanceApproveTransaction();\n    const owner = params.ownerAccountId || this.kit.signer.getAccountId();\n    const tokenId =\n      typeof params.tokenId === 'string'\n        ? TokenId.fromString(params.tokenId)\n        : params.tokenId;\n\n    if (params.allSerials) {\n      transaction.approveTokenNftAllowanceAllSerials(\n        tokenId,\n        owner,\n        params.spenderAccountId\n      );\n    } else if (params.serials && params.serials.length > 0) {\n      for (const serial of params.serials) {\n        let serialLong: Long;\n        if (typeof serial === 'number') {\n          serialLong = Long.fromNumber(serial);\n        } else if (serial instanceof BigNumber) {\n          serialLong = Long.fromString(serial.toString());\n        } else {\n          serialLong = serial as Long;\n        }\n        transaction.approveTokenNftAllowance(\n          new NftId(tokenId, serialLong),\n          owner,\n          params.spenderAccountId\n        );\n      }\n    } else {\n      throw new Error(\n        \"Either allSerials must be true or 'serials' (with serial numbers) must be provided for NFT allowance.\"\n      );\n    }\n\n    if (typeof params.memo !== 'undefined') {\n      if (params.memo === null) {\n        this.logger.warn('Received null for memo in approveTokenNftAllowance.');\n      } else {\n        transaction.setTransactionMemo(params.memo);\n      }\n    }\n\n    this.setCurrentTransaction(transaction);\n    return this;\n  }\n\n  /**\n   * Approves a fungible token allowance for a spender.\n   * @param {ApproveFungibleTokenAllowanceParams} params Parameters for approving fungible token allowance.\n   * @returns {this} The builder instance for chaining.\n   */\n  public approveFungibleTokenAllowance(\n    params: ApproveFungibleTokenAllowanceParams\n  ): this {\n    const tokenId =\n      typeof params.tokenId === 'string'\n        ? TokenId.fromString(params.tokenId)\n        : params.tokenId;\n    let amountLong: Long;\n\n    if (typeof params.amount === 'string') {\n      amountLong = Long.fromString(params.amount);\n    } else if (typeof params.amount === 'number') {\n      amountLong = Long.fromNumber(params.amount);\n    } else if (params.amount instanceof BigNumber) {\n      amountLong = Long.fromString(params.amount.toString());\n    } else {\n      amountLong = params.amount as Long;\n    }\n\n    const transaction =\n      new AccountAllowanceApproveTransaction().approveTokenAllowance(\n        tokenId,\n        params.ownerAccountId || this.kit.signer.getAccountId(),\n        params.spenderAccountId,\n        amountLong\n      );\n    this.setCurrentTransaction(transaction);\n    return this;\n  }\n\n  /**\n   * Deletes NFT allowances.\n   * Note: This method is currently stubbed and non-functional due to SDK considerations.\n   * @returns {this} The builder instance.\n   * @throws {Error} Method is temporarily disabled.\n   */\n  public deleteNftSpenderAllowance(\n    params: DeleteNftSpenderAllowanceParams\n  ): this {\n    const nftId =\n      typeof params.nftId === 'string'\n        ? NftId.fromString(params.nftId)\n        : params.nftId;\n    const owner = params.ownerAccountId || this.kit.signer.getAccountId();\n\n    const transaction =\n      new AccountAllowanceDeleteTransaction().deleteAllTokenNftAllowances(\n        nftId,\n        owner\n      );\n\n    if (typeof params.memo !== 'undefined') {\n      if (params.memo === null) {\n        this.logger.warn(\n          'Received null for memo in deleteNftSpenderAllowance.'\n        );\n      } else {\n        transaction.setTransactionMemo(params.memo);\n      }\n    }\n\n    this.setCurrentTransaction(transaction);\n    return this;\n  }\n\n  /**\n   * Revokes an HBAR allowance.\n   * @param {RevokeHbarAllowanceParams} params Parameters for revoking HBAR allowance.\n   * @returns {this} The builder instance for chaining.\n   */\n  public revokeHbarAllowance(params: RevokeHbarAllowanceParams): this {\n    const transaction =\n      new AccountAllowanceApproveTransaction().approveHbarAllowance(\n        params.ownerAccountId || this.kit.signer.getAccountId(),\n        params.spenderAccountId,\n        new Hbar(0)\n      );\n    this.setCurrentTransaction(transaction);\n    return this;\n  }\n\n  /**\n   * Revokes a fungible token allowance.\n   * @param {RevokeFungibleTokenAllowanceParams} params Parameters for revoking fungible token allowance.\n   * @returns {this} The builder instance for chaining.\n   */\n  public revokeFungibleTokenAllowance(\n    params: RevokeFungibleTokenAllowanceParams\n  ): this {\n    const tokenId =\n      typeof params.tokenId === 'string'\n        ? TokenId.fromString(params.tokenId)\n        : params.tokenId;\n    const transaction =\n      new AccountAllowanceApproveTransaction().approveTokenAllowance(\n        tokenId,\n        params.ownerAccountId || this.kit.signer.getAccountId(),\n        params.spenderAccountId,\n        0\n      );\n    this.setCurrentTransaction(transaction);\n    return this;\n  }\n\n  /**\n   * Deletes all allowances for a specific NFT serial (for all spenders), granted by an owner.\n   * The transaction must be signed by the owner of the NFTs.\n   * @param {DeleteNftSerialAllowancesParams} params - Parameters for the operation.\n   * @returns {this} The builder instance for chaining.\n   */\n  public deleteNftSerialAllowancesForAllSpenders(\n    params: DeleteNftSerialAllowancesParams\n  ): this {\n    let ownerAccId: AccountId;\n    if (params.ownerAccountId) {\n      if (typeof params.ownerAccountId === 'string') {\n        ownerAccId = AccountId.fromString(params.ownerAccountId);\n      } else {\n        ownerAccId = params.ownerAccountId;\n      }\n    } else {\n      ownerAccId = this.kit.signer.getAccountId();\n    }\n\n    const parts = params.nftIdString.split('.');\n    if (parts.length !== 4) {\n      throw new Error(\n        `Invalid nftIdString format: ${params.nftIdString}. Expected format like \"0.0.token.serial\".`\n      );\n    }\n    const sdkTokenId = TokenId.fromString(\n      `${parts[0]}.${parts[1]}.${parts[2]}`\n    );\n    const sdkSerial = Long.fromString(parts[3]);\n    const sdkNftId = new NftId(sdkTokenId, sdkSerial);\n\n    const transaction =\n      new AccountAllowanceDeleteTransaction().deleteAllTokenNftAllowances(\n        sdkNftId,\n        ownerAccId\n      );\n\n    if (params.memo) {\n      transaction.setTransactionMemo(params.memo);\n    }\n\n    this.setCurrentTransaction(transaction);\n    return this;\n  }\n\n  /**\n   * Deletes/revokes NFT allowances for specific serial numbers of a token for a specific spender.\n   * The transaction must be signed by the owner of the NFTs.\n   * @param {DeleteNftSpenderAllowanceToolParams} params - Parameters for the operation.\n   * @returns {this} The builder instance for chaining.\n   */\n  public deleteTokenNftAllowanceForSpender(\n    params: DeleteNftSpenderAllowanceToolParams\n  ): this {\n    let ownerAccIdToUse: AccountId;\n    if (params.ownerAccountId) {\n      ownerAccIdToUse =\n        typeof params.ownerAccountId === 'string'\n          ? AccountId.fromString(params.ownerAccountId)\n          : params.ownerAccountId;\n    } else {\n      ownerAccIdToUse = this.kit.signer.getAccountId();\n    }\n\n    const sdkTokenId =\n      typeof params.tokenId === 'string'\n        ? TokenId.fromString(params.tokenId)\n        : params.tokenId;\n\n    const sdkSerials: Long[] = params.serials.map(\n      (s: string | number | Long) => {\n        if (typeof s === 'string') return Long.fromString(s);\n        if (typeof s === 'number') return Long.fromNumber(s);\n        return s;\n      }\n    );\n\n    const transaction =\n      new AccountAllowanceDeleteTransaction().deleteAllTokenNftAllowances(\n        new NftId(sdkTokenId, sdkSerials[0]),\n        ownerAccIdToUse\n      );\n\n    if (params.memo) {\n      transaction.setTransactionMemo(params.memo);\n    }\n\n    this.setCurrentTransaction(transaction);\n    return this;\n  }\n\n  /**\n   * Prepares a ScheduleSignTransaction for a previously scheduled transaction.\n   * @param {SignScheduledTransactionParams} params Parameters for the ScheduleSign transaction.\n   * @returns {this} The builder instance for chaining.\n   */\n  public prepareSignScheduledTransaction(\n    params: SignScheduledTransactionParams\n  ): this {\n    if (!params.scheduleId) {\n      throw new Error(\n        'scheduleId is required to prepare a ScheduleSignTransaction.'\n      );\n    }\n\n    const scheduleId =\n      typeof params.scheduleId === 'string'\n        ? ScheduleId.fromString(params.scheduleId)\n        : params.scheduleId;\n\n    const transaction = new ScheduleSignTransaction().setScheduleId(scheduleId);\n\n    if (params.memo) {\n      transaction.setTransactionMemo(params.memo);\n    }\n\n    this.setCurrentTransaction(transaction);\n    return this;\n  }\n}\n"],"names":[],"mappings":"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"}