{"version":3,"file":"index64.js","sources":["../../src/langchain/tools/scs/update-contract-tool.ts"],"sourcesContent":["import { z } from 'zod';\nimport { UpdateContractParams } from '../../../types';\nimport {\n  BaseHederaTransactionTool,\n  BaseHederaTransactionToolParams,\n} from '../common/base-hedera-transaction-tool';\nimport { BaseServiceBuilder } from '../../../builders/base-service-builder';\nimport { ScsBuilder } from '../../../builders/scs/scs-builder';\n\nconst UpdateContractZodSchemaCore = z.object({\n  contractId: z\n    .string()\n    .describe('The ID of the contract to update (e.g., \"0.0.xxxx\").'),\n  adminKey: z\n    .string()\n    .nullable()\n    .optional()\n    .describe(\n      'Optional. New admin key (serialized string). Pass null to clear.'\n    ),\n  autoRenewPeriod: z\n    .number()\n    .int()\n    .positive()\n    .optional()\n    .describe('Optional. New auto-renewal period in seconds.'),\n  memo: z\n    .string()\n    .nullable()\n    .optional()\n    .describe(\n      'Optional. New contract memo. Pass null or empty string to clear.'\n    ),\n  stakedAccountId: z\n    .string()\n    .nullable()\n    .optional()\n    .describe(\n      'Optional. New account ID to stake to. Pass \"0.0.0\" or null to clear.'\n    ),\n  stakedNodeId: z\n    .number()\n    .int()\n    .nullable()\n    .optional()\n    .describe(\n      'Optional. New node ID to stake to. Pass -1 or null to clear. Builder handles Long conversion.'\n    ),\n  declineStakingReward: z\n    .boolean()\n    .optional()\n    .describe('Optional. If true, contract declines staking rewards.'),\n  maxAutomaticTokenAssociations: z\n    .number()\n    .int()\n    .optional()\n    .describe('Optional. New max automatic token associations.'),\n  proxyAccountId: z\n    .string()\n    .nullable()\n    .optional()\n    .describe('Optional. New proxy account ID. Pass \"0.0.0\" or null to clear.'),\n});\n\nexport class HederaUpdateContractTool extends BaseHederaTransactionTool<\n  typeof UpdateContractZodSchemaCore\n> {\n  name = 'hedera-scs-update-contract';\n  description =\n    'Updates an existing Hedera smart contract. Builder handles parsing and clearing logic.';\n  specificInputSchema = UpdateContractZodSchemaCore;\n  namespace = 'scs';\n\n  constructor(params: BaseHederaTransactionToolParams) {\n    super(params);\n  }\n\n  protected getServiceBuilder(): BaseServiceBuilder {\n    return this.hederaKit.scs();\n  }\n\n  protected async callBuilderMethod(\n    builder: BaseServiceBuilder,\n    specificArgs: z.infer<typeof UpdateContractZodSchemaCore>\n  ): Promise<void> {\n    await (builder as ScsBuilder).updateContract(\n      specificArgs as unknown as UpdateContractParams\n    );\n  }\n}\n"],"names":[],"mappings":";;AASA,MAAM,8BAA8B,EAAE,OAAO;AAAA,EAC3C,YAAY,EACT,SACA,SAAS,sDAAsD;AAAA,EAClE,UAAU,EACP,OAAA,EACA,SAAA,EACA,WACA;AAAA,IACC;AAAA,EAAA;AAAA,EAEJ,iBAAiB,EACd,OAAA,EACA,IAAA,EACA,SAAA,EACA,SAAA,EACA,SAAS,+CAA+C;AAAA,EAC3D,MAAM,EACH,OAAA,EACA,SAAA,EACA,WACA;AAAA,IACC;AAAA,EAAA;AAAA,EAEJ,iBAAiB,EACd,OAAA,EACA,SAAA,EACA,WACA;AAAA,IACC;AAAA,EAAA;AAAA,EAEJ,cAAc,EACX,SACA,MACA,SAAA,EACA,SAAA,EACA;AAAA,IACC;AAAA,EAAA;AAAA,EAEJ,sBAAsB,EACnB,QAAA,EACA,SAAA,EACA,SAAS,uDAAuD;AAAA,EACnE,+BAA+B,EAC5B,SACA,MACA,SAAA,EACA,SAAS,iDAAiD;AAAA,EAC7D,gBAAgB,EACb,OAAA,EACA,WACA,SAAA,EACA,SAAS,gEAAgE;AAC9E,CAAC;AAEM,MAAM,iCAAiC,0BAE5C;AAAA,EAOA,YAAY,QAAyC;AACnD,UAAM,MAAM;AAPd,SAAA,OAAO;AACP,SAAA,cACE;AACF,SAAA,sBAAsB;AACtB,SAAA,YAAY;AAAA,EAAA;AAAA,EAMF,oBAAwC;AAChD,WAAO,KAAK,UAAU,IAAA;AAAA,EAAI;AAAA,EAG5B,MAAgB,kBACd,SACA,cACe;AACf,UAAO,QAAuB;AAAA,MAC5B;AAAA,IAAA;AAAA,EACF;AAEJ;"}