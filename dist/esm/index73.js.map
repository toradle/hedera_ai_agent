{"version":3,"file":"index73.js","sources":["../../src/builders/hcs/hcs-builder.ts"],"sourcesContent":["import {\n  TopicCreateTransaction,\n  TopicMessageSubmitTransaction,\n  TopicDeleteTransaction,\n  TopicUpdateTransaction,\n  TopicId,\n  PublicKey,\n  AccountId,\n  KeyList,\n} from '@hashgraph/sdk';\nimport { Buffer } from 'buffer';\nimport {\n  CreateTopicParams,\n  SubmitMessageParams,\n  DeleteTopicParams,\n  UpdateTopicParams,\n} from '../../types';\nimport { BaseServiceBuilder } from '../base-service-builder';\nimport { HederaAgentKit } from '../../agent/agent';\n\nconst DEFAULT_AUTORENEW_PERIOD_SECONDS = 7776000;\nconst MAX_SINGLE_MESSAGE_BYTES = 1000;\n\n/**\n * HcsBuilder facilitates the construction and execution of Hedera Consensus Service (HCS) transactions.\n * It extends BaseServiceBuilder to provide common transaction execution and byte generation methods.\n */\nexport class HcsBuilder extends BaseServiceBuilder {\n  constructor(hederaKit: HederaAgentKit) {\n    super(hederaKit);\n  }\n\n  /**\n   * @param {CreateTopicParams} params\n   * @returns {Promise<this>}\n   */\n  public async createTopic(params: CreateTopicParams): Promise<this> {\n    this.clearNotes();\n    const transaction = new TopicCreateTransaction();\n\n    if (params.memo) {\n      transaction.setTopicMemo(params.memo);\n    }\n\n    if (params.adminKey) {\n      const parsedAdminKey = await this.parseKey(params.adminKey);\n      if (parsedAdminKey) {\n        transaction.setAdminKey(parsedAdminKey);\n      }\n    }\n\n    if (params.feeScheduleKey) {\n      const parsedFeeScheduleKey = await this.parseKey(params.feeScheduleKey);\n      if (parsedFeeScheduleKey) {\n        transaction.setFeeScheduleKey(parsedFeeScheduleKey);\n      }\n    }\n\n    if (params.submitKey) {\n      const parsedSubmitKey = await this.parseKey(params.submitKey);\n      if (parsedSubmitKey) {\n        transaction.setSubmitKey(parsedSubmitKey);\n      }\n    }\n\n    if (params.autoRenewPeriod) {\n      transaction.setAutoRenewPeriod(params.autoRenewPeriod);\n    } else {\n      transaction.setAutoRenewPeriod(DEFAULT_AUTORENEW_PERIOD_SECONDS);\n      this.addNote(`Default auto-renew period of ${DEFAULT_AUTORENEW_PERIOD_SECONDS} seconds applied for topic.`);\n    }\n\n    if (params.autoRenewAccountId) {\n      transaction.setAutoRenewAccountId(params.autoRenewAccountId);\n    } else {\n      this.logger.warn(\n        'MirrorNode client is not available on the signer, cannot set fee exempt keys by account ID for createTopic.'\n      );\n      this.addNote('Could not set fee exempt accounts for topic creation: MirrorNode client not available on signer.');\n    }\n\n    if (params.customFees && params.customFees.length > 0) {\n      transaction.setCustomFees(params.customFees);\n    }\n\n    if (params.exemptAccountIds && params.exemptAccountIds.length > 0) {\n      if (!this.kit.signer.mirrorNode) {\n        this.logger.warn(\n          'MirrorNode client is not available on the signer, cannot set fee exempt keys by account ID for createTopic.'\n        );\n        this.addNote('Could not attempt to set fee exempt accounts for topic creation: MirrorNode client not available on signer.');\n      } else {\n        try {\n          const publicKeys: PublicKey[] = [];\n          for (const accountIdStr of params.exemptAccountIds) {\n            const publicKey = await this.kit.signer.mirrorNode.getPublicKey(\n              accountIdStr\n            );\n            publicKeys.push(publicKey);\n          }\n          if (publicKeys.length > 0) {\n            this.logger.warn(\n              'TopicCreateTransaction does not support setFeeExemptKeys. This parameter will be ignored for topic creation.'\n            );\n          }\n        } catch (e: unknown) {\n          const error = e as Error;\n          this.logger.error(\n            `Failed to process exemptAccountIds for createTopic: ${error.message}`\n          );\n          this.addNote(`Error processing fee exempt accounts for topic creation: ${error.message}. They may not be set.`);\n        }\n      }\n    }\n\n    this.setCurrentTransaction(transaction);\n    return this;\n  }\n\n  /**\n   * Configures the builder to submit a message to an HCS topic.\n   * The transaction will be signed by the primary signer (operator).\n   * If the target topic has a specific submit key and it is different from the operator's key,\n   * the transaction may fail at the network level unless the transaction bytes are retrieved\n   * using `getTransactionBytes()` and signed externally by the required submit key(s) before submission.\n   * The `params.submitKey` (if provided in `SubmitMessageParams`) is not directly used to sign\n   * within this builder method for `TopicMessageSubmitTransaction` as the transaction type itself\n   * does not have a field for an overriding submitter's public key; authorization is based on the topic's configuration.\n   * @param {SubmitMessageParams} params - Parameters for submitting the message.\n   * @returns {this} The HcsBuilder instance for fluent chaining.\n   */\n  public submitMessageToTopic(params: SubmitMessageParams): this {\n    const topicId =\n      typeof params.topicId === 'string'\n        ? TopicId.fromString(params.topicId)\n        : params.topicId;\n    const messageContents = params.message;\n    const messageBytesLength =\n      typeof messageContents === 'string'\n        ? Buffer.from(messageContents, 'utf8').length\n        : messageContents.length;\n\n    if (messageBytesLength > MAX_SINGLE_MESSAGE_BYTES) {\n      this.logger.warn(\n        `HcsBuilder: Message size (${messageBytesLength} bytes) exceeds recommended single transaction limit (${MAX_SINGLE_MESSAGE_BYTES} bytes). The transaction will likely fail if not accepted by the network.`\n      );\n    }\n\n    let transaction = new TopicMessageSubmitTransaction()\n      .setTopicId(topicId)\n      .setMessage(messageContents);\n\n    if (params.maxChunks) {\n      transaction.setMaxChunks(params.maxChunks);\n    }\n\n    if (params.chunkSize) {\n      transaction.setChunkSize(params.chunkSize);\n    }\n\n    this.setCurrentTransaction(transaction);\n    return this;\n  }\n\n  /**\n   * @param {DeleteTopicParams} params\n   * @returns {this}\n   * @throws {Error}\n   */\n  public deleteTopic(params: DeleteTopicParams): this {\n    if (params.topicId === undefined) {\n      throw new Error('Topic ID is required to delete a topic.');\n    }\n    const transaction = new TopicDeleteTransaction().setTopicId(params.topicId);\n    this.setCurrentTransaction(transaction);\n    return this;\n  }\n\n  /**\n   * Configures the builder to update an HCS topic.\n   * @param {UpdateTopicParams} params - Parameters for updating the topic.\n   * @returns {Promise<this>} The HcsBuilder instance for fluent chaining.\n   * @throws {Error} If topicId is not provided.\n   */\n  public async updateTopic(params: UpdateTopicParams): Promise<this> {\n    this.clearNotes();\n    if (!params.topicId) {\n      throw new Error('Topic ID is required to update a topic.');\n    }\n    const transaction = new TopicUpdateTransaction().setTopicId(params.topicId);\n\n    if (Object.prototype.hasOwnProperty.call(params, 'memo')) {\n      transaction.setTopicMemo(params.memo === null ? '' : params.memo!);\n    }\n\n    if (Object.prototype.hasOwnProperty.call(params, 'adminKey')) {\n      if (params.adminKey === null) {\n        transaction.setAdminKey(new KeyList());\n      } else if (params.adminKey) {\n        const parsedAdminKey = await this.parseKey(params.adminKey);\n        if (parsedAdminKey) transaction.setAdminKey(parsedAdminKey);\n      }\n    }\n\n    if (Object.prototype.hasOwnProperty.call(params, 'submitKey')) {\n      if (params.submitKey === null) {\n        transaction.setSubmitKey(new KeyList());\n      } else if (params.submitKey) {\n        const parsedSubmitKey = await this.parseKey(params.submitKey);\n        if (parsedSubmitKey) transaction.setSubmitKey(parsedSubmitKey);\n      }\n    }\n\n    if (params.autoRenewPeriod) {\n      transaction.setAutoRenewPeriod(params.autoRenewPeriod);\n    }\n\n    if (Object.prototype.hasOwnProperty.call(params, 'autoRenewAccountId')) {\n      if (params.autoRenewAccountId === null) {\n        transaction.setAutoRenewAccountId(AccountId.fromString('0.0.0'));\n      } else if (params.autoRenewAccountId) {\n        transaction.setAutoRenewAccountId(\n          params.autoRenewAccountId as string | AccountId\n        );\n      }\n    }\n\n    if (Object.prototype.hasOwnProperty.call(params, 'exemptAccountIds')) {\n      if (\n        params.exemptAccountIds &&\n        params.exemptAccountIds.length > 0 &&\n        !this.kit.signer.mirrorNode \n      ) {\n        this.logger.warn(\n          'MirrorNode client is not available on the signer, cannot set fee exempt keys by account ID for updateTopic if account IDs are provided and not empty.'\n        );\n        this.addNote('Could not set fee exempt accounts for topic update: MirrorNode client not available on signer.');\n      } else if (params.exemptAccountIds) {\n        if (params.exemptAccountIds.length === 0) {\n          transaction.setFeeExemptKeys([]);\n        } else {\n          try {\n            const publicKeys: PublicKey[] = [];\n            for (const accountIdStr of params.exemptAccountIds) {\n              const publicKey = await this.kit.signer.mirrorNode.getPublicKey(\n                accountIdStr\n              );\n              publicKeys.push(publicKey);\n            }\n            if (publicKeys.length > 0) {\n              transaction.setFeeExemptKeys(publicKeys);\n            } else {\n              this.addNote('Fee exempt accounts were provided, but no valid public keys could be resolved for them.');\n            }\n          } catch (e: unknown) {\n            const error = e as Error;\n            this.logger.error(\n              `Failed to process exemptAccountIds for updateTopic: ${error.message}`\n            );\n            this.addNote(`Error processing fee exempt accounts for topic update: ${error.message}. They may not be set.`);\n          }\n        }\n      }\n    }\n\n    this.setCurrentTransaction(transaction);\n    return this;\n  }\n}\n"],"names":[],"mappings":";;;AAoBA,MAAM,mCAAmC;AACzC,MAAM,2BAA2B;AAM1B,MAAM,mBAAmB,mBAAmB;AAAA,EACjD,YAAY,WAA2B;AACrC,UAAM,SAAS;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOjB,MAAa,YAAY,QAA0C;AACjE,SAAK,WAAA;AACL,UAAM,cAAc,IAAI,uBAAA;AAExB,QAAI,OAAO,MAAM;AACf,kBAAY,aAAa,OAAO,IAAI;AAAA,IAAA;AAGtC,QAAI,OAAO,UAAU;AACnB,YAAM,iBAAiB,MAAM,KAAK,SAAS,OAAO,QAAQ;AAC1D,UAAI,gBAAgB;AAClB,oBAAY,YAAY,cAAc;AAAA,MAAA;AAAA,IACxC;AAGF,QAAI,OAAO,gBAAgB;AACzB,YAAM,uBAAuB,MAAM,KAAK,SAAS,OAAO,cAAc;AACtE,UAAI,sBAAsB;AACxB,oBAAY,kBAAkB,oBAAoB;AAAA,MAAA;AAAA,IACpD;AAGF,QAAI,OAAO,WAAW;AACpB,YAAM,kBAAkB,MAAM,KAAK,SAAS,OAAO,SAAS;AAC5D,UAAI,iBAAiB;AACnB,oBAAY,aAAa,eAAe;AAAA,MAAA;AAAA,IAC1C;AAGF,QAAI,OAAO,iBAAiB;AAC1B,kBAAY,mBAAmB,OAAO,eAAe;AAAA,IAAA,OAChD;AACL,kBAAY,mBAAmB,gCAAgC;AAC/D,WAAK,QAAQ,gCAAgC,gCAAgC,6BAA6B;AAAA,IAAA;AAG5G,QAAI,OAAO,oBAAoB;AAC7B,kBAAY,sBAAsB,OAAO,kBAAkB;AAAA,IAAA,OACtD;AACL,WAAK,OAAO;AAAA,QACV;AAAA,MAAA;AAEF,WAAK,QAAQ,kGAAkG;AAAA,IAAA;AAGjH,QAAI,OAAO,cAAc,OAAO,WAAW,SAAS,GAAG;AACrD,kBAAY,cAAc,OAAO,UAAU;AAAA,IAAA;AAG7C,QAAI,OAAO,oBAAoB,OAAO,iBAAiB,SAAS,GAAG;AACjE,UAAI,CAAC,KAAK,IAAI,OAAO,YAAY;AAC/B,aAAK,OAAO;AAAA,UACV;AAAA,QAAA;AAEF,aAAK,QAAQ,6GAA6G;AAAA,MAAA,OACrH;AACL,YAAI;AACF,gBAAM,aAA0B,CAAA;AAChC,qBAAW,gBAAgB,OAAO,kBAAkB;AAClD,kBAAM,YAAY,MAAM,KAAK,IAAI,OAAO,WAAW;AAAA,cACjD;AAAA,YAAA;AAEF,uBAAW,KAAK,SAAS;AAAA,UAAA;AAE3B,cAAI,WAAW,SAAS,GAAG;AACzB,iBAAK,OAAO;AAAA,cACV;AAAA,YAAA;AAAA,UACF;AAAA,QACF,SACO,GAAY;AACnB,gBAAM,QAAQ;AACd,eAAK,OAAO;AAAA,YACV,uDAAuD,MAAM,OAAO;AAAA,UAAA;AAEtE,eAAK,QAAQ,4DAA4D,MAAM,OAAO,wBAAwB;AAAA,QAAA;AAAA,MAChH;AAAA,IACF;AAGF,SAAK,sBAAsB,WAAW;AACtC,WAAO;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAeF,qBAAqB,QAAmC;AAC7D,UAAM,UACJ,OAAO,OAAO,YAAY,WACtB,QAAQ,WAAW,OAAO,OAAO,IACjC,OAAO;AACb,UAAM,kBAAkB,OAAO;AAC/B,UAAM,qBACJ,OAAO,oBAAoB,WACvB,OAAO,KAAK,iBAAiB,MAAM,EAAE,SACrC,gBAAgB;AAEtB,QAAI,qBAAqB,0BAA0B;AACjD,WAAK,OAAO;AAAA,QACV,6BAA6B,kBAAkB,yDAAyD,wBAAwB;AAAA,MAAA;AAAA,IAClI;AAGF,QAAI,cAAc,IAAI,8BAAA,EACnB,WAAW,OAAO,EAClB,WAAW,eAAe;AAE7B,QAAI,OAAO,WAAW;AACpB,kBAAY,aAAa,OAAO,SAAS;AAAA,IAAA;AAG3C,QAAI,OAAO,WAAW;AACpB,kBAAY,aAAa,OAAO,SAAS;AAAA,IAAA;AAG3C,SAAK,sBAAsB,WAAW;AACtC,WAAO;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQF,YAAY,QAAiC;AAClD,QAAI,OAAO,YAAY,QAAW;AAChC,YAAM,IAAI,MAAM,yCAAyC;AAAA,IAAA;AAE3D,UAAM,cAAc,IAAI,uBAAA,EAAyB,WAAW,OAAO,OAAO;AAC1E,SAAK,sBAAsB,WAAW;AACtC,WAAO;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAST,MAAa,YAAY,QAA0C;AACjE,SAAK,WAAA;AACL,QAAI,CAAC,OAAO,SAAS;AACnB,YAAM,IAAI,MAAM,yCAAyC;AAAA,IAAA;AAE3D,UAAM,cAAc,IAAI,uBAAA,EAAyB,WAAW,OAAO,OAAO;AAE1E,QAAI,OAAO,UAAU,eAAe,KAAK,QAAQ,MAAM,GAAG;AACxD,kBAAY,aAAa,OAAO,SAAS,OAAO,KAAK,OAAO,IAAK;AAAA,IAAA;AAGnE,QAAI,OAAO,UAAU,eAAe,KAAK,QAAQ,UAAU,GAAG;AAC5D,UAAI,OAAO,aAAa,MAAM;AAC5B,oBAAY,YAAY,IAAI,SAAS;AAAA,MAAA,WAC5B,OAAO,UAAU;AAC1B,cAAM,iBAAiB,MAAM,KAAK,SAAS,OAAO,QAAQ;AAC1D,YAAI,eAAgB,aAAY,YAAY,cAAc;AAAA,MAAA;AAAA,IAC5D;AAGF,QAAI,OAAO,UAAU,eAAe,KAAK,QAAQ,WAAW,GAAG;AAC7D,UAAI,OAAO,cAAc,MAAM;AAC7B,oBAAY,aAAa,IAAI,SAAS;AAAA,MAAA,WAC7B,OAAO,WAAW;AAC3B,cAAM,kBAAkB,MAAM,KAAK,SAAS,OAAO,SAAS;AAC5D,YAAI,gBAAiB,aAAY,aAAa,eAAe;AAAA,MAAA;AAAA,IAC/D;AAGF,QAAI,OAAO,iBAAiB;AAC1B,kBAAY,mBAAmB,OAAO,eAAe;AAAA,IAAA;AAGvD,QAAI,OAAO,UAAU,eAAe,KAAK,QAAQ,oBAAoB,GAAG;AACtE,UAAI,OAAO,uBAAuB,MAAM;AACtC,oBAAY,sBAAsB,UAAU,WAAW,OAAO,CAAC;AAAA,MAAA,WACtD,OAAO,oBAAoB;AACpC,oBAAY;AAAA,UACV,OAAO;AAAA,QAAA;AAAA,MACT;AAAA,IACF;AAGF,QAAI,OAAO,UAAU,eAAe,KAAK,QAAQ,kBAAkB,GAAG;AACpE,UACE,OAAO,oBACP,OAAO,iBAAiB,SAAS,KACjC,CAAC,KAAK,IAAI,OAAO,YACjB;AACA,aAAK,OAAO;AAAA,UACV;AAAA,QAAA;AAEF,aAAK,QAAQ,gGAAgG;AAAA,MAAA,WACpG,OAAO,kBAAkB;AAClC,YAAI,OAAO,iBAAiB,WAAW,GAAG;AACxC,sBAAY,iBAAiB,EAAE;AAAA,QAAA,OAC1B;AACL,cAAI;AACF,kBAAM,aAA0B,CAAA;AAChC,uBAAW,gBAAgB,OAAO,kBAAkB;AAClD,oBAAM,YAAY,MAAM,KAAK,IAAI,OAAO,WAAW;AAAA,gBACjD;AAAA,cAAA;AAEF,yBAAW,KAAK,SAAS;AAAA,YAAA;AAE3B,gBAAI,WAAW,SAAS,GAAG;AACzB,0BAAY,iBAAiB,UAAU;AAAA,YAAA,OAClC;AACL,mBAAK,QAAQ,yFAAyF;AAAA,YAAA;AAAA,UACxG,SACO,GAAY;AACnB,kBAAM,QAAQ;AACd,iBAAK,OAAO;AAAA,cACV,uDAAuD,MAAM,OAAO;AAAA,YAAA;AAEtE,iBAAK,QAAQ,0DAA0D,MAAM,OAAO,wBAAwB;AAAA,UAAA;AAAA,QAC9G;AAAA,MACF;AAAA,IACF;AAGF,SAAK,sBAAsB,WAAW;AACtC,WAAO;AAAA,EAAA;AAEX;"}