{"version":3,"file":"index40.js","sources":["../../src/langchain/tools/hts/create-fungible-token-tool.ts"],"sourcesContent":["import { z } from 'zod';\nimport { FTCreateParams } from '../../../types';\nimport { TokenSupplyType as SDKTokenSupplyType } from '@hashgraph/sdk';\nimport {\n  BaseHederaTransactionTool,\n  BaseHederaTransactionToolParams,\n} from '../common/base-hedera-transaction-tool';\nimport { BaseServiceBuilder } from '../../../builders';\nimport { HtsBuilder } from '../../../builders';\nimport { SERIALIZED_KEY_DESCRIPTION, FEE_COLLECTOR_DESCRIPTION } from './hts-tool-utils';\n\nconst FixedFeeInputSchema = z.object({\n  type: z.enum(['FIXED', 'FIXED_FEE']),\n  feeCollectorAccountId: z.string().optional().describe(FEE_COLLECTOR_DESCRIPTION),\n  denominatingTokenId: z\n    .string()\n    .optional()\n    .describe('Denominating token ID for the fee (if not HBAR).'),\n  amount: z\n    .union([z.number(), z.string()])\n    .describe('Fee amount (smallest unit for tokens, or tinybars for HBAR).'),\n});\n\nconst FractionalFeeInputSchema = z.object({\n  type: z.enum(['FRACTIONAL', 'FRACTIONAL_FEE']),\n  feeCollectorAccountId: z.string().optional().describe(FEE_COLLECTOR_DESCRIPTION),\n  numerator: z.number().int().describe('Numerator of the fractional fee.'),\n  denominator: z\n    .number()\n    .int()\n    .positive()\n    .describe('Denominator of the fractional fee.'),\n  minAmount: z\n    .union([z.number(), z.string()])\n    .optional()\n    .describe('Minimum fractional fee amount.'),\n  maxAmount: z\n    .union([z.number(), z.string()])\n    .optional()\n    .describe('Maximum fractional fee amount (0 for no max).'),\n  assessmentMethodInclusive: z\n    .boolean()\n    .optional()\n    .describe('Fee is assessed on net amount (false) or gross (true).'),\n});\n\nconst RoyaltyFeeInputSchema = z.object({\n  type: z.enum(['ROYALTY', 'ROYALTY_FEE']),\n  feeCollectorAccountId: z.string().optional().describe(FEE_COLLECTOR_DESCRIPTION),\n  numerator: z.number().int().describe('Numerator of the royalty fee.'),\n  denominator: z\n    .number()\n    .int()\n    .positive()\n    .describe('Denominator of the royalty fee.'),\n  fallbackFee: FixedFeeInputSchema.omit({ type: true })\n    .optional()\n    .describe('Fallback fixed fee if royalty is not applicable.'),\n});\n\nconst CustomFeeInputUnionSchema = z.discriminatedUnion('type', [\n  FixedFeeInputSchema,\n  FractionalFeeInputSchema,\n  RoyaltyFeeInputSchema,\n]);\n\nexport type CustomFeeInputData = z.infer<typeof CustomFeeInputUnionSchema>;\n\nconst FTCreateZodSchemaCore = z.object({\n  tokenName: z.string().describe('The publicly visible name of the token.'),\n  tokenSymbol: z\n    .string()\n    .optional()\n    .describe('The publicly visible symbol of the token.'),\n  treasuryAccountId: z\n    .string()\n    .optional()\n    .describe('Treasury account ID (e.g., \"0.0.xxxx\").'),\n  initialSupply: z\n    .union([z.number(), z.string()])\n    .describe('Initial supply in the smallest denomination.'),\n  decimals: z\n    .number()\n    .int()\n    .optional()\n    .default(0)\n    .describe(\n      'Number of decimal places for the token. Defaults to 0 if not specified.'\n    ),\n  adminKey: z\n    .string()\n    .optional()\n    .describe(\n      `Optional. Admin key (${SERIALIZED_KEY_DESCRIPTION}. Required for token to be mutable.`\n    ),\n  kycKey: z\n    .string()\n    .optional()\n    .describe(\n      `Optional. KYC key (${SERIALIZED_KEY_DESCRIPTION}`\n    ),\n  freezeKey: z\n    .string()\n    .optional()\n    .describe(\n      `Optional. Freeze key (${SERIALIZED_KEY_DESCRIPTION}`\n    ),\n  wipeKey: z\n    .string()\n    .optional()\n    .describe(\n      `Optional. Wipe key (${SERIALIZED_KEY_DESCRIPTION}`\n    ),\n  supplyKey: z\n    .string()\n    .optional()\n    .describe(\n      `Optional. Supply key (${SERIALIZED_KEY_DESCRIPTION}`\n    ),\n  feeScheduleKey: z\n    .string()\n    .optional()\n    .describe(\n      `Optional. Fee schedule key (${SERIALIZED_KEY_DESCRIPTION}`\n    ),\n  pauseKey: z\n    .string()\n    .optional()\n    .describe(\n      `Optional. Pause key (${SERIALIZED_KEY_DESCRIPTION}`\n    ),\n  autoRenewAccountId: z\n    .string()\n    .optional()\n    .describe('Optional. Auto-renew account ID (e.g., \"0.0.xxxx\").'),\n  autoRenewPeriod: z\n    .number()\n    .int()\n    .positive()\n    .optional()\n    .describe('Optional. Auto-renewal period in seconds.'),\n  memo: z.string().optional().describe('Optional. Memo for the token.'),\n  freezeDefault: z\n    .boolean()\n    .optional()\n    .describe('Optional. Default freeze status for accounts.'),\n  customFees: z\n    .array(CustomFeeInputUnionSchema)\n    .optional()\n    .describe('Optional. Array of custom fee objects for the token.'),\n  supplyType: z\n    .enum([\n      SDKTokenSupplyType.Finite.toString(),\n      SDKTokenSupplyType.Infinite.toString(),\n    ])\n    .optional()\n    .default(SDKTokenSupplyType.Finite.toString())\n    .describe(\n      'Supply type: FINITE or INFINITE. Defaults to FINITE if not specified.'\n    ),\n  maxSupply: z\n    .union([z.number(), z.string()])\n    .optional()\n    .default(1000000000000000)\n    .describe(\n      'Max supply if supplyType is FINITE. Builder validates against initialSupply.'\n    ),\n});\n\nexport class HederaCreateFungibleTokenTool extends BaseHederaTransactionTool<\n  typeof FTCreateZodSchemaCore\n> {\n  name = 'hedera-hts-create-fungible-token';\n  description =\n    'Creates a new Hedera Fungible Token (FT). Builder handles key parsing, fee construction, and supply validation.';\n  specificInputSchema = FTCreateZodSchemaCore;\n  namespace = 'hts';\n\n  constructor(params: BaseHederaTransactionToolParams) {\n    super(params);\n  }\n\n  protected getServiceBuilder(): BaseServiceBuilder {\n    return this.hederaKit.hts();\n  }\n\n  protected async callBuilderMethod(\n    builder: BaseServiceBuilder,\n    specificArgs: z.infer<typeof FTCreateZodSchemaCore>\n  ): Promise<void> {\n    await (builder as HtsBuilder).createFungibleToken(\n      specificArgs as unknown as FTCreateParams\n    );\n  }\n\n  protected override getNoteForKey(\n    key: string,\n    schemaDefaultValue: unknown,\n    actualValue: unknown\n  ): string | undefined {\n    if (key === 'decimals') {\n      return `The number of decimal places for your token was automatically set to '${actualValue}'.`;\n    }\n    if (key === 'supplyType') {\n      return `Your token's supply type was set to '${actualValue}' by default.`;\n    }\n    if (key === 'maxSupply') {\n      try {\n        const num = BigInt(String(actualValue));\n        return `A maximum supply of '${num.toLocaleString()}' for the token was set by default.`;\n      } catch {\n        return `The maximum supply for the token was set to '${actualValue}' by default.`;\n      }\n    }\n    if (key === 'freezeDefault') {\n      return `By default, accounts holding this token will ${\n        actualValue ? 'be frozen' : 'not be frozen'\n      }.`;\n    }\n    return undefined;\n  }\n}\n"],"names":["SDKTokenSupplyType"],"mappings":"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"}