{"version":3,"file":"index2.js","sources":["../../src/agent/agent.ts"],"sourcesContent":["import {\n  AccountId,\n  Client,\n  PublicKey,\n  TransactionId,\n  TransactionReceipt,\n  ScheduleSignTransaction,\n  ScheduleId,\n} from '@hashgraph/sdk';\nimport { AbstractSigner } from '../signer/abstract-signer';\nimport {\n  SignScheduledTransactionParams,\n  AgentOperationalMode,\n  HederaNetworkType,\n  MirrorNodeConfig,\n} from '../types';\nimport type { IPlugin, GenericPluginContext, HederaTool } from '../plugins';\nimport { HcsBuilder } from '../builders/hcs/hcs-builder';\nimport { HtsBuilder } from '../builders/hts/hts-builder';\nimport { AccountBuilder } from '../builders/account/account-builder';\nimport { ScsBuilder } from '../builders/scs/scs-builder';\nimport { QueryBuilder } from '../builders/query/query-builder';\nimport { ExecuteResult } from '../builders/base-service-builder';\nimport { ModelCapability } from '../types/model-capability';\nimport { HederaMirrorNode } from '../services/mirror-node';\nimport { Logger } from '../utils/logger';\n\nexport interface PluginConfig {\n  plugins?: IPlugin[];\n  appConfig?: Record<string, unknown> | undefined;\n}\nconst NOT_INITIALIZED_ERROR =\n  'HederaAgentKit not initialized. Call await kit.initialize() first.';\n\n/**\n * HederaAgentKit provides a simplified interface for interacting with the Hedera network,\n * abstracting away the complexities of the underlying SDK for common use cases.\n * It supports various operations related to HCS, HTS, and HBAR transfers through a Signer and Builders.\n * The kit must be initialized using the async `initialize()` method before its tools can be accessed.\n */\nexport class HederaAgentKit {\n  public readonly client: Client;\n  public readonly network: HederaNetworkType;\n  public readonly signer: AbstractSigner;\n  public readonly mirrorNode: HederaMirrorNode;\n  private loadedPlugins: IPlugin[];\n  private aggregatedTools: HederaTool[];\n  private pluginConfigInternal?: PluginConfig | undefined;\n  private isInitialized: boolean = false;\n  public readonly logger: Logger;\n  public operationalMode: AgentOperationalMode;\n  public userAccountId?: string | undefined;\n  public scheduleUserTransactionsInBytesMode: boolean;\n  public modelCapability: ModelCapability;\n  public modelName?: string | undefined;\n\n  constructor(\n    signer: AbstractSigner,\n    pluginConfigInput?: PluginConfig | undefined,\n    initialOperationalMode: AgentOperationalMode = 'returnBytes',\n    userAccountId?: string,\n    scheduleUserTransactionsInBytesMode: boolean = true,\n    modelCapability: ModelCapability = ModelCapability.MEDIUM,\n    modelName?: string,\n    mirrorNodeConfig?: MirrorNodeConfig,\n    disableLogging: boolean = false\n  ) {\n    this.signer = signer;\n    this.network = this.signer.getNetwork();\n\n    const shouldDisableLogs =\n      disableLogging || process.env.DISABLE_LOGS === 'true';\n\n    this.logger = new Logger({\n      level: shouldDisableLogs ? 'silent' : 'info',\n      module: 'HederaAgentKit',\n      silent: shouldDisableLogs,\n    });\n\n    if (this.network === 'mainnet') {\n      this.client = Client.forMainnet();\n    } else if (this.network === 'testnet') {\n      this.client = Client.forTestnet();\n    } else {\n      throw new Error(`Unsupported network type: ${this.network}`);\n    }\n    this.client.setOperator(\n      this.signer.getAccountId(),\n      this.signer.getOperatorPrivateKey()\n    );\n\n    this.mirrorNode = new HederaMirrorNode(\n      this.network,\n      new Logger({\n        level: shouldDisableLogs ? 'silent' : 'info',\n        module: 'HederaAgentKit-MirrorNode',\n        silent: shouldDisableLogs,\n      }),\n      mirrorNodeConfig\n    );\n\n    this.pluginConfigInternal = pluginConfigInput;\n    this.loadedPlugins = [];\n    this.aggregatedTools = [];\n    this.operationalMode = initialOperationalMode;\n    this.userAccountId = userAccountId;\n    this.scheduleUserTransactionsInBytesMode =\n      scheduleUserTransactionsInBytesMode;\n    this.modelCapability = modelCapability;\n    this.modelName = modelName;\n  }\n\n  /**\n   * Initializes the HederaAgentKit, including loading any configured plugins and aggregating tools.\n   * This method must be called before `getAggregatedLangChainTools()` can be used.\n   */\n  public async initialize(): Promise<void> {\n    if (this.isInitialized) {\n      this.logger.warn('HederaAgentKit is already initialized.');\n      return;\n    }\n\n    this.loadedPlugins = [];\n\n    const contextForPlugins: GenericPluginContext = {\n      logger: this.logger,\n      config: {\n        ...(this.pluginConfigInternal?.appConfig || {}),\n        hederaKit: this,\n        modelCapability: this.modelCapability,\n      },\n      client: {\n        getNetwork: () => this.network,\n      },\n    };\n\n    // Ensure unique plugins by id\n    const uniquePlugins: IPlugin[] = [];\n    const seenIds = new Set<string>();\n    if (this.pluginConfigInternal?.plugins) {\n      for (const pluginInstance of this.pluginConfigInternal.plugins) {\n        if (!seenIds.has(pluginInstance.id)) {\n          uniquePlugins.push(pluginInstance);\n          seenIds.add(pluginInstance.id);\n        }\n      }\n    }\n\n    for (const pluginInstance of uniquePlugins) {\n      try {\n        this.logger.info(\n          `Initializing plugin: ${pluginInstance.name}`\n        );\n        await pluginInstance.initialize(contextForPlugins);\n        this.loadedPlugins.push(pluginInstance);\n        this.logger.info(\n          `Successfully initialized and added plugin: ${pluginInstance.name}`\n        );\n      } catch (error: unknown) {\n        this.logger.error(\n          `Failed to initialize plugin ${pluginInstance.name}: ${error instanceof Error ? error.message : String(error)}`\n        );\n      }\n    }\n\n    // Aggregate tools only from plugins\n    const pluginTools: HederaTool[] = this.loadedPlugins.flatMap((plugin) => {\n      return plugin.getTools();\n    });\n    this.aggregatedTools = [...pluginTools];\n\n    this.isInitialized = true;\n    this.logger.info(\n      'HederaAgentKit initialized successfully with all tools aggregated.'\n    );\n  }\n\n  public async getOperator(): Promise<{ id: AccountId; publicKey: PublicKey }> {\n    return {\n      id: this.signer.getAccountId(),\n      publicKey: await this.signer.getPublicKey(),\n    };\n  }\n\n  /**\n   * Retrieves the aggregated list of LangChain tools from the kit, core tools, and plugins.\n   * The HederaAgentKit instance must be initialized via `await kit.initialize()` before calling this method.\n   * @returns {Tool[]} An array of LangChain Tool objects.\n   * @throws {Error} If the kit has not been initialized.\n   */\n  public getAggregatedLangChainTools(): HederaTool[] {\n    if (!this.isInitialized) {\n      throw new Error(\n        'HederaAgentKit not initialized. Call await kit.initialize() before accessing tools.'\n      );\n    }\n    return this.aggregatedTools;\n  }\n\n  /**\n   * Provides access to the Hedera Consensus Service (HCS) builder.\n   * @returns {HcsBuilder} An instance of HcsBuilder.\n   * @throws {Error} If HederaAgentKit has not been initialized via `await initialize()`.\n   */\n  public hcs(): HcsBuilder {\n    if (!this.isInitialized) {\n      throw new Error(NOT_INITIALIZED_ERROR);\n    }\n    return new HcsBuilder(this);\n  }\n\n  /**\n   * Provides access to the Hedera Token Service (HTS) builder.\n   * @returns {HtsBuilder} An instance of HtsBuilder.\n   * @throws {Error} If HederaAgentKit has not been initialized via `await initialize()`.\n   */\n  public hts(): HtsBuilder {\n    if (!this.isInitialized) {\n      throw new Error(NOT_INITIALIZED_ERROR);\n    }\n    return new HtsBuilder(this);\n  }\n\n  /**\n   * Provides access to the Hedera Account Service builder.\n   * @returns {AccountBuilder} An instance of AccountBuilder.\n   * @throws {Error} If HederaAgentKit has not been initialized via `await initialize()`.\n   */\n  public accounts(): AccountBuilder {\n    if (!this.isInitialized) {\n      throw new Error(NOT_INITIALIZED_ERROR);\n    }\n    return new AccountBuilder(this);\n  }\n\n  /**\n   * Provides access to the Hedera Smart Contract Service (SCS) builder.\n   * @returns {ScsBuilder} An instance of ScsBuilder.\n   * @throws {Error} If HederaAgentKit has not been initialized via `await initialize()`.\n   */\n  public scs(): ScsBuilder {\n    if (!this.isInitialized) {\n      throw new Error(NOT_INITIALIZED_ERROR);\n    }\n    return new ScsBuilder(this);\n  }\n\n  /**\n   * Provides access to the Hedera Query builder for read-only operations.\n   * @returns {QueryBuilder} An instance of QueryBuilder.\n   * @throws {Error} If HederaAgentKit has not been initialized via `await initialize()`.\n   */\n  public query(): QueryBuilder {\n    if (!this.isInitialized) {\n      throw new Error(NOT_INITIALIZED_ERROR);\n    }\n    return new QueryBuilder(this);\n  }\n  /**\n   * Retrieves the transaction receipt for a given transaction ID string.\n   * @param {string} transactionIdString - The transaction ID (e.g., \"0.0.xxxx@16666666.77777777\").\n   * @returns {Promise<TransactionReceipt>} A promise that resolves to the TransactionReceipt.\n   * @throws {Error} If the transaction ID is invalid or receipt cannot be fetched.\n   */\n  public async getTransactionReceipt(\n    transactionIdInput: TransactionId | string\n  ): Promise<TransactionReceipt> {\n    const transactionId =\n      typeof transactionIdInput === 'string'\n        ? TransactionId.fromString(transactionIdInput)\n        : transactionIdInput;\n    try {\n      return await transactionId.getReceipt(this.client);\n    } catch (error: unknown) {\n      this.logger.error(\n        `Failed to get transaction receipt for ${transactionId.toString()}: ${\n          error instanceof Error ? error.message : String(error)\n        }`\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Signs a scheduled transaction.\n   * The transaction is signed by the operator configured in the current signer.\n   * @param {SignScheduledTransactionParams} params - Parameters for the ScheduleSign transaction.\n   * @returns {Promise<ExecuteResult>} A promise that resolves to an object indicating success, receipt, and transactionId.\n   * @throws {Error} If the execution fails.\n   */\n  public async signScheduledTransaction(\n    params: SignScheduledTransactionParams\n  ): Promise<ExecuteResult> {\n    if (!this.isInitialized) {\n      throw new Error(\n        'HederaAgentKit not initialized. Call await kit.initialize() first.'\n      );\n    }\n    this.logger.info(\n      `Attempting to sign scheduled transaction: ${params.scheduleId.toString()}`\n    );\n\n    const scheduleId =\n      typeof params.scheduleId === 'string'\n        ? ScheduleId.fromString(params.scheduleId)\n        : params.scheduleId;\n\n    const transaction = new ScheduleSignTransaction().setScheduleId(scheduleId);\n\n    if (params.memo) {\n      transaction.setTransactionMemo(params.memo);\n    }\n\n    let transactionIdToReport: string | undefined;\n    if (!transaction.transactionId) {\n      transaction.freezeWith(this.client);\n    }\n    transactionIdToReport = transaction.transactionId?.toString();\n\n    try {\n      const receipt = await this.signer.signAndExecuteTransaction(transaction);\n\n      return {\n        success: true,\n        receipt: receipt,\n        transactionId: transactionIdToReport,\n      };\n    } catch (error: unknown) {\n      this.logger.error(\n        `Failed to sign scheduled transaction ${params.scheduleId.toString()}: ${\n          error instanceof Error ? error.message : String(error)\n        }`\n      );\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : String(error),\n        transactionId: transactionIdToReport,\n      };\n    }\n  }\n}\n\nexport default HederaAgentKit;\n"],"names":[],"mappings":"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"}