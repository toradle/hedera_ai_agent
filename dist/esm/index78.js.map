{"version":3,"file":"index78.js","sources":["../../src/utils/model-capability-detector.ts"],"sourcesContent":["import { ModelCapability } from '../types/model-capability';\n\n/**\n * Model capability configuration for different AI models\n */\ninterface ModelConfig {\n  capability: ModelCapability;\n  contextWindow: number;\n  description: string;\n}\n\n/**\n * OpenRouter API model response structure\n */\ninterface OpenRouterModel {\n  id: string;\n  name: string;\n  description: string;\n  context_length: number;\n  pricing: {\n    prompt: string;\n    completion: string;\n  };\n}\n\n/**\n * Static fallback registry for essential models (used when API is unavailable)\n */\nconst FALLBACK_MODEL_REGISTRY: Record<string, ModelConfig> = {\n  'gpt-3.5-turbo': {\n    capability: ModelCapability.SMALL,\n    contextWindow: 16385,\n    description: 'OpenAI GPT-3.5 Turbo',\n  },\n  'gpt-4': {\n    capability: ModelCapability.LARGE,\n    contextWindow: 8192,\n    description: 'OpenAI GPT-4',\n  },\n  'gpt-4-turbo': {\n    capability: ModelCapability.MEDIUM,\n    contextWindow: 128000,\n    description: 'OpenAI GPT-4 Turbo',\n  },\n  'gpt-4o': {\n    capability: ModelCapability.MEDIUM,\n    contextWindow: 128000,\n    description: 'OpenAI GPT-4o',\n  },\n  'gpt-4o-mini': {\n    capability: ModelCapability.SMALL,\n    contextWindow: 128000,\n    description: 'OpenAI GPT-4o Mini',\n  },\n  'o1-preview': {\n    capability: ModelCapability.LARGE,\n    contextWindow: 128000,\n    description: 'OpenAI o1 Preview',\n  },\n  'o1-mini': {\n    capability: ModelCapability.MEDIUM,\n    contextWindow: 128000,\n    description: 'OpenAI o1 Mini',\n  },\n  'o3-mini': {\n    capability: ModelCapability.MEDIUM,\n    contextWindow: 128000,\n    description: 'OpenAI o3 Mini',\n  },\n  'claude-3.5-sonnet': {\n    capability: ModelCapability.LARGE,\n    contextWindow: 200000,\n    description: 'Anthropic Claude 3.5 Sonnet',\n  },\n  'claude-4': {\n    capability: ModelCapability.LARGE,\n    contextWindow: 200000,\n    description: 'Anthropic Claude 4',\n  },\n  'gemini-1.5-pro': {\n    capability: ModelCapability.LARGE,\n    contextWindow: 2000000,\n    description: 'Google Gemini 1.5 Pro',\n  },\n};\n\n/**\n * Model capability detector that provides scalable model capability inference\n * Fetches comprehensive model data from OpenRouter API and caches it\n */\nexport class ModelCapabilityDetector {\n  private static instance: ModelCapabilityDetector;\n  private registry: Record<string, ModelConfig>;\n  private lastFetchTime: number = 0;\n  private readonly CACHE_DURATION = 24 * 60 * 60 * 1000;\n  private readonly OPENROUTER_API_URL = 'https://openrouter.ai/api/v1/models';\n\n  private constructor() {\n    this.registry = { ...FALLBACK_MODEL_REGISTRY };\n  }\n\n  /**\n   * Get singleton instance\n   */\n  public static getInstance(): ModelCapabilityDetector {\n    if (!ModelCapabilityDetector.instance) {\n      ModelCapabilityDetector.instance = new ModelCapabilityDetector();\n    }\n    return ModelCapabilityDetector.instance;\n  }\n\n  /**\n   * Determine model capability based on context window and model characteristics\n   */\n  private determineCapability(model: OpenRouterModel): ModelCapability {\n    const modelId = model.id.toLowerCase();\n    const contextLength = model.context_length;\n\n    if (\n      modelId.includes('mini') ||\n      modelId.includes('tiny') ||\n      modelId.includes('light') ||\n      modelId.includes('instant') ||\n      modelId.includes('3.5-turbo')\n    ) {\n      return ModelCapability.SMALL;\n    }\n\n    if (\n      modelId.includes('local') ||\n      modelId.includes('llama') ||\n      modelId.includes('mistral') ||\n      modelId.includes('yi-') ||\n      modelId.includes('qwen') ||\n      modelId.includes('deepseek') ||\n      modelId.includes('phi-') ||\n      modelId.includes('mythomax') ||\n      modelId.includes('valkyrie')\n    ) {\n      return ModelCapability.UNLIMITED;\n    }\n    if (contextLength <= 16000) {\n      return ModelCapability.SMALL;\n    } else if (contextLength <= 50000) {\n      return ModelCapability.MEDIUM;\n    } else {\n      return ModelCapability.LARGE;\n    }\n  }\n\n  /**\n   * Fetch models from OpenRouter API\n   */\n  private async fetchModelsFromAPI(): Promise<void> {\n    try {\n      const response = await fetch(this.OPENROUTER_API_URL, {\n        headers: {\n          Accept: 'application/json',\n          'User-Agent': 'hedera-agent-kit/1.0',\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      const models: OpenRouterModel[] = data.data || [];\n\n      this.registry = { ...FALLBACK_MODEL_REGISTRY };\n\n      for (const model of models) {\n        const config: ModelConfig = {\n          capability: this.determineCapability(model),\n          contextWindow: model.context_length,\n          description: model.name,\n        };\n\n        this.registry[model.id] = config;\n\n        const simplifiedId = this.getSimplifiedModelId(model.id);\n        if (simplifiedId !== model.id) {\n          this.registry[simplifiedId] = config;\n        }\n      }\n\n      this.lastFetchTime = Date.now();\n      console.log(\n        `ModelCapabilityDetector: Loaded ${models.length} models from OpenRouter API`\n      );\n    } catch (error) {\n      console.warn(\n        `ModelCapabilityDetector: Failed to fetch from API, using fallback registry:`,\n        error\n      );\n    }\n  }\n\n  /**\n   * Get simplified model ID for common patterns\n   */\n  private getSimplifiedModelId(fullId: string): string {\n    if (fullId.startsWith('openai/')) {\n      return fullId.replace('openai/', '');\n    }\n    if (fullId.startsWith('anthropic/')) {\n      return fullId.replace('anthropic/', '');\n    }\n    if (fullId.startsWith('google/')) {\n      return fullId.replace('google/', '');\n    }\n    if (fullId.startsWith('mistralai/')) {\n      return fullId.replace('mistralai/', '');\n    }\n    if (fullId.startsWith('meta-llama/')) {\n      return fullId.replace('meta-llama/', '');\n    }\n\n    return fullId;\n  }\n\n  /**\n   * Ensure models are loaded and up-to-date\n   */\n  private async ensureModelsLoaded(): Promise<void> {\n    const now = Date.now();\n    const shouldRefresh = now - this.lastFetchTime > this.CACHE_DURATION;\n\n    if (shouldRefresh) {\n      await this.fetchModelsFromAPI();\n    }\n  }\n\n  /**\n   * Register a new model configuration\n   */\n  public registerModel(modelName: string, config: ModelConfig): void {\n    this.registry[modelName] = config;\n  }\n\n  /**\n   * Register multiple models at once\n   */\n  public registerModels(models: Record<string, ModelConfig>): void {\n    Object.assign(this.registry, models);\n  }\n\n  /**\n   * Get model capability for a given model name\n   */\n  public async getModelCapability(\n    modelName?: string\n  ): Promise<ModelCapability> {\n    if (!modelName) {\n      return ModelCapability.MEDIUM;\n    }\n\n    await this.ensureModelsLoaded();\n\n    const exactMatch = this.registry[modelName];\n    if (exactMatch) {\n      return exactMatch.capability;\n    }\n\n    const normalizedName = modelName.toLowerCase();\n\n    for (const [registeredName, config] of Object.entries(this.registry)) {\n      if (\n        normalizedName.includes(registeredName.toLowerCase()) ||\n        registeredName.toLowerCase().includes(normalizedName)\n      ) {\n        return config.capability;\n      }\n    }\n\n    return this.getCapabilityFromHeuristics(normalizedName);\n  }\n\n  /**\n   * Synchronous version that uses cached data only\n   */\n  public getModelCapabilitySync(modelName?: string): ModelCapability {\n    if (!modelName) {\n      return ModelCapability.MEDIUM;\n    }\n\n    const exactMatch = this.registry[modelName];\n    if (exactMatch) {\n      return exactMatch.capability;\n    }\n\n    const normalizedName = modelName.toLowerCase();\n\n    for (const [registeredName, config] of Object.entries(this.registry)) {\n      if (\n        normalizedName.includes(registeredName.toLowerCase()) ||\n        registeredName.toLowerCase().includes(normalizedName)\n      ) {\n        return config.capability;\n      }\n    }\n\n    return this.getCapabilityFromHeuristics(normalizedName);\n  }\n\n  /**\n   * Fallback heuristics for unknown models\n   */\n  private getCapabilityFromHeuristics(normalizedName: string): ModelCapability {\n    if (\n      normalizedName.includes('mini') ||\n      normalizedName.includes('3.5') ||\n      normalizedName.includes('tiny') ||\n      normalizedName.includes('light') ||\n      normalizedName.includes('instant')\n    ) {\n      return ModelCapability.SMALL;\n    }\n\n    if (\n      normalizedName.includes('turbo') ||\n      normalizedName.includes('4o') ||\n      normalizedName.includes('flash') ||\n      normalizedName.includes('small') ||\n      normalizedName.includes('medium') ||\n      normalizedName.includes('haiku') ||\n      normalizedName.includes('bison') ||\n      normalizedName.includes('palm')\n    ) {\n      return ModelCapability.MEDIUM;\n    }\n\n    if (\n      normalizedName.includes('claude') ||\n      normalizedName.includes('gpt-4') ||\n      normalizedName.includes('gemini') ||\n      normalizedName.includes('sonnet') ||\n      normalizedName.includes('opus') ||\n      normalizedName.includes('large') ||\n      normalizedName.includes('ultra') ||\n      normalizedName.includes('mixtral') ||\n      normalizedName.includes('command-r') ||\n      normalizedName.includes('o1') ||\n      normalizedName.includes('o3')\n    ) {\n      return ModelCapability.LARGE;\n    }\n\n    if (\n      normalizedName.includes('local') ||\n      normalizedName.includes('ollama') ||\n      normalizedName.includes('llama') ||\n      normalizedName.includes('mistral') ||\n      normalizedName.includes('yi-') ||\n      normalizedName.includes('qwen') ||\n      normalizedName.includes('deepseek') ||\n      normalizedName.includes('phi-')\n    ) {\n      return ModelCapability.UNLIMITED;\n    }\n\n    return ModelCapability.MEDIUM;\n  }\n\n  /**\n   * Get model configuration for a given model name\n   */\n  public async getModelConfig(\n    modelName: string\n  ): Promise<ModelConfig | undefined> {\n    await this.ensureModelsLoaded();\n    return this.registry[modelName];\n  }\n\n  /**\n   * Get context window size for a given model name\n   */\n  public async getContextWindow(modelName?: string): Promise<number> {\n    if (!modelName) {\n      return 16385;\n    }\n\n    await this.ensureModelsLoaded();\n\n    const exactMatch = this.registry[modelName];\n    if (exactMatch) {\n      return exactMatch.contextWindow;\n    }\n\n    const normalizedName = modelName.toLowerCase();\n\n    for (const [registeredName, config] of Object.entries(this.registry)) {\n      if (\n        normalizedName.includes(registeredName.toLowerCase()) ||\n        registeredName.toLowerCase().includes(normalizedName)\n      ) {\n        return config.contextWindow;\n      }\n    }\n\n    return 16385;\n  }\n\n  /**\n   * Synchronous version that uses cached data only for context window\n   */\n  public getContextWindowSync(modelName?: string): number {\n    if (!modelName) {\n      return 16385;\n    }\n\n    const exactMatch = this.registry[modelName];\n    if (exactMatch) {\n      return exactMatch.contextWindow;\n    }\n\n    const normalizedName = modelName.toLowerCase();\n\n    for (const [registeredName, config] of Object.entries(this.registry)) {\n      if (\n        normalizedName.includes(registeredName.toLowerCase()) ||\n        registeredName.toLowerCase().includes(normalizedName)\n      ) {\n        return config.contextWindow;\n      }\n    }\n\n    return 16385;\n  }\n\n  /**\n   * Get all registered models\n   */\n  public async getAllModels(): Promise<Record<string, ModelConfig>> {\n    await this.ensureModelsLoaded();\n    return { ...this.registry };\n  }\n\n  /**\n   * Check if a model is registered\n   */\n  public async isModelRegistered(modelName: string): Promise<boolean> {\n    await this.ensureModelsLoaded();\n    return modelName in this.registry;\n  }\n\n  /**\n   * Get models by capability\n   */\n  public async getModelsByCapability(\n    capability: ModelCapability\n  ): Promise<string[]> {\n    await this.ensureModelsLoaded();\n    return Object.entries(this.registry)\n      .filter(([, config]) => config.capability === capability)\n      .map(([name]) => name);\n  }\n\n  /**\n   * Force refresh models from API\n   */\n  public async refreshModels(): Promise<void> {\n    this.lastFetchTime = 0;\n    await this.fetchModelsFromAPI();\n  }\n\n  /**\n   * Get cache status\n   */\n  public getCacheStatus(): {\n    lastFetch: Date;\n    isStale: boolean;\n    modelCount: number;\n  } {\n    const now = Date.now();\n    const isStale = now - this.lastFetchTime > this.CACHE_DURATION;\n\n    return {\n      lastFetch: new Date(this.lastFetchTime),\n      isStale,\n      modelCount: Object.keys(this.registry).length,\n    };\n  }\n}\n"],"names":[],"mappings":"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"}