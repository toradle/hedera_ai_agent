{"version":3,"file":"index7.js","sources":["../../src/langchain/tools/account/create-account-tool.ts"],"sourcesContent":["import { z } from 'zod';\nimport { CreateAccountParams } from '../../../types';\nimport {\n  BaseHederaTransactionTool,\n  BaseHederaTransactionToolParams,\n} from '../common/base-hedera-transaction-tool';\nimport { BaseServiceBuilder } from '../../../builders/base-service-builder';\nimport { AccountBuilder } from '../../../builders/account/account-builder';\n\nconst CreateAccountZodSchemaCore = z.object({\n  key: z\n    .string()\n    .optional()\n    .describe(\n      'Optional. Public key string (hex) or private key string for the new account. Used if alias is not set. Builder validates presence of key or alias.'\n    ),\n  alias: z\n    .string()\n    .optional()\n    .describe(\n      'Optional. Account alias (e.g., EVM address or serialized PublicKey string). Takes precedence over key. Builder validates presence of key or alias.'\n    ),\n  initialBalance: z\n    .union([z.number(), z.string()])\n    .optional()\n    .describe(\n      'Optional. Initial balance in HBAR. Builder handles conversion. Defaults to 0.'\n    ),\n  memo: z.string().optional().describe('Optional. Memo for the account.'),\n  autoRenewAccountId: z\n    .string()\n    .optional()\n    .describe(\n      'Optional. Account ID for auto-renewal payments (e.g., \"0.0.xxxx\").'\n    ),\n  autoRenewPeriod: z\n    .number()\n    .int()\n    .positive()\n    .optional()\n    .describe(\n      'Optional. Auto-renewal period in seconds (e.g., 7776000 for 90 days).'\n    ),\n  receiverSignatureRequired: z\n    .boolean()\n    .optional()\n    .describe('Optional. If true, account must sign transfers out of it.'),\n  maxAutomaticTokenAssociations: z\n    .number()\n    .int()\n    .optional()\n    .describe('Optional. Max automatic token associations for the account.'),\n  stakedAccountId: z\n    .string()\n    .optional()\n    .describe('Optional. Account ID to stake to (e.g., \"0.0.zzzz\").'),\n  stakedNodeId: z\n    .number()\n    .int()\n    .optional()\n    .describe(\n      'Optional. Node ID to stake to. Builder handles Long conversion.'\n    ),\n  declineStakingReward: z\n    .boolean()\n    .optional()\n    .describe('Optional. If true, decline staking rewards.'),\n});\n\nexport class HederaCreateAccountTool extends BaseHederaTransactionTool<\n  typeof CreateAccountZodSchemaCore\n> {\n  name = 'hedera-account-create';\n  description =\n    'Creates a new Hedera account. Requires key or alias (builder validates). Builder handles parsing and defaults.';\n  specificInputSchema = CreateAccountZodSchemaCore;\n  namespace = 'account';\n\n  constructor(params: BaseHederaTransactionToolParams) {\n    super(params);\n  }\n\n  protected getServiceBuilder(): BaseServiceBuilder {\n    return this.hederaKit.accounts();\n  }\n\n  protected async callBuilderMethod(\n    builder: BaseServiceBuilder,\n    specificArgs: z.infer<typeof CreateAccountZodSchemaCore>\n  ): Promise<void> {\n    await (builder as AccountBuilder).createAccount(\n      specificArgs as unknown as CreateAccountParams\n    );\n  }\n}\n"],"names":[],"mappings":";;AASA,MAAM,6BAA6B,EAAE,OAAO;AAAA,EAC1C,KAAK,EACF,SACA,WACA;AAAA,IACC;AAAA,EAAA;AAAA,EAEJ,OAAO,EACJ,SACA,WACA;AAAA,IACC;AAAA,EAAA;AAAA,EAEJ,gBAAgB,EACb,MAAM,CAAC,EAAE,OAAA,GAAU,EAAE,OAAA,CAAQ,CAAC,EAC9B,WACA;AAAA,IACC;AAAA,EAAA;AAAA,EAEJ,MAAM,EAAE,OAAA,EAAS,SAAA,EAAW,SAAS,iCAAiC;AAAA,EACtE,oBAAoB,EACjB,SACA,WACA;AAAA,IACC;AAAA,EAAA;AAAA,EAEJ,iBAAiB,EACd,SACA,MACA,SAAA,EACA,SAAA,EACA;AAAA,IACC;AAAA,EAAA;AAAA,EAEJ,2BAA2B,EACxB,QAAA,EACA,SAAA,EACA,SAAS,2DAA2D;AAAA,EACvE,+BAA+B,EAC5B,SACA,MACA,SAAA,EACA,SAAS,6DAA6D;AAAA,EACzE,iBAAiB,EACd,OAAA,EACA,SAAA,EACA,SAAS,sDAAsD;AAAA,EAClE,cAAc,EACX,OAAA,EACA,IAAA,EACA,WACA;AAAA,IACC;AAAA,EAAA;AAAA,EAEJ,sBAAsB,EACnB,QAAA,EACA,SAAA,EACA,SAAS,6CAA6C;AAC3D,CAAC;AAEM,MAAM,gCAAgC,0BAE3C;AAAA,EAOA,YAAY,QAAyC;AACnD,UAAM,MAAM;AAPd,SAAA,OAAO;AACP,SAAA,cACE;AACF,SAAA,sBAAsB;AACtB,SAAA,YAAY;AAAA,EAAA;AAAA,EAMF,oBAAwC;AAChD,WAAO,KAAK,UAAU,SAAA;AAAA,EAAS;AAAA,EAGjC,MAAgB,kBACd,SACA,cACe;AACf,UAAO,QAA2B;AAAA,MAChC;AAAA,IAAA;AAAA,EACF;AAEJ;"}