{"version":3,"file":"index4.js","sources":["../../src/signer/abstract-signer.ts"],"sourcesContent":["import {\n  AccountId,\n  PublicKey,\n  Transaction,\n  TransactionReceipt,\n  PrivateKey,\n  Client,\n} from '@hashgraph/sdk';\nimport { HederaMirrorNode } from '../services/mirror-node';\nimport { HederaNetworkType } from '../types';\nimport { Logger } from '../utils/logger';\n\n/**\n * AbstractSigner provides a common interface and shared functionality for different signing mechanisms.\n * Concrete implementations will handle specifics for server-side, browser (WalletConnect), etc.\n */\nexport abstract class AbstractSigner {\n  public mirrorNode!: HederaMirrorNode;\n\n  /**\n   * Retrieves the Hedera account ID associated with this signer.\n   * This must be implemented by concrete classes.\n   * @returns {AccountId} The Hedera AccountId object.\n   */\n  public abstract getAccountId(): AccountId;\n\n  /**\n   * Retrieves the public key associated with this signer's account using the Hedera Mirror Node.\n   * This method relies on the `mirrorNode` property being initialized by the concrete signer.\n   * @returns {Promise<PublicKey>} A promise that resolves to the Hedera PublicKey object.\n   * @throws {Error} If the public key cannot be retrieved from the mirror node or if mirrorNode is not initialized.\n   */\n  public async getPublicKey(): Promise<PublicKey> {\n    if (!this.mirrorNode) {\n      throw new Error(\n        'AbstractSigner: HederaMirrorNode has not been initialized by the concrete signer implementation. This is an internal error.'\n      );\n    }\n    const accountIdToQuery = this.getAccountId();\n    try {\n      return await this.mirrorNode.getPublicKey(accountIdToQuery.toString());\n    } catch (error) {\n      const errorMessage =\n        error instanceof Error ? error.message : String(error);\n      throw new Error(\n        `Failed to retrieve public key from mirror node for account ${accountIdToQuery.toString()}: ${errorMessage}`\n      );\n    }\n  }\n\n  /**\n   * Signs and executes a Hedera transaction, returning its receipt.\n   * Concrete implementations will manage their own client interactions for this process.\n   * @param {Transaction} transaction - The transaction to sign and execute.\n   * @returns {Promise<TransactionReceipt>} A promise that resolves to the transaction receipt.\n   */\n  public abstract signAndExecuteTransaction(\n    transaction: Transaction\n  ): Promise<TransactionReceipt>;\n\n  /**\n   * Retrieves the Hedera network type this signer is configured for.\n   * This must be implemented by concrete classes.\n   * @returns {HederaNetworkType} The configured Hedera network type ('mainnet' or 'testnet').\n   */\n  public abstract getNetwork(): HederaNetworkType;\n\n  /**\n   * Retrieves the operator's private key.\n   * This is needed by HederaAgentKit to set the operator on its internal client.\n   * Concrete implementations must provide this.\n   * @returns {PrivateKey} The operator's private key.\n   */\n  public abstract getOperatorPrivateKey(): PrivateKey;\n\n  /**\n   * Retrieves the client instance configured for this signer.\n   * This is needed for operations like freezing transactions with the correct payer.\n   * @returns {Client} The Hedera Client object.\n   */\n  public abstract getClient(): Client;\n\n  /**\n   * Initializes the HederaMirrorNode instance for the signer.\n   * Concrete classes must call this in their constructor.\n   * @param {HederaNetworkType} network - The network for the mirror node.\n   * @param {string} moduleName - A descriptive name for the logger module (e.g., 'ServerSigner').\n   */\n  protected initializeMirrorNode(\n    network: HederaNetworkType,\n    moduleName: string\n  ): void {\n    this.mirrorNode = new HederaMirrorNode(\n      network,\n      new Logger({\n        level: 'info',\n        module: `${moduleName}-MirrorNode`,\n      })\n    );\n  }\n}\n"],"names":[],"mappings":";;AAgBO,MAAe,eAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgBnC,MAAa,eAAmC;AAC9C,QAAI,CAAC,KAAK,YAAY;AACpB,YAAM,IAAI;AAAA,QACR;AAAA,MAAA;AAAA,IACF;AAEF,UAAM,mBAAmB,KAAK,aAAA;AAC9B,QAAI;AACF,aAAO,MAAM,KAAK,WAAW,aAAa,iBAAiB,UAAU;AAAA,IAAA,SAC9D,OAAO;AACd,YAAM,eACJ,iBAAiB,QAAQ,MAAM,UAAU,OAAO,KAAK;AACvD,YAAM,IAAI;AAAA,QACR,8DAA8D,iBAAiB,SAAA,CAAU,KAAK,YAAY;AAAA,MAAA;AAAA,IAC5G;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAyCQ,qBACR,SACA,YACM;AACN,SAAK,aAAa,IAAI;AAAA,MACpB;AAAA,MACA,IAAI,OAAO;AAAA,QACT,OAAO;AAAA,QACP,QAAQ,GAAG,UAAU;AAAA,MAAA,CACtB;AAAA,IAAA;AAAA,EACH;AAEJ;"}