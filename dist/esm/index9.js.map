{"version":3,"file":"index9.js","sources":["../../src/langchain/tools/account/update-account-tool.ts"],"sourcesContent":["import { z } from 'zod';\nimport { UpdateAccountParams } from '../../../types';\nimport {\n  BaseHederaTransactionTool,\n  BaseHederaTransactionToolParams,\n} from '../common/base-hedera-transaction-tool';\nimport { BaseServiceBuilder } from '../../../builders/base-service-builder';\nimport { AccountBuilder } from '../../../builders/account/account-builder';\n\n/*\n * Zod schema defines the direct input expected from the LLM.\n * Omitted optional fields will result in no change to those account properties.\n * The builder translates provided values to SDK calls.\n */\nconst UpdateAccountZodSchemaCore = z.object({\n  accountIdToUpdate: z.string().describe('The ID of the account to update (e.g., \"0.0.12345\").'),\n  key: z.string().nullable().optional()\n    .describe('Optional. New key (serialized string). Pass null to clear (if allowed by SDK). Builder handles parsing.'),\n  autoRenewPeriod: z.number().int().positive().optional()\n    .describe('Optional. New auto-renewal period in seconds (e.g., 7776000 for 90 days).'),\n  memo: z.string().nullable().optional()\n    .describe('Optional. New memo. Pass null or empty string to clear.'),\n  maxAutomaticTokenAssociations: z.number().int().min(0).optional()\n    .describe('Optional. New max automatic token associations (0-5000).'),\n  stakedAccountId: z.string().nullable().optional()\n    .describe('Optional. New account ID to stake to. Pass \"0.0.0\" or null to clear.'),\n  stakedNodeId: z.number().int().nullable().optional()\n    .describe('Optional. New node ID to stake to. Pass -1 or null to clear. Builder handles Long conversion.'),\n  declineStakingReward: z.boolean().optional()\n    .describe('Optional. If true, account declines staking rewards.'),\n  receiverSignatureRequired: z.boolean().optional()\n    .describe('Optional. If true, account must sign transfers out of it.'),\n});\n\nexport class HederaUpdateAccountTool extends BaseHederaTransactionTool<\n  typeof UpdateAccountZodSchemaCore\n> {\n  name = 'hedera-account-update';\n  description =\n    'Updates an existing Hedera account. Specify accountIdToUpdate and fields to change. Builder handles parsing and clearing logic.';\n  specificInputSchema = UpdateAccountZodSchemaCore;\n  namespace = 'account';\n\n  constructor(params: BaseHederaTransactionToolParams) {\n    super(params);\n  }\n\n  protected getServiceBuilder(): BaseServiceBuilder {\n    return this.hederaKit.accounts();\n  }\n\n  /**\n   * Passes the validated arguments directly to the AccountBuilder's updateAccount method.\n   * The builder is responsible for all transformations and applying logic based on input values.\n   * Omitted optional fields from the LLM mean those properties will not be targeted for update.\n   */\n  protected async callBuilderMethod(\n    builder: BaseServiceBuilder,\n    specificArgs: z.infer<typeof UpdateAccountZodSchemaCore>\n  ): Promise<void> {\n    await (builder as AccountBuilder).updateAccount(\n      specificArgs as unknown as UpdateAccountParams\n    );\n  }\n}\n"],"names":[],"mappings":";;AAcA,MAAM,6BAA6B,EAAE,OAAO;AAAA,EAC1C,mBAAmB,EAAE,SAAS,SAAS,sDAAsD;AAAA,EAC7F,KAAK,EAAE,SAAS,WAAW,SAAA,EACxB,SAAS,yGAAyG;AAAA,EACrH,iBAAiB,EAAE,OAAA,EAAS,IAAA,EAAM,SAAA,EAAW,SAAA,EAC1C,SAAS,2EAA2E;AAAA,EACvF,MAAM,EAAE,SAAS,WAAW,SAAA,EACzB,SAAS,yDAAyD;AAAA,EACrE,+BAA+B,EAAE,OAAA,EAAS,IAAA,EAAM,IAAI,CAAC,EAAE,WACpD,SAAS,0DAA0D;AAAA,EACtE,iBAAiB,EAAE,SAAS,WAAW,SAAA,EACpC,SAAS,sEAAsE;AAAA,EAClF,cAAc,EAAE,OAAA,EAAS,IAAA,EAAM,SAAA,EAAW,SAAA,EACvC,SAAS,+FAA+F;AAAA,EAC3G,sBAAsB,EAAE,QAAA,EAAU,SAAA,EAC/B,SAAS,sDAAsD;AAAA,EAClE,2BAA2B,EAAE,QAAA,EAAU,SAAA,EACpC,SAAS,2DAA2D;AACzE,CAAC;AAEM,MAAM,gCAAgC,0BAE3C;AAAA,EAOA,YAAY,QAAyC;AACnD,UAAM,MAAM;AAPd,SAAA,OAAO;AACP,SAAA,cACE;AACF,SAAA,sBAAsB;AACtB,SAAA,YAAY;AAAA,EAAA;AAAA,EAMF,oBAAwC;AAChD,WAAO,KAAK,UAAU,SAAA;AAAA,EAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQjC,MAAgB,kBACd,SACA,cACe;AACf,UAAO,QAA2B;AAAA,MAChC;AAAA,IAAA;AAAA,EACF;AAEJ;"}