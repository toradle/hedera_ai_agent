{"version":3,"file":"index26.js","sources":["../../src/langchain/tools/common/base-hedera-transaction-tool.ts"],"sourcesContent":["import { z } from 'zod';\nimport { StructuredTool, ToolParams } from '@langchain/core/tools';\nimport { HederaAgentKit } from '../../../agent/agent';\nimport { CallbackManagerForToolRun } from '@langchain/core/callbacks/manager';\nimport { BaseServiceBuilder } from '../../../builders/base-service-builder';\nimport { AccountId, Key, TransactionId } from '@hashgraph/sdk';\nimport { parseKey } from '../../../utils/key-utils';\nimport { Logger } from '../../../utils/logger';\n\n/**\n * Zod schema for transaction meta options that can be used with any Hedera transaction tool.\n */\nexport const HederaTransactionMetaOptionsSchema = z\n  .object({\n    transactionMemo: z\n      .string()\n      .optional()\n      .describe('Optional memo for the Hedera transaction.'),\n    transactionId: z\n      .string()\n      .optional()\n      .describe(\n        'Optional transaction ID to use (e.g., for pre-generated IDs).'\n      ),\n    nodeAccountIds: z\n      .array(z.string())\n      .optional()\n      .describe(\n        'Optional specific node account IDs to target for the transaction.'\n      ),\n    schedule: z\n      .boolean()\n      .optional()\n      .describe(\n        'Set to true to schedule the transaction. If true, output will be for a ScheduleCreate transaction.'\n      ),\n    scheduleMemo: z\n      .string()\n      .optional()\n      .describe('Optional memo for the ScheduleCreate transaction itself.'),\n    schedulePayerAccountId: z\n      .string()\n      .optional()\n      .describe(\n        'Optional payer account ID for the ScheduleCreate transaction.'\n      ),\n    scheduleAdminKey: z\n      .string()\n      .optional()\n      .describe(\n        'Optional admin key (serialized string) for the ScheduleCreate transaction. Builder parses.'\n      ),\n  })\n  .optional();\n\nexport type HederaTransactionMetaOptions = z.infer<\n  typeof HederaTransactionMetaOptionsSchema\n>;\n\n/**\n * Parameters required to initialize a BaseHederaTransactionTool.\n */\nexport interface BaseHederaTransactionToolParams extends ToolParams {\n  hederaKit: HederaAgentKit;\n  logger?: Logger;\n}\n\n/**\n * Schedule options used when executing transactions.\n */\ninterface ScheduleExecutionOptions {\n  schedule?: boolean;\n  scheduleMemo?: string;\n  schedulePayerAccountId?: string | AccountId;\n  scheduleAdminKey?: Key;\n}\n\n/**\n * Base class for all Hedera transaction tools.\n * Handles common transaction processing logic across different tool types.\n *\n * @template S - The Zod schema that defines the input parameters for the specific tool\n */\nexport abstract class BaseHederaTransactionTool<\n  //@ts-ignore\n  S extends z.ZodObject<z.ZodRawShape, z.UnknownKeysParam, z.ZodTypeAny>\n> extends StructuredTool<\n  //@ts-ignore\n  z.ZodObject<\n    S['shape'] & { metaOptions: typeof HederaTransactionMetaOptionsSchema },\n    z.UnknownKeysParam,\n    z.ZodTypeAny,\n    z.infer<S> & { metaOptions?: HederaTransactionMetaOptions },\n    z.infer<S> & { metaOptions?: HederaTransactionMetaOptions }\n  >\n> {\n  protected hederaKit: HederaAgentKit;\n  protected logger: Logger;\n  protected neverScheduleThisTool: boolean = false;\n\n  /**\n   * Indicates if this tool requires multiple transactions to complete.\n   * Tools that require multiple transactions cannot be used in returnBytes mode.\n   */\n  protected requiresMultipleTransactions: boolean = false;\n\n  abstract specificInputSchema: S;\n  abstract namespace: string;\n\n  //@ts-ignore: Ignoring complex type compatibility issues\n  get schema(): this['lc_kwargs']['schema'] {\n    //@ts-ignore: Ignoring complex type compatibility issues\n    return this.specificInputSchema.extend({\n      metaOptions: HederaTransactionMetaOptionsSchema,\n    });\n  }\n\n  constructor({ hederaKit, logger, ...rest }: BaseHederaTransactionToolParams) {\n    super(rest);\n    this.hederaKit = hederaKit;\n    this.logger = logger || hederaKit.logger;\n  }\n\n  /**\n   * Get the appropriate service builder for this tool's operations.\n   */\n  protected abstract getServiceBuilder(): BaseServiceBuilder;\n\n  /**\n   * Call the appropriate builder method with the tool-specific arguments.\n   */\n  protected abstract callBuilderMethod(\n    builder: BaseServiceBuilder,\n    specificArgs: z.infer<S>,\n    runManager?: CallbackManagerForToolRun\n  ): Promise<void>;\n\n  /**\n   * Apply any meta options specified in the tool call to the service builder.\n   */\n  protected async _applyMetaOptions(\n    builder: BaseServiceBuilder,\n    metaOpts: HederaTransactionMetaOptions | undefined,\n    specificCallArgs: z.infer<S>\n  ): Promise<void> {\n    await this._substituteKeyFields(specificCallArgs);\n    this._applyTransactionOptions(builder, metaOpts);\n  }\n\n  /**\n   * Handle substitution of special key field values like 'current_signer'\n   */\n  private async _substituteKeyFields(\n    specificCallArgs: z.infer<S>\n  ): Promise<void> {\n    const keyFieldNames: (keyof typeof specificCallArgs)[] = [\n      'adminKey',\n      'kycKey',\n      'freezeKey',\n      'wipeKey',\n      'supplyKey',\n      'feeScheduleKey',\n      'pauseKey',\n    ];\n\n    for (const keyField of keyFieldNames) {\n      const originalKeyValue = (specificCallArgs as Record<string, unknown>)[\n        keyField as string\n      ];\n\n      if (originalKeyValue === 'current_signer') {\n        try {\n          const operatorPubKey = await this.hederaKit.signer.getPublicKey();\n          const pubKeyString = operatorPubKey.toStringDer();\n          (specificCallArgs as Record<string, unknown>)[keyField as string] =\n            pubKeyString;\n          this.logger.info(\n            `Substituted ${\n              keyField as string\n            } with current signer's public key.`\n          );\n        } catch (error) {\n          const typedError = error as Error;\n          this.logger.error(\n            `Failed to get current signer's public key for ${\n              keyField as string\n            } substitution: ${typedError.message}`,\n            error\n          );\n        }\n      }\n    }\n  }\n\n  /**\n   * Apply transaction-specific options from metaOptions\n   */\n  private _applyTransactionOptions(\n    builder: BaseServiceBuilder,\n    metaOptions?: HederaTransactionMetaOptions\n  ): void {\n    if (!metaOptions) return;\n\n    if (metaOptions.transactionId) {\n      try {\n        builder.setTransactionId(\n          TransactionId.fromString(metaOptions.transactionId)\n        );\n      } catch {\n        this.logger.warn(\n          `Invalid transactionId format in metaOptions: ${metaOptions.transactionId}, ignoring.`\n        );\n      }\n    }\n\n    if (metaOptions.nodeAccountIds && metaOptions.nodeAccountIds.length > 0) {\n      try {\n        builder.setNodeAccountIds(\n          metaOptions.nodeAccountIds.map((id: string) =>\n            AccountId.fromString(id)\n          )\n        );\n      } catch {\n        this.logger.warn(\n          `Invalid nodeAccountId format in metaOptions, ignoring.`\n        );\n      }\n    }\n\n    if (metaOptions.transactionMemo) {\n      builder.setTransactionMemo(metaOptions.transactionMemo);\n    }\n  }\n\n  /**\n   * Handle direct execution mode for the transaction\n   */\n  private async _handleAutonomous(\n    builder: BaseServiceBuilder,\n    metaOpts: HederaTransactionMetaOptions | undefined,\n    allNotes: string[]\n  ): Promise<string> {\n    const execOptions = this._buildScheduleOptions(metaOpts);\n\n    this.logger.info(\n      `Executing transaction directly (mode: autonomous): ${this.name}`\n    );\n\n    const result = await builder.execute(execOptions);\n    return JSON.stringify({ ...result, notes: allNotes });\n  }\n\n  /**\n   * Handle providing transaction bytes mode\n   */\n  private async _handleReturnBytes(\n    builder: BaseServiceBuilder,\n    metaOpts: HederaTransactionMetaOptions | undefined,\n    allNotes: string[]\n  ): Promise<string> {\n    if (this.requiresMultipleTransactions) {\n      const errorMessage =\n        `The ${this.name} tool requires multiple transactions and cannot be used in returnBytes mode. ` +\n        `Please use autonomous mode or break down the operation into individual steps.`;\n      this.logger.warn(errorMessage);\n      return JSON.stringify({\n        success: false,\n        error: errorMessage,\n        requiresAutonomous: true,\n        notes: allNotes,\n      });\n    }\n\n    const shouldSchedule = this._shouldScheduleTransaction(metaOpts);\n\n    if (shouldSchedule) {\n      return this._handleScheduledTransaction(builder, metaOpts, allNotes);\n    } else {\n      return this._handleUnscheduledTransaction(builder, allNotes);\n    }\n  }\n\n  /**\n   * Determine if a transaction should be scheduled\n   */\n  private _shouldScheduleTransaction(\n    metaOptions?: HederaTransactionMetaOptions\n  ): boolean {\n    return (\n      !this.neverScheduleThisTool &&\n      (metaOptions?.schedule ??\n        (this.hederaKit.operationalMode === 'returnBytes' &&\n          this.hederaKit.scheduleUserTransactionsInBytesMode))\n    );\n  }\n\n  /**\n   * Handle creating a scheduled transaction\n   */\n  private async _handleScheduledTransaction(\n    builder: BaseServiceBuilder,\n    metaOpts: HederaTransactionMetaOptions | undefined,\n    allNotes: string[]\n  ): Promise<string> {\n    this.logger.info(\n      `Preparing scheduled transaction (mode: returnBytes, schedule: true): ${this.name}`\n    );\n\n    const execOptions = this._buildScheduleOptions(metaOpts, true);\n    execOptions.schedulePayerAccountId = this.hederaKit.signer.getAccountId();\n\n    const scheduleCreateResult = await builder.execute(execOptions);\n\n    if (scheduleCreateResult.success && scheduleCreateResult.scheduleId) {\n      const description =\n        metaOpts?.transactionMemo || `Scheduled ${this.name} operation.`;\n\n      const userInfo = this.hederaKit.userAccountId\n        ? ` User (${this.hederaKit.userAccountId}) will be payer of scheduled transaction.`\n        : '';\n\n      return JSON.stringify({\n        success: true,\n        op: 'schedule_create',\n        scheduleId: scheduleCreateResult.scheduleId.toString(),\n        description: description + userInfo,\n        payer_account_id_scheduled_tx:\n          this.hederaKit.userAccountId || 'unknown',\n        memo_scheduled_tx: metaOpts?.transactionMemo,\n        notes: allNotes,\n      });\n    } else {\n      return JSON.stringify({\n        success: false,\n        error:\n          scheduleCreateResult.error ||\n          'Failed to create schedule and retrieve ID.',\n        notes: allNotes,\n      });\n    }\n  }\n\n  /**\n   * Handle returning transaction bytes for an unscheduled transaction\n   */\n  private async _handleUnscheduledTransaction(\n    builder: BaseServiceBuilder,\n    allNotes: string[]\n  ): Promise<string> {\n    this.logger.info(\n      `Returning transaction bytes (mode: returnBytes, schedule: false): ${this.name}`\n    );\n\n    const bytes = await builder.getTransactionBytes({});\n    return JSON.stringify({\n      success: true,\n      transactionBytes: bytes,\n      transactionId: builder.getCurrentTransaction()?.transactionId?.toString(),\n      notes: allNotes,\n    });\n  }\n\n  /**\n   * Build schedule options from meta options\n   */\n  private _buildScheduleOptions(\n    metaOptions?: HederaTransactionMetaOptions,\n    forceSchedule = false\n  ): ScheduleExecutionOptions {\n    const options: ScheduleExecutionOptions = {};\n\n    if (forceSchedule || metaOptions?.schedule) {\n      options.schedule = true;\n\n      if (metaOptions?.scheduleMemo) {\n        options.scheduleMemo = metaOptions.scheduleMemo;\n      }\n\n      if (metaOptions?.schedulePayerAccountId) {\n        try {\n          options.schedulePayerAccountId = AccountId.fromString(\n            metaOptions.schedulePayerAccountId\n          );\n        } catch {\n          this.logger.warn('Invalid schedulePayerAccountId');\n        }\n      }\n\n      if (metaOptions?.scheduleAdminKey) {\n        try {\n          const parsedKey = parseKey(metaOptions.scheduleAdminKey);\n          if (parsedKey) options.scheduleAdminKey = parsedKey;\n        } catch {\n          this.logger.warn('Invalid scheduleAdminKey');\n        }\n      }\n    }\n\n    return options;\n  }\n\n  /**\n   * Optional method for concrete tools to provide a user-friendly note for a specific Zod-defaulted parameter.\n   * @param key The key of the parameter that was defaulted by Zod.\n   * @param schemaDefaultValue The default value defined in the Zod schema for this key.\n   * @param actualValue The current/final value of the parameter after Zod parsing.\n   * @returns A user-friendly string for the note, or undefined to use a generic note.\n   */\n  protected getNoteForKey?(\n    //eslint-disable-next-line @typescript-eslint/no-unused-vars\n    key: string,\n    //eslint-disable-next-line @typescript-eslint/no-unused-vars\n    schemaDefaultValue: unknown,\n    //eslint-disable-next-line @typescript-eslint/no-unused-vars\n    actualValue: unknown\n  ): string | undefined {\n    return undefined;\n  }\n\n  /**\n   * Main method called when the tool is executed.\n   * Processes arguments, calls the specific builder method, and handles\n   * transaction execution based on the kit's operational mode.\n   */\n  protected async _call(\n    args: z.infer<ReturnType<this['schema']>>,\n    runManager?: CallbackManagerForToolRun\n  ): Promise<string> {\n    const llmProvidedMetaOptions = args.metaOptions;\n    const specificCallArgs = this._extractSpecificArgsFromCombinedArgs(args);\n\n    this.logger.info(\n      `Executing ${this.name} with Zod-parsed specific args (schema defaults applied by LangChain):`,\n      JSON.parse(JSON.stringify(specificCallArgs)),\n      'and metaOptions:',\n      llmProvidedMetaOptions\n    );\n\n    const zodSchemaInfoNotes: string[] = [];\n    if (this.specificInputSchema && this.specificInputSchema.shape) {\n      for (const key in this.specificInputSchema.shape) {\n        if (\n          Object.prototype.hasOwnProperty.call(\n            this.specificInputSchema.shape,\n            key\n          )\n        ) {\n          const fieldSchema = this.specificInputSchema.shape[\n            key\n          ] as z.ZodTypeAny;\n\n          if (\n            fieldSchema._def &&\n            (fieldSchema._def as z.ZodDefaultDef<z.ZodTypeAny>).typeName ===\n              'ZodDefault'\n          ) {\n            const defaultValueOrFn = (\n              fieldSchema._def as z.ZodDefaultDef<z.ZodTypeAny>\n            ).defaultValue();\n            let schemaDefinedDefaultValue = defaultValueOrFn;\n            if (typeof defaultValueOrFn === 'function') {\n              try {\n                schemaDefinedDefaultValue = defaultValueOrFn();\n              } catch (eDefaultFn) {\n                this.logger.warn(\n                  `Could not execute default value function for key ${key}. Error: ${\n                    (eDefaultFn as Error).message\n                  }`\n                );\n                schemaDefinedDefaultValue = '[dynamic schema default]';\n              }\n            }\n\n            const currentValue =\n              specificCallArgs[key as keyof typeof specificCallArgs];\n            let noteMessage: string | undefined;\n\n            if (this.getNoteForKey) {\n              noteMessage = this.getNoteForKey(\n                key,\n                schemaDefinedDefaultValue,\n                currentValue\n              );\n            }\n\n            if (!noteMessage) {\n              noteMessage = `For the parameter '${key}', the value '${JSON.stringify(\n                currentValue\n              )}' was used. This field has a tool schema default of '${JSON.stringify(\n                schemaDefinedDefaultValue\n              )}'.`;\n            }\n            zodSchemaInfoNotes.push(noteMessage);\n          }\n        }\n      }\n    }\n\n    this.logger.debug('Zod Schema Default Info Notes:', zodSchemaInfoNotes);\n\n    try {\n      const builder = this.getServiceBuilder();\n      builder.clearNotes();\n\n      await this.callBuilderMethod(builder, specificCallArgs, runManager);\n      await this._applyMetaOptions(\n        builder,\n        llmProvidedMetaOptions,\n        specificCallArgs\n      );\n\n      const builderAppliedDefaultNotes = builder.getNotes();\n      this.logger.debug(\n        'Builder Applied Default Notes:',\n        builderAppliedDefaultNotes\n      );\n      const allNotes = [...zodSchemaInfoNotes, ...builderAppliedDefaultNotes];\n      this.logger.debug('All Notes combined:', allNotes);\n\n      if (this.hederaKit.operationalMode === 'autonomous') {\n        return this._handleAutonomous(\n          builder,\n          llmProvidedMetaOptions,\n          allNotes\n        );\n      } else {\n        return this._handleReturnBytes(\n          builder,\n          llmProvidedMetaOptions,\n          allNotes\n        );\n      }\n    } catch (error) {\n      const builder = this.getServiceBuilder();\n      const builderNotesOnError = builder ? builder.getNotes() : [];\n      const allNotesOnError = [...zodSchemaInfoNotes, ...builderNotesOnError];\n      return this._handleError(error, allNotesOnError);\n    }\n  }\n\n  private _extractSpecificArgsFromCombinedArgs(\n    combinedArgs: z.infer<ReturnType<this['schema']>>\n  ): z.infer<S> {\n    const specificArgs: Record<string, unknown> = {};\n    if (this.specificInputSchema && this.specificInputSchema.shape) {\n      for (const key in this.specificInputSchema.shape) {\n        if (Object.prototype.hasOwnProperty.call(combinedArgs, key)) {\n          specificArgs[key] = (combinedArgs as Record<string, unknown>)[key];\n        }\n      }\n    }\n    return specificArgs as z.infer<S>;\n  }\n\n  private _handleError(error: unknown, notes?: string[]): string {\n    const errorMessage =\n      error instanceof Error ? error.message : JSON.stringify(error);\n    this.logger.error(`Error in ${this.name}: ${errorMessage}`, error);\n    return JSON.stringify({\n      success: false,\n      error: errorMessage,\n      notes: notes || [],\n    });\n  }\n}\n"],"names":[],"mappings":";;;;AAYO,MAAM,qCAAqC,EAC/C,OAAO;AAAA,EACN,iBAAiB,EACd,OAAA,EACA,SAAA,EACA,SAAS,2CAA2C;AAAA,EACvD,eAAe,EACZ,SACA,WACA;AAAA,IACC;AAAA,EAAA;AAAA,EAEJ,gBAAgB,EACb,MAAM,EAAE,QAAQ,EAChB,WACA;AAAA,IACC;AAAA,EAAA;AAAA,EAEJ,UAAU,EACP,UACA,WACA;AAAA,IACC;AAAA,EAAA;AAAA,EAEJ,cAAc,EACX,OAAA,EACA,SAAA,EACA,SAAS,0DAA0D;AAAA,EACtE,wBAAwB,EACrB,SACA,WACA;AAAA,IACC;AAAA,EAAA;AAAA,EAEJ,kBAAkB,EACf,SACA,WACA;AAAA,IACC;AAAA,EAAA;AAEN,CAAC,EACA,SAAA;AA8BI,MAAe,kCAGZ,eASR;AAAA,EAsBA,YAAY,EAAE,WAAW,QAAQ,GAAG,QAAyC;AAC3E,UAAM,IAAI;AApBZ,SAAU,wBAAiC;AAM3C,SAAU,+BAAwC;AAehD,SAAK,YAAY;AACjB,SAAK,SAAS,UAAU,UAAU;AAAA,EAAA;AAAA;AAAA,EAVpC,IAAI,SAAsC;AAExC,WAAO,KAAK,oBAAoB,OAAO;AAAA,MACrC,aAAa;AAAA,IAAA,CACd;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EA0BH,MAAgB,kBACd,SACA,UACA,kBACe;AACf,UAAM,KAAK,qBAAqB,gBAAgB;AAChD,SAAK,yBAAyB,SAAS,QAAQ;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAMjD,MAAc,qBACZ,kBACe;AACf,UAAM,gBAAmD;AAAA,MACvD;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IAAA;AAGF,eAAW,YAAY,eAAe;AACpC,YAAM,mBAAoB,iBACxB,QACF;AAEA,UAAI,qBAAqB,kBAAkB;AACzC,YAAI;AACF,gBAAM,iBAAiB,MAAM,KAAK,UAAU,OAAO,aAAA;AACnD,gBAAM,eAAe,eAAe,YAAA;AACnC,2BAA6C,QAAkB,IAC9D;AACF,eAAK,OAAO;AAAA,YACV,eACE,QACF;AAAA,UAAA;AAAA,QACF,SACO,OAAO;AACd,gBAAM,aAAa;AACnB,eAAK,OAAO;AAAA,YACV,iDACE,QACF,kBAAkB,WAAW,OAAO;AAAA,YACpC;AAAA,UAAA;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAMM,yBACN,SACA,aACM;AACN,QAAI,CAAC,YAAa;AAElB,QAAI,YAAY,eAAe;AAC7B,UAAI;AACF,gBAAQ;AAAA,UACN,cAAc,WAAW,YAAY,aAAa;AAAA,QAAA;AAAA,MACpD,QACM;AACN,aAAK,OAAO;AAAA,UACV,gDAAgD,YAAY,aAAa;AAAA,QAAA;AAAA,MAC3E;AAAA,IACF;AAGF,QAAI,YAAY,kBAAkB,YAAY,eAAe,SAAS,GAAG;AACvE,UAAI;AACF,gBAAQ;AAAA,UACN,YAAY,eAAe;AAAA,YAAI,CAAC,OAC9B,UAAU,WAAW,EAAE;AAAA,UAAA;AAAA,QACzB;AAAA,MACF,QACM;AACN,aAAK,OAAO;AAAA,UACV;AAAA,QAAA;AAAA,MACF;AAAA,IACF;AAGF,QAAI,YAAY,iBAAiB;AAC/B,cAAQ,mBAAmB,YAAY,eAAe;AAAA,IAAA;AAAA,EACxD;AAAA;AAAA;AAAA;AAAA,EAMF,MAAc,kBACZ,SACA,UACA,UACiB;AACjB,UAAM,cAAc,KAAK,sBAAsB,QAAQ;AAEvD,SAAK,OAAO;AAAA,MACV,sDAAsD,KAAK,IAAI;AAAA,IAAA;AAGjE,UAAM,SAAS,MAAM,QAAQ,QAAQ,WAAW;AAChD,WAAO,KAAK,UAAU,EAAE,GAAG,QAAQ,OAAO,UAAU;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAMtD,MAAc,mBACZ,SACA,UACA,UACiB;AACjB,QAAI,KAAK,8BAA8B;AACrC,YAAM,eACJ,OAAO,KAAK,IAAI;AAElB,WAAK,OAAO,KAAK,YAAY;AAC7B,aAAO,KAAK,UAAU;AAAA,QACpB,SAAS;AAAA,QACT,OAAO;AAAA,QACP,oBAAoB;AAAA,QACpB,OAAO;AAAA,MAAA,CACR;AAAA,IAAA;AAGH,UAAM,iBAAiB,KAAK,2BAA2B,QAAQ;AAE/D,QAAI,gBAAgB;AAClB,aAAO,KAAK,4BAA4B,SAAS,UAAU,QAAQ;AAAA,IAAA,OAC9D;AACL,aAAO,KAAK,8BAA8B,SAAS,QAAQ;AAAA,IAAA;AAAA,EAC7D;AAAA;AAAA;AAAA;AAAA,EAMM,2BACN,aACS;AACT,WACE,CAAC,KAAK,0BACL,aAAa,aACX,KAAK,UAAU,oBAAoB,iBAClC,KAAK,UAAU;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAOvB,MAAc,4BACZ,SACA,UACA,UACiB;AACjB,SAAK,OAAO;AAAA,MACV,wEAAwE,KAAK,IAAI;AAAA,IAAA;AAGnF,UAAM,cAAc,KAAK,sBAAsB,UAAU,IAAI;AAC7D,gBAAY,yBAAyB,KAAK,UAAU,OAAO,aAAA;AAE3D,UAAM,uBAAuB,MAAM,QAAQ,QAAQ,WAAW;AAE9D,QAAI,qBAAqB,WAAW,qBAAqB,YAAY;AACnE,YAAM,cACJ,UAAU,mBAAmB,aAAa,KAAK,IAAI;AAErD,YAAM,WAAW,KAAK,UAAU,gBAC5B,UAAU,KAAK,UAAU,aAAa,8CACtC;AAEJ,aAAO,KAAK,UAAU;AAAA,QACpB,SAAS;AAAA,QACT,IAAI;AAAA,QACJ,YAAY,qBAAqB,WAAW,SAAA;AAAA,QAC5C,aAAa,cAAc;AAAA,QAC3B,+BACE,KAAK,UAAU,iBAAiB;AAAA,QAClC,mBAAmB,UAAU;AAAA,QAC7B,OAAO;AAAA,MAAA,CACR;AAAA,IAAA,OACI;AACL,aAAO,KAAK,UAAU;AAAA,QACpB,SAAS;AAAA,QACT,OACE,qBAAqB,SACrB;AAAA,QACF,OAAO;AAAA,MAAA,CACR;AAAA,IAAA;AAAA,EACH;AAAA;AAAA;AAAA;AAAA,EAMF,MAAc,8BACZ,SACA,UACiB;AACjB,SAAK,OAAO;AAAA,MACV,qEAAqE,KAAK,IAAI;AAAA,IAAA;AAGhF,UAAM,QAAQ,MAAM,QAAQ,oBAAoB,CAAA,CAAE;AAClD,WAAO,KAAK,UAAU;AAAA,MACpB,SAAS;AAAA,MACT,kBAAkB;AAAA,MAClB,eAAe,QAAQ,yBAAyB,eAAe,SAAA;AAAA,MAC/D,OAAO;AAAA,IAAA,CACR;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAMK,sBACN,aACA,gBAAgB,OACU;AAC1B,UAAM,UAAoC,CAAA;AAE1C,QAAI,iBAAiB,aAAa,UAAU;AAC1C,cAAQ,WAAW;AAEnB,UAAI,aAAa,cAAc;AAC7B,gBAAQ,eAAe,YAAY;AAAA,MAAA;AAGrC,UAAI,aAAa,wBAAwB;AACvC,YAAI;AACF,kBAAQ,yBAAyB,UAAU;AAAA,YACzC,YAAY;AAAA,UAAA;AAAA,QACd,QACM;AACN,eAAK,OAAO,KAAK,gCAAgC;AAAA,QAAA;AAAA,MACnD;AAGF,UAAI,aAAa,kBAAkB;AACjC,YAAI;AACF,gBAAM,YAAY,SAAS,YAAY,gBAAgB;AACvD,cAAI,mBAAmB,mBAAmB;AAAA,QAAA,QACpC;AACN,eAAK,OAAO,KAAK,0BAA0B;AAAA,QAAA;AAAA,MAC7C;AAAA,IACF;AAGF,WAAO;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUC,cAER,KAEA,oBAEA,aACoB;AACpB,WAAO;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQT,MAAgB,MACd,MACA,YACiB;AACjB,UAAM,yBAAyB,KAAK;AACpC,UAAM,mBAAmB,KAAK,qCAAqC,IAAI;AAEvE,SAAK,OAAO;AAAA,MACV,aAAa,KAAK,IAAI;AAAA,MACtB,KAAK,MAAM,KAAK,UAAU,gBAAgB,CAAC;AAAA,MAC3C;AAAA,MACA;AAAA,IAAA;AAGF,UAAM,qBAA+B,CAAA;AACrC,QAAI,KAAK,uBAAuB,KAAK,oBAAoB,OAAO;AAC9D,iBAAW,OAAO,KAAK,oBAAoB,OAAO;AAChD,YACE,OAAO,UAAU,eAAe;AAAA,UAC9B,KAAK,oBAAoB;AAAA,UACzB;AAAA,QAAA,GAEF;AACA,gBAAM,cAAc,KAAK,oBAAoB,MAC3C,GACF;AAEA,cACE,YAAY,QACX,YAAY,KAAuC,aAClD,cACF;AACA,kBAAM,mBACJ,YAAY,KACZ,aAAA;AACF,gBAAI,4BAA4B;AAChC,gBAAI,OAAO,qBAAqB,YAAY;AAC1C,kBAAI;AACF,4CAA4B,iBAAA;AAAA,cAAiB,SACtC,YAAY;AACnB,qBAAK,OAAO;AAAA,kBACV,oDAAoD,GAAG,YACpD,WAAqB,OACxB;AAAA,gBAAA;AAEF,4CAA4B;AAAA,cAAA;AAAA,YAC9B;AAGF,kBAAM,eACJ,iBAAiB,GAAoC;AACvD,gBAAI;AAEJ,gBAAI,KAAK,eAAe;AACtB,4BAAc,KAAK;AAAA,gBACjB;AAAA,gBACA;AAAA,gBACA;AAAA,cAAA;AAAA,YACF;AAGF,gBAAI,CAAC,aAAa;AAChB,4BAAc,sBAAsB,GAAG,iBAAiB,KAAK;AAAA,gBAC3D;AAAA,cAAA,CACD,wDAAwD,KAAK;AAAA,gBAC5D;AAAA,cAAA,CACD;AAAA,YAAA;AAEH,+BAAmB,KAAK,WAAW;AAAA,UAAA;AAAA,QACrC;AAAA,MACF;AAAA,IACF;AAGF,SAAK,OAAO,MAAM,kCAAkC,kBAAkB;AAEtE,QAAI;AACF,YAAM,UAAU,KAAK,kBAAA;AACrB,cAAQ,WAAA;AAER,YAAM,KAAK,kBAAkB,SAAS,kBAAkB,UAAU;AAClE,YAAM,KAAK;AAAA,QACT;AAAA,QACA;AAAA,QACA;AAAA,MAAA;AAGF,YAAM,6BAA6B,QAAQ,SAAA;AAC3C,WAAK,OAAO;AAAA,QACV;AAAA,QACA;AAAA,MAAA;AAEF,YAAM,WAAW,CAAC,GAAG,oBAAoB,GAAG,0BAA0B;AACtE,WAAK,OAAO,MAAM,uBAAuB,QAAQ;AAEjD,UAAI,KAAK,UAAU,oBAAoB,cAAc;AACnD,eAAO,KAAK;AAAA,UACV;AAAA,UACA;AAAA,UACA;AAAA,QAAA;AAAA,MACF,OACK;AACL,eAAO,KAAK;AAAA,UACV;AAAA,UACA;AAAA,UACA;AAAA,QAAA;AAAA,MACF;AAAA,IACF,SACO,OAAO;AACd,YAAM,UAAU,KAAK,kBAAA;AACrB,YAAM,sBAAsB,UAAU,QAAQ,SAAA,IAAa,CAAA;AAC3D,YAAM,kBAAkB,CAAC,GAAG,oBAAoB,GAAG,mBAAmB;AACtE,aAAO,KAAK,aAAa,OAAO,eAAe;AAAA,IAAA;AAAA,EACjD;AAAA,EAGM,qCACN,cACY;AACZ,UAAM,eAAwC,CAAA;AAC9C,QAAI,KAAK,uBAAuB,KAAK,oBAAoB,OAAO;AAC9D,iBAAW,OAAO,KAAK,oBAAoB,OAAO;AAChD,YAAI,OAAO,UAAU,eAAe,KAAK,cAAc,GAAG,GAAG;AAC3D,uBAAa,GAAG,IAAK,aAAyC,GAAG;AAAA,QAAA;AAAA,MACnE;AAAA,IACF;AAEF,WAAO;AAAA,EAAA;AAAA,EAGD,aAAa,OAAgB,OAA0B;AAC7D,UAAM,eACJ,iBAAiB,QAAQ,MAAM,UAAU,KAAK,UAAU,KAAK;AAC/D,SAAK,OAAO,MAAM,YAAY,KAAK,IAAI,KAAK,YAAY,IAAI,KAAK;AACjE,WAAO,KAAK,UAAU;AAAA,MACpB,SAAS;AAAA,MACT,OAAO;AAAA,MACP,OAAO,SAAS,CAAA;AAAA,IAAC,CAClB;AAAA,EAAA;AAEL;"}