{"version":3,"file":"index72.js","sources":["../../src/builders/hts/hts-builder.ts"],"sourcesContent":["import {\n  AccountId,\n  CustomFee,\n  TokenCreateTransaction,\n  TokenSupplyType,\n  TokenType,\n  TokenId,\n  Long,\n  TokenMintTransaction,\n  TokenBurnTransaction,\n  TransferTransaction,\n  TokenAssociateTransaction,\n  TokenDissociateTransaction,\n  Hbar,\n  TokenWipeTransaction,\n  TokenFreezeTransaction,\n  TokenUnfreezeTransaction,\n  TokenGrantKycTransaction,\n  TokenRevokeKycTransaction,\n  TokenPauseTransaction,\n  TokenUnpauseTransaction,\n  TokenUpdateTransaction,\n  TokenDeleteTransaction,\n  TokenFeeScheduleUpdateTransaction,\n  NftId,\n  TokenAirdropTransaction,\n  TokenClaimAirdropTransaction,\n  TokenCancelAirdropTransaction,\n  TokenRejectTransaction,\n  CustomFixedFee,\n  CustomFractionalFee,\n  CustomRoyaltyFee,\n  KeyList,\n  PublicKey,\n  FeeAssessmentMethod,\n} from '@hashgraph/sdk';\n\nimport {\n  FTCreateParams,\n  NFTCreateParams,\n  MintFTParams,\n  BurnFTParams,\n  MintNFTParams,\n  BurnNFTParams,\n  TransferNFTParams,\n  AssociateTokensParams,\n  DissociateTokensParams,\n  TransferTokensParams,\n  FungibleTokenTransferSpec,\n  WipeTokenAccountParams,\n  FreezeTokenAccountParams,\n  UnfreezeTokenAccountParams,\n  GrantKycTokenParams,\n  RevokeKycTokenParams,\n  PauseTokenParams,\n  UnpauseTokenParams,\n  UpdateTokenParams,\n  DeleteTokenParams,\n  TokenFeeScheduleUpdateParams,\n  AirdropTokenParams,\n  ClaimAirdropParams,\n  CancelAirdropParams,\n  RejectAirdropParams,\n} from '../../types';\nimport { BaseServiceBuilder } from '../base-service-builder';\nimport { Buffer } from 'buffer';\nimport { HederaAgentKit } from '../../agent/agent';\nimport { CustomFeeInputData } from '../../langchain/tools/hts/create-fungible-token-tool';\nimport { AgentOperationalMode } from '../../types';\nimport { Logger } from '../../utils/logger';\n\nconst DEFAULT_AUTORENEW_PERIOD_SECONDS = 7776000;\n\nfunction generateDefaultSymbol(tokenName: string): string {\n  if (!tokenName) {\n    return 'TOKEN';\n  }\n  const symbol = tokenName\n    .replace(/[^a-zA-Z0-9]/g, '')\n    .substring(0, 5)\n    .toUpperCase();\n  if (symbol) {\n    return symbol;\n  }\n  return 'TOKEN';\n}\n\nfunction mapToSdkCustomFees(\n  fees: CustomFeeInputData[],\n  parseAmountFn: (amount?: number | string | Long | BigNumber) => Long,\n  logger: Logger,\n  kitUserAccountId?: string,\n  kitOperationalMode?: AgentOperationalMode,\n  addNoteFn?: (note: string) => void\n): CustomFee[] {\n  if (!fees || fees.length === 0) {\n    return [];\n  }\n\n  return fees.map((feeData: CustomFeeInputData) => {\n    let feeCollectorStringToParse = feeData.feeCollectorAccountId;\n\n    if (\n      !feeCollectorStringToParse &&\n      kitUserAccountId &&\n      kitOperationalMode === 'returnBytes'\n    ) {\n      feeCollectorStringToParse = kitUserAccountId;\n      if (addNoteFn) {\n        let feeTypeForNote = 'custom';\n        if (feeData.type === 'FIXED' || feeData.type === 'FIXED_FEE') {\n          feeTypeForNote = 'fixed';\n        } else if (\n          feeData.type === 'FRACTIONAL' ||\n          feeData.type === 'FRACTIONAL_FEE'\n        ) {\n          feeTypeForNote = 'fractional';\n        } else if (\n          feeData.type === 'ROYALTY' ||\n          feeData.type === 'ROYALTY_FEE'\n        ) {\n          feeTypeForNote = 'royalty';\n        }\n        addNoteFn(\n          `Fee collector for a ${feeTypeForNote} fee was defaulted to your account (${kitUserAccountId}).`\n        );\n      }\n    }\n\n    if (!feeCollectorStringToParse) {\n      throw new Error(\n        `Fee collector account ID is required for custom fee type ${feeData.type} but was not provided or defaulted.`\n      );\n    }\n\n    let feeCollectorSdkAccountId: AccountId;\n    try {\n      feeCollectorSdkAccountId = AccountId.fromString(\n        feeCollectorStringToParse\n      );\n    } catch (e) {\n      logger.error(\n        `Invalid feeCollectorAccountId: ${feeCollectorStringToParse}`,\n        e\n      );\n      throw new Error(\n        `Invalid feeCollectorAccountId: ${feeCollectorStringToParse}`\n      );\n    }\n\n    switch (feeData.type) {\n      case 'FIXED':\n      case 'FIXED_FEE': {\n        const fixedFee = new CustomFixedFee()\n          .setFeeCollectorAccountId(feeCollectorSdkAccountId)\n          .setAmount(parseAmountFn(feeData.amount));\n        if (feeData.denominatingTokenId) {\n          try {\n            fixedFee.setDenominatingTokenId(\n              TokenId.fromString(feeData.denominatingTokenId)\n            );\n          } catch (e) {\n            logger.error(\n              `Invalid denominatingTokenId for fixed fee: ${feeData.denominatingTokenId}`,\n              e\n            );\n            throw new Error(\n              `Invalid denominatingTokenId for fixed fee: ${feeData.denominatingTokenId}`\n            );\n          }\n        }\n        return fixedFee;\n      }\n      case 'FRACTIONAL':\n      case 'FRACTIONAL_FEE': {\n        const fractionalFee = new CustomFractionalFee()\n          .setFeeCollectorAccountId(feeCollectorSdkAccountId)\n          .setNumerator(parseAmountFn(feeData.numerator).toNumber())\n          .setDenominator(parseAmountFn(feeData.denominator).toNumber());\n        if (feeData.minAmount !== undefined) {\n          fractionalFee.setMin(parseAmountFn(feeData.minAmount));\n        }\n        if (feeData.maxAmount !== undefined) {\n          fractionalFee.setMax(parseAmountFn(feeData.maxAmount));\n        }\n        const fractionalFeeData = feeData as Extract<\n          CustomFeeInputData,\n          { type: 'FRACTIONAL' | 'FRACTIONAL_FEE' }\n        >;\n        if (fractionalFeeData.assessmentMethodInclusive !== undefined) {\n          if (fractionalFeeData.assessmentMethodInclusive) {\n            fractionalFee.setAssessmentMethod(FeeAssessmentMethod.Inclusive);\n          } else {\n            fractionalFee.setAssessmentMethod(FeeAssessmentMethod.Exclusive);\n          }\n        }\n        return fractionalFee;\n      }\n      case 'ROYALTY':\n      case 'ROYALTY_FEE': {\n        const royaltyFee = new CustomRoyaltyFee()\n          .setFeeCollectorAccountId(feeCollectorSdkAccountId)\n          .setNumerator(parseAmountFn(feeData.numerator).toNumber())\n          .setDenominator(parseAmountFn(feeData.denominator).toNumber());\n        const royaltyFeeData = feeData as Extract<\n          CustomFeeInputData,\n          { type: 'ROYALTY' | 'ROYALTY_FEE' }\n        >;\n        if (royaltyFeeData.fallbackFee) {\n          let fallbackFeeCollectorStringToParse =\n            royaltyFeeData.fallbackFee.feeCollectorAccountId;\n          if (\n            !fallbackFeeCollectorStringToParse &&\n            kitUserAccountId &&\n            kitOperationalMode === 'returnBytes'\n          ) {\n            fallbackFeeCollectorStringToParse = kitUserAccountId;\n            if (addNoteFn) {\n              addNoteFn(\n                `Fallback fee collector for a royalty fee was also defaulted to your account (${kitUserAccountId}).`\n              );\n            }\n          }\n          if (!fallbackFeeCollectorStringToParse) {\n            throw new Error(\n              `Fallback fee collector account ID is required for royalty fee but was not provided or defaulted.`\n            );\n          }\n          let fallbackFeeCollectorSdkAccountId: AccountId;\n          try {\n            fallbackFeeCollectorSdkAccountId = AccountId.fromString(\n              fallbackFeeCollectorStringToParse\n            );\n          } catch (e) {\n            logger.error(\n              `Invalid feeCollectorAccountId in fallbackFee: ${fallbackFeeCollectorStringToParse}`,\n              e\n            );\n            throw new Error(\n              `Invalid feeCollectorAccountId in fallbackFee: ${fallbackFeeCollectorStringToParse}`\n            );\n          }\n          const fallback = new CustomFixedFee()\n            .setFeeCollectorAccountId(fallbackFeeCollectorSdkAccountId)\n            .setAmount(parseAmountFn(royaltyFeeData.fallbackFee.amount));\n          if (royaltyFeeData.fallbackFee.denominatingTokenId) {\n            try {\n              fallback.setDenominatingTokenId(\n                TokenId.fromString(\n                  royaltyFeeData.fallbackFee.denominatingTokenId\n                )\n              );\n            } catch (e) {\n              logger.error(\n                `Invalid denominatingTokenId in fallbackFee: ${royaltyFeeData.fallbackFee.denominatingTokenId}`,\n                e\n              );\n              throw new Error(\n                `Invalid denominatingTokenId in fallbackFee: ${royaltyFeeData.fallbackFee.denominatingTokenId}`\n              );\n            }\n          }\n          royaltyFee.setFallbackFee(fallback);\n        }\n        return royaltyFee;\n      }\n      default: {\n        const exhaustiveCheck: never = feeData;\n        logger.warn(\n          `Unsupported custom fee type encountered: ${\n            (exhaustiveCheck as unknown as { type?: string }).type\n          }`\n        );\n        throw new Error(\n          `Unsupported custom fee type: ${\n            (exhaustiveCheck as unknown as { type?: string }).type\n          }`\n        );\n      }\n    }\n  });\n}\n\n/**\n * HtsBuilder facilitates the construction and execution of Hedera Token Service (HTS) transactions.\n */\nexport class HtsBuilder extends BaseServiceBuilder {\n  constructor(hederaKit: HederaAgentKit) {\n    super(hederaKit);\n  }\n\n  /**\n   * @param {FTCreateParams} params\n   * @returns {Promise<this>}\n   * @throws {Error}\n   */\n  public async createFungibleToken(params: FTCreateParams): Promise<this> {\n    this.clearNotes();\n    let treasuryAccId = params.treasuryAccountId;\n    if (\n      !treasuryAccId &&\n      this.kit.userAccountId &&\n      this.kit.operationalMode === 'returnBytes'\n    ) {\n      this.logger.info(\n        `[HtsBuilder.createFungibleToken] Using userAccountId ${this.kit.userAccountId} as treasury for FT creation in returnBytes mode.`\n      );\n      treasuryAccId = AccountId.fromString(this.kit.userAccountId);\n      this.addNote(\n        `Since no treasury was specified, your account (${this.kit.userAccountId}) has been set as the token's treasury.`\n      );\n    }\n    if (!treasuryAccId) {\n      throw new Error(\n        '[HtsBuilder.createFungibleToken] Treasury Account ID is required (e.g., explicitly, via userAccountId for returnBytes mode, or via agent operator for autonomous if applicable).'\n      );\n    }\n\n    let tokenSymbolToUse = params.tokenSymbol;\n    if (!tokenSymbolToUse) {\n      tokenSymbolToUse = generateDefaultSymbol(params.tokenName);\n      this.addNote(\n        `We've generated a token symbol '${tokenSymbolToUse}' for you, based on the token name '${params.tokenName}'.`\n      );\n    }\n\n    let sdkSupplyType: TokenSupplyType;\n    if (typeof params.supplyType === 'string') {\n      const supplyTypeString: string = params.supplyType;\n      if (\n        supplyTypeString.toUpperCase() ===\n        TokenSupplyType.Finite.toString().toUpperCase()\n      ) {\n        sdkSupplyType = TokenSupplyType.Finite;\n      } else if (\n        supplyTypeString.toUpperCase() ===\n        TokenSupplyType.Infinite.toString().toUpperCase()\n      ) {\n        sdkSupplyType = TokenSupplyType.Infinite;\n      } else {\n        this.logger.warn(\n          `Invalid string for supplyType: ${supplyTypeString}. Defaulting to INFINITE.`\n        );\n        this.addNote(\n          `Invalid supplyType string '${supplyTypeString}' received, defaulted to INFINITE.`\n        );\n        sdkSupplyType = TokenSupplyType.Infinite;\n      }\n    } else {\n      sdkSupplyType = params.supplyType;\n    }\n\n    const transaction = new TokenCreateTransaction()\n      .setTokenName(params.tokenName)\n      .setTokenSymbol(tokenSymbolToUse)\n      .setTreasuryAccountId(treasuryAccId)\n      .setTokenType(TokenType.FungibleCommon)\n      .setSupplyType(sdkSupplyType)\n      .setInitialSupply(this.parseAmount(params.initialSupply))\n      .setDecimals(params.decimals);\n\n    if (sdkSupplyType === TokenSupplyType.Finite && params.maxSupply) {\n      transaction.setMaxSupply(this.parseAmount(params.maxSupply));\n    }\n    if (params.adminKey) {\n      const parsedKey = await this.parseKey(params.adminKey);\n      if (parsedKey) transaction.setAdminKey(parsedKey);\n    }\n    if (params.kycKey) {\n      const parsedKey = await this.parseKey(params.kycKey);\n      if (parsedKey) transaction.setKycKey(parsedKey);\n    }\n    if (params.freezeKey) {\n      const parsedKey = await this.parseKey(params.freezeKey);\n      if (parsedKey) transaction.setFreezeKey(parsedKey);\n    }\n    if (params.wipeKey) {\n      const parsedKey = await this.parseKey(params.wipeKey);\n      if (parsedKey) transaction.setWipeKey(parsedKey);\n    }\n    if (params.supplyKey) {\n      const parsedKey = await this.parseKey(params.supplyKey);\n      if (parsedKey) transaction.setSupplyKey(parsedKey);\n    }\n    if (params.feeScheduleKey) {\n      const parsedKey = await this.parseKey(params.feeScheduleKey);\n      if (parsedKey) transaction.setFeeScheduleKey(parsedKey);\n    }\n    if (params.pauseKey) {\n      const parsedKey = await this.parseKey(params.pauseKey);\n      if (parsedKey) transaction.setPauseKey(parsedKey);\n    }\n    if (params.memo) {\n      transaction.setTokenMemo(params.memo);\n    }\n    if (params.customFees && params.customFees.length > 0) {\n      const sdkCustomFees = mapToSdkCustomFees(\n        params.customFees as unknown as CustomFeeInputData[],\n        this.parseAmount.bind(this),\n        this.logger,\n        this.kit.userAccountId,\n        this.kit.operationalMode,\n        this.addNote.bind(this)\n      );\n      transaction.setCustomFees(sdkCustomFees);\n    }\n    if (params.autoRenewAccountId) {\n      transaction.setAutoRenewAccountId(params.autoRenewAccountId);\n    }\n    if (params.autoRenewPeriod) {\n      transaction.setAutoRenewPeriod(params.autoRenewPeriod);\n    } else if (params.autoRenewAccountId) {\n      transaction.setAutoRenewPeriod(DEFAULT_AUTORENEW_PERIOD_SECONDS);\n      this.addNote(\n        `A standard auto-renew period of ${\n          DEFAULT_AUTORENEW_PERIOD_SECONDS / (24 * 60 * 60)\n        } days has been set for this token.`\n      );\n    }\n\n    this.setCurrentTransaction(transaction);\n    return this;\n  }\n\n  /**\n   * Creates a non-fungible token. If the supply key is not provided, the operator's public key will be used.\n   * @param {NFTCreateParams} params\n   * @returns {Promise<this>}\n   * @throws {Error}\n   */\n  public async createNonFungibleToken(params: NFTCreateParams): Promise<this> {\n    this.clearNotes();\n    let treasuryAccId = params.treasuryAccountId;\n    if (\n      !treasuryAccId &&\n      this.kit.userAccountId &&\n      this.kit.operationalMode === 'returnBytes'\n    ) {\n      this.logger.info(\n        `[HtsBuilder.createNonFungibleToken] Using userAccountId ${this.kit.userAccountId} as treasury for NFT creation in returnBytes mode.`\n      );\n      treasuryAccId = AccountId.fromString(this.kit.userAccountId);\n      this.addNote(\n        `Since no treasury was specified, your account (${this.kit.userAccountId}) has been set as the NFT collection's treasury.`\n      );\n    }\n    if (!treasuryAccId) {\n      throw new Error(\n        '[HtsBuilder.createNonFungibleToken] Treasury Account ID is required (e.g., explicitly, via userAccountId for returnBytes mode, or via agent operator for autonomous if applicable).'\n      );\n    }\n\n    let tokenSymbolToUse = params.tokenSymbol;\n    if (!tokenSymbolToUse) {\n      tokenSymbolToUse = generateDefaultSymbol(params.tokenName);\n      this.addNote(\n        `We've generated an NFT collection symbol '${tokenSymbolToUse}' for you, based on the collection name '${params.tokenName}'.`\n      );\n    }\n\n    let sdkSupplyType: TokenSupplyType;\n    if (typeof params.supplyType === 'string') {\n      const supplyTypeString: string = params.supplyType;\n      if (\n        supplyTypeString.toUpperCase() ===\n        TokenSupplyType.Finite.toString().toUpperCase()\n      ) {\n        sdkSupplyType = TokenSupplyType.Finite;\n      } else if (\n        supplyTypeString.toUpperCase() ===\n        TokenSupplyType.Infinite.toString().toUpperCase()\n      ) {\n        sdkSupplyType = TokenSupplyType.Infinite;\n      } else {\n        this.logger.warn(\n          `Invalid string for NFT supplyType: ${supplyTypeString}. Defaulting to FINITE as per NFT common practice.`\n        );\n        this.addNote(\n          `Invalid supplyType string '${supplyTypeString}' received for NFT, defaulted to FINITE.`\n        );\n        sdkSupplyType = TokenSupplyType.Finite;\n      }\n    } else {\n      sdkSupplyType = params.supplyType;\n    }\n\n    const transaction = new TokenCreateTransaction()\n      .setTokenName(params.tokenName)\n      .setTokenSymbol(tokenSymbolToUse)\n      .setTreasuryAccountId(treasuryAccId)\n      .setTokenType(TokenType.NonFungibleUnique)\n      .setSupplyType(sdkSupplyType)\n      .setInitialSupply(0)\n      .setDecimals(0);\n\n    if (sdkSupplyType === TokenSupplyType.Finite && params.maxSupply) {\n      transaction.setMaxSupply(this.parseAmount(params.maxSupply));\n    } else if (sdkSupplyType === TokenSupplyType.Finite && !params.maxSupply) {\n      this.logger.warn(\n        'NFT supplyType is FINITE but no maxSupply was provided. This might lead to an unmintable token or undesired SDK default. Consider prompting user for maxSupply or setting a builder default.'\n      );\n      this.addNote(\n        'For this FINITE NFT collection, a specific maximum supply was not provided. The Hedera network might apply its own default or limit minting.'\n      );\n    }\n    if (params.adminKey) {\n      const parsedKey = await this.parseKey(params.adminKey);\n      if (parsedKey) transaction.setAdminKey(parsedKey);\n    }\n    if (params.kycKey) {\n      const parsedKey = await this.parseKey(params.kycKey);\n      if (parsedKey) transaction.setKycKey(parsedKey);\n    }\n    if (params.freezeKey) {\n      const parsedKey = await this.parseKey(params.freezeKey);\n      if (parsedKey) transaction.setFreezeKey(parsedKey);\n    }\n    if (params.wipeKey) {\n      const parsedKey = await this.parseKey(params.wipeKey);\n      if (parsedKey) {\n        transaction.setWipeKey(parsedKey);\n      }\n    }\n\n    if (params.supplyKey) {\n      const parsedKey = await this.parseKey(params.supplyKey);\n      if (parsedKey) {\n        transaction.setSupplyKey(parsedKey);\n      }\n    } else {\n      const operator = await this.kit.query().getAccountInfo(treasuryAccId);\n      const key = operator?.key?.key;\n      if (key) {\n        transaction.setSupplyKey(PublicKey.fromString(key));\n      }\n    }\n\n    if (params.feeScheduleKey) {\n      const parsedKey = await this.parseKey(params.feeScheduleKey);\n      if (parsedKey) {\n        transaction.setFeeScheduleKey(parsedKey);\n      }\n    }\n    if (params.pauseKey) {\n      const parsedKey = await this.parseKey(params.pauseKey);\n      if (parsedKey) {\n        transaction.setPauseKey(parsedKey);\n      }\n    }\n    if (params.memo) {\n      transaction.setTokenMemo(params.memo);\n    }\n    if (params.customFees && params.customFees.length > 0) {\n      const sdkCustomFees = mapToSdkCustomFees(\n        params.customFees as unknown as CustomFeeInputData[],\n        this.parseAmount.bind(this),\n        this.logger,\n        this.kit.userAccountId,\n        this.kit.operationalMode,\n        this.addNote.bind(this)\n      );\n      transaction.setCustomFees(sdkCustomFees);\n    }\n    if (params.autoRenewAccountId) {\n      transaction.setAutoRenewAccountId(params.autoRenewAccountId);\n    }\n    if (params.autoRenewPeriod) {\n      transaction.setAutoRenewPeriod(params.autoRenewPeriod);\n    } else if (params.autoRenewAccountId) {\n      transaction.setAutoRenewPeriod(DEFAULT_AUTORENEW_PERIOD_SECONDS);\n      this.addNote(\n        `A standard auto-renew period of ${\n          DEFAULT_AUTORENEW_PERIOD_SECONDS / (24 * 60 * 60)\n        } days has been set for this NFT collection.`\n      );\n    }\n\n    this.setCurrentTransaction(transaction);\n    return this;\n  }\n\n  /**\n   * @param {MintFTParams} params\n   * @returns {this}\n   */\n  public mintFungibleToken(params: MintFTParams): this {\n    const transaction = new TokenMintTransaction()\n      .setTokenId(params.tokenId)\n      .setAmount(this.parseAmount(params.amount));\n    this.setCurrentTransaction(transaction);\n    return this;\n  }\n\n  /**\n   * @param {BurnFTParams} params\n   * @returns {this}\n   */\n  public burnFungibleToken(params: BurnFTParams): this {\n    const transaction = new TokenBurnTransaction()\n      .setTokenId(params.tokenId)\n      .setAmount(this.parseAmount(params.amount));\n    this.setCurrentTransaction(transaction);\n    return this;\n  }\n\n  /**\n   * @param {MintNFTParams} params\n   * @returns {this}\n   * @throws {Error}\n   */\n  public mintNonFungibleToken(params: MintNFTParams): this {\n    const metadata = params.metadata.map((m) => {\n      return Buffer.from(m, 'utf8');\n    })\n\n    const transaction = new TokenMintTransaction()\n      .setTokenId(params.tokenId)\n      .setMetadata(metadata);\n    this.setCurrentTransaction(transaction);\n    return this;\n  }\n\n  /**\n   * @param {BurnNFTParams} params\n   * @returns {this}\n   */\n  public burnNonFungibleToken(params: BurnNFTParams): this {\n    if (!params.serials || params.serials.length === 0) {\n      throw new Error('Serial numbers are required to burn NFTs.');\n    }\n    const serialsAsLong = params.serials.map((s) => this.parseAmount(s));\n    const transaction = new TokenBurnTransaction()\n      .setTokenId(params.tokenId)\n      .setSerials(serialsAsLong);\n    this.setCurrentTransaction(transaction);\n    return this;\n  }\n\n  /**\n   * @param {TransferNFTParams} params - Parameters for transferring a single NFT.\n   * @returns {this}\n   */\n  public transferNft(params: TransferNFTParams): this {\n\n    const serialNum =\n      typeof params.serial === 'string'\n        ? Long.fromString(params.serial)\n        : params.serial;\n\n    const nftId = new NftId(TokenId.fromString(params.tokenId), serialNum);\n\n    let transaction: TransferTransaction = new TransferTransaction();\n\n    if (!params.isApproved) {\n      transaction = transaction.addNftTransfer(\n        nftId,\n        params.senderAccountId,\n        params.receiverAccountId\n      );\n    } else {\n      transaction = transaction.addApprovedNftTransfer(\n        nftId,\n        params.senderAccountId,\n        params.receiverAccountId\n      );\n    }\n\n    if (params.memo) {\n      transaction.setTransactionMemo(params.memo);\n    }\n\n    this.setCurrentTransaction(transaction);\n    return this;\n  }\n\n  /**\n   * @param {AssociateTokensParams} params\n   * @returns {this}\n   */\n  public associateTokens(params: AssociateTokensParams): this {\n    const transaction = new TokenAssociateTransaction()\n      .setAccountId(params.accountId)\n      .setTokenIds(\n        params.tokenIds.map((id) =>\n          typeof id === 'string' ? TokenId.fromString(id) : id\n        )\n      );\n    this.setCurrentTransaction(transaction);\n    return this;\n  }\n\n  /**\n   * @param {DissociateTokensParams} params\n   * @returns {this}\n   */\n  public dissociateTokens(params: DissociateTokensParams): this {\n    const transaction = new TokenDissociateTransaction()\n      .setAccountId(params.accountId)\n      .setTokenIds(\n        params.tokenIds.map((id) =>\n          typeof id === 'string' ? TokenId.fromString(id) : id\n        )\n      );\n    this.setCurrentTransaction(transaction);\n    return this;\n  }\n\n  /**\n   * @param {TransferTokensParams} params - Parameters for transferring fungible tokens, NFTs, and/or HBAR.\n   * @returns {this}\n   */\n  public transferTokens(params: TransferTokensParams): this {\n    const transaction = new TransferTransaction();\n\n    if (params.tokenTransfers && params.tokenTransfers.length > 0) {\n      for (const transferInput of params.tokenTransfers) {\n        if (transferInput.type === 'fungible') {\n          const fungibleTransfer = transferInput as FungibleTokenTransferSpec;\n          transaction.addTokenTransfer(\n            typeof fungibleTransfer.tokenId === 'string'\n              ? TokenId.fromString(fungibleTransfer.tokenId)\n              : fungibleTransfer.tokenId,\n            typeof fungibleTransfer.accountId === 'string'\n              ? AccountId.fromString(fungibleTransfer.accountId)\n              : fungibleTransfer.accountId,\n            this.parseAmount(fungibleTransfer.amount)\n          );\n        } else if (transferInput.type === 'nft') {\n          const toolNftInput = transferInput as unknown as {\n            tokenId: string;\n            serial: string | number | Long;\n            senderAccountId: string;\n            receiverAccountId: string;\n            isApproved?: boolean;\n          };\n\n          const sdkTokenId = TokenId.fromString(toolNftInput.tokenId);\n\n          let serialValueForLong: number | Long;\n          if (typeof toolNftInput.serial === 'string') {\n            serialValueForLong = parseInt(toolNftInput.serial, 10);\n          } else {\n            serialValueForLong = toolNftInput.serial;\n          }\n          const sdkSerial = Long.fromValue(serialValueForLong);\n          const sdkNftId = new NftId(sdkTokenId, sdkSerial);\n\n          const senderAccountId = AccountId.fromString(\n            toolNftInput.senderAccountId\n          );\n          const receiverAccountId = AccountId.fromString(\n            toolNftInput.receiverAccountId\n          );\n\n          if (toolNftInput.isApproved) {\n            transaction.addApprovedNftTransfer(\n              sdkNftId,\n              senderAccountId,\n              receiverAccountId\n            );\n          } else {\n            transaction.addNftTransfer(\n              sdkNftId,\n              senderAccountId,\n              receiverAccountId\n            );\n          }\n        }\n      }\n    }\n\n    if (params.hbarTransfers && params.hbarTransfers.length > 0) {\n      for (const hbarInput of params.hbarTransfers) {\n        const sdkHbarAmount = Hbar.fromString(hbarInput.amount.toString());\n        transaction.addHbarTransfer(\n          typeof hbarInput.accountId === 'string'\n            ? AccountId.fromString(hbarInput.accountId)\n            : hbarInput.accountId,\n          sdkHbarAmount\n        );\n      }\n    }\n\n    if (params.memo) {\n      transaction.setTransactionMemo(params.memo);\n    }\n\n    this.setCurrentTransaction(transaction);\n    return this;\n  }\n\n  /**\n   * @param {WipeTokenAccountParams} params\n   * @returns {this}\n   * @throws {Error}\n   */\n  public wipeTokenAccount(params: WipeTokenAccountParams): this {\n    const transaction = new TokenWipeTransaction()\n      .setAccountId(params.accountId)\n      .setTokenId(\n        typeof params.tokenId === 'string'\n          ? TokenId.fromString(params.tokenId)\n          : params.tokenId\n      );\n    if (params.amount) {\n      transaction.setAmount(this.parseAmount(params.amount));\n    }\n    if (params.serials && params.serials.length > 0) {\n      transaction.setSerials(params.serials.map((s) => this.parseAmount(s)));\n    }\n    this.setCurrentTransaction(transaction);\n    return this;\n  }\n\n  /**\n   * @param {FreezeTokenAccountParams} params\n   * @returns {this}\n   */\n  public freezeTokenAccount(params: FreezeTokenAccountParams): this {\n    const transaction = new TokenFreezeTransaction()\n      .setAccountId(params.accountId)\n      .setTokenId(\n        typeof params.tokenId === 'string'\n          ? TokenId.fromString(params.tokenId)\n          : params.tokenId\n      );\n    this.setCurrentTransaction(transaction);\n    return this;\n  }\n\n  /**\n   * @param {UnfreezeTokenAccountParams} params\n   * @returns {this}\n   */\n  public unfreezeTokenAccount(params: UnfreezeTokenAccountParams): this {\n    const transaction = new TokenUnfreezeTransaction()\n      .setAccountId(params.accountId)\n      .setTokenId(\n        typeof params.tokenId === 'string'\n          ? TokenId.fromString(params.tokenId)\n          : params.tokenId\n      );\n    this.setCurrentTransaction(transaction);\n    return this;\n  }\n\n  /**\n   * @param {GrantKycTokenParams} params\n   * @returns {this}\n   */\n  public grantKycToken(params: GrantKycTokenParams): this {\n    const transaction = new TokenGrantKycTransaction()\n      .setAccountId(params.accountId)\n      .setTokenId(\n        typeof params.tokenId === 'string'\n          ? TokenId.fromString(params.tokenId)\n          : params.tokenId\n      );\n    this.setCurrentTransaction(transaction);\n    return this;\n  }\n\n  /**\n   * @param {RevokeKycTokenParams} params\n   * @returns {this}\n   */\n  public revokeKycToken(params: RevokeKycTokenParams): this {\n    const transaction = new TokenRevokeKycTransaction()\n      .setAccountId(params.accountId)\n      .setTokenId(\n        typeof params.tokenId === 'string'\n          ? TokenId.fromString(params.tokenId)\n          : params.tokenId\n      );\n    this.setCurrentTransaction(transaction);\n    return this;\n  }\n\n  /**\n   * @param {PauseTokenParams} params\n   * @returns {this}\n   */\n  public pauseToken(params: PauseTokenParams): this {\n    const transaction = new TokenPauseTransaction().setTokenId(\n      typeof params.tokenId === 'string'\n        ? TokenId.fromString(params.tokenId)\n        : params.tokenId\n    );\n    this.setCurrentTransaction(transaction);\n    return this;\n  }\n\n  /**\n   * @param {UnpauseTokenParams} params\n   * @returns {this}\n   */\n  public unpauseToken(params: UnpauseTokenParams): this {\n    const transaction = new TokenUnpauseTransaction().setTokenId(\n      typeof params.tokenId === 'string'\n        ? TokenId.fromString(params.tokenId)\n        : params.tokenId\n    );\n    this.setCurrentTransaction(transaction);\n    return this;\n  }\n\n  /**\n   * @param {UpdateTokenParams} params\n   * @returns {Promise<this>}\n   * @throws {Error}\n   */\n  public async updateToken(params: UpdateTokenParams): Promise<this> {\n    if (!params.tokenId) {\n      throw new Error('Token ID is required to update a token.');\n    }\n    this.logger.info(\n      `[HtsBuilder.updateToken] Starting update for token ID: ${params.tokenId.toString()}`\n    );\n    const transaction = new TokenUpdateTransaction().setTokenId(\n      typeof params.tokenId === 'string'\n        ? TokenId.fromString(params.tokenId)\n        : params.tokenId\n    );\n\n    if (Object.prototype.hasOwnProperty.call(params, 'tokenName')) {\n      transaction.setTokenName(\n        params.tokenName === null ? '' : params.tokenName!\n      );\n    }\n    if (Object.prototype.hasOwnProperty.call(params, 'tokenSymbol')) {\n      transaction.setTokenSymbol(\n        params.tokenSymbol === null ? '' : params.tokenSymbol!\n      );\n    }\n    if (params.treasuryAccountId) {\n      transaction.setTreasuryAccountId(params.treasuryAccountId);\n    }\n\n    if (Object.prototype.hasOwnProperty.call(params, 'adminKey')) {\n      if (params.adminKey === null) transaction.setAdminKey(new KeyList());\n      else if (params.adminKey) {\n        const pk = await this.parseKey(params.adminKey);\n        if (pk) transaction.setAdminKey(pk);\n      }\n    }\n    if (Object.prototype.hasOwnProperty.call(params, 'kycKey')) {\n      if (params.kycKey === null) transaction.setKycKey(new KeyList());\n      else if (params.kycKey) {\n        const pk = await this.parseKey(params.kycKey);\n        if (pk) transaction.setKycKey(pk);\n      }\n    }\n    if (Object.prototype.hasOwnProperty.call(params, 'freezeKey')) {\n      if (params.freezeKey === null) transaction.setFreezeKey(new KeyList());\n      else if (params.freezeKey) {\n        const pk = await this.parseKey(params.freezeKey);\n        if (pk) transaction.setFreezeKey(pk);\n      }\n    }\n    if (Object.prototype.hasOwnProperty.call(params, 'wipeKey')) {\n      if (params.wipeKey === null) transaction.setWipeKey(new KeyList());\n      else if (params.wipeKey) {\n        const pk = await this.parseKey(params.wipeKey);\n        if (pk) transaction.setWipeKey(pk);\n      }\n    }\n    if (Object.prototype.hasOwnProperty.call(params, 'supplyKey')) {\n      if (params.supplyKey === null) transaction.setSupplyKey(new KeyList());\n      else if (params.supplyKey) {\n        const pk = await this.parseKey(params.supplyKey);\n        if (pk) transaction.setSupplyKey(pk);\n      }\n    }\n    if (Object.prototype.hasOwnProperty.call(params, 'feeScheduleKey')) {\n      if (params.feeScheduleKey === null)\n        transaction.setFeeScheduleKey(new KeyList());\n      else if (params.feeScheduleKey) {\n        const pk = await this.parseKey(params.feeScheduleKey);\n        if (pk) transaction.setFeeScheduleKey(pk);\n      }\n    }\n    if (Object.prototype.hasOwnProperty.call(params, 'pauseKey')) {\n      if (params.pauseKey === null) transaction.setPauseKey(new KeyList());\n      else if (params.pauseKey) {\n        const pk = await this.parseKey(params.pauseKey);\n        if (pk) transaction.setPauseKey(pk);\n      }\n    }\n\n    if (Object.prototype.hasOwnProperty.call(params, 'memo')) {\n      transaction.setTokenMemo(params.memo === null ? '' : params.memo!);\n    }\n\n    if (Object.prototype.hasOwnProperty.call(params, 'autoRenewAccountId')) {\n      const autoRenewId = params.autoRenewAccountId;\n      if (autoRenewId === null) {\n        transaction.setAutoRenewAccountId(AccountId.fromString('0.0.0'));\n      } else if (autoRenewId) {\n        transaction.setAutoRenewAccountId(autoRenewId);\n      }\n    }\n    if (params.autoRenewPeriod) {\n      transaction.setAutoRenewPeriod(params.autoRenewPeriod);\n    }\n\n    this.logger.info(\n      '[HtsBuilder.updateToken] Transaction object populated. Setting current transaction.',\n      transaction\n    );\n    this.setCurrentTransaction(transaction);\n    this.logger.info(\n      '[HtsBuilder.updateToken] Current transaction set. Value:',\n      this.currentTransaction\n    );\n    return this;\n  }\n\n  /**\n   * @param {DeleteTokenParams} params\n   * @returns {this}\n   */\n  public deleteToken(params: DeleteTokenParams): this {\n    if (!params.tokenId) {\n      throw new Error('Token ID is required to delete a token.');\n    }\n    const transaction = new TokenDeleteTransaction().setTokenId(\n      typeof params.tokenId === 'string'\n        ? TokenId.fromString(params.tokenId)\n        : params.tokenId\n    );\n    this.setCurrentTransaction(transaction);\n    return this;\n  }\n\n  /**\n   * @param {TokenFeeScheduleUpdateParams} params\n   * @returns {this}\n   */\n  public async feeScheduleUpdate(\n    params: TokenFeeScheduleUpdateParams\n  ): Promise<this> {\n    this.clearNotes();\n    if (!params.tokenId) {\n      throw new Error('Token ID is required to update fee schedule.');\n    }\n    const sdkCustomFees = mapToSdkCustomFees(\n      params.customFees as unknown as CustomFeeInputData[],\n      this.parseAmount.bind(this),\n      this.logger,\n      this.kit.userAccountId,\n      this.kit.operationalMode,\n      this.addNote.bind(this)\n    );\n    const transaction = new TokenFeeScheduleUpdateTransaction()\n      .setTokenId(\n        typeof params.tokenId === 'string'\n          ? TokenId.fromString(params.tokenId)\n          : params.tokenId\n      )\n      .setCustomFees(sdkCustomFees);\n    this.setCurrentTransaction(transaction);\n    return this;\n  }\n\n  /**\n   * Configures a transaction to airdrop fungible tokens from the operator's account to multiple recipients.\n   * This method uses the `TokenAirdropTransaction`.\n   * @param {AirdropTokenParams} params - Parameters for the airdrop.\n   * @returns {this} The HtsBuilder instance for fluent chaining.\n   * @throws {Error} If no recipients are provided or if amounts are invalid.\n   */\n  public airdropToken(params: AirdropTokenParams): this {\n    if (!params.recipients || params.recipients.length === 0) {\n      throw new Error('Recipients are required for an airdrop.');\n    }\n\n    const transaction = new TokenAirdropTransaction();\n    const operatorAccountId = this.kit.signer.getAccountId();\n    const tokenId =\n      typeof params.tokenId === 'string'\n        ? TokenId.fromString(params.tokenId)\n        : params.tokenId;\n    let validTransfersMade = false;\n\n    for (const recipient of params.recipients) {\n      const transferAmount = this.parseAmount(recipient.amount);\n\n      if (transferAmount.isZero() || transferAmount.isNegative()) {\n        this.logger.warn(\n          `Skipping airdrop to ${recipient.accountId.toString()} with zero or negative amount.`\n        );\n        continue;\n      }\n\n      transaction.addTokenTransfer(\n        tokenId,\n        operatorAccountId,\n        transferAmount.negate()\n      );\n      transaction.addTokenTransfer(\n        tokenId,\n        recipient.accountId,\n        transferAmount\n      );\n      validTransfersMade = true;\n    }\n\n    if (!validTransfersMade) {\n      throw new Error(\n        'No valid transfers generated for the airdrop. Check recipient amounts.'\n      );\n    }\n\n    if (params.memo) {\n      transaction.setTransactionMemo(params.memo);\n    }\n\n    this.setCurrentTransaction(transaction);\n    return this;\n  }\n\n  /**\n   * Configures a transaction to claim pending airdrops.\n   * The operator (signer) is the recipient of the claim.\n   * @param {ClaimAirdropParams} params - Parameters specifying which pending airdrops to claim.\n   *                                      The `pendingAirdropIds` should be valid `PendingAirdropId` instances from the SDK.\n   * @returns {this} The HtsBuilder instance for fluent chaining.\n   * @throws {Error} If no `pendingAirdropIds` are provided.\n   */\n  public claimAirdrop(params: ClaimAirdropParams): this {\n    if (!params.pendingAirdropIds || params.pendingAirdropIds.length === 0) {\n      throw new Error(\n        'pendingAirdropIds must be provided and non-empty for claimAirdrop.'\n      );\n    }\n\n    const transaction = new TokenClaimAirdropTransaction();\n\n    for (const pendingId of params.pendingAirdropIds) {\n      transaction.addPendingAirdropId(pendingId);\n    }\n\n    if (params.memo) {\n      transaction.setTransactionMemo(params.memo);\n    }\n\n    this.setCurrentTransaction(transaction);\n    return this;\n  }\n\n  /**\n   * Configures a transaction to cancel pending airdrops sent by the operator.\n   * @param {CancelAirdropParams} params - Parameters specifying which pending airdrops to cancel.\n   *                                       The `pendingAirdropIds` should be valid `PendingAirdropId` instances from the SDK.\n   * @returns {this} The HtsBuilder instance for fluent chaining.\n   * @throws {Error} If no `pendingAirdropIds` are provided.\n   */\n  public cancelAirdrop(params: CancelAirdropParams): this {\n    if (!params.pendingAirdropIds || params.pendingAirdropIds.length === 0) {\n      throw new Error(\n        'pendingAirdropIds must be provided and non-empty for cancelAirdrop.'\n      );\n    }\n    const transaction = new TokenCancelAirdropTransaction();\n\n    transaction.setPendingAirdropIds(params.pendingAirdropIds);\n\n    if (params.memo) {\n      transaction.setTransactionMemo(params.memo);\n    }\n\n    this.setCurrentTransaction(transaction);\n    return this;\n  }\n\n  /**\n   * Configures a transaction for the operator to reject future auto-associations with specified token types.\n   * @param {RejectAirdropParams} params - Parameters specifying which tokens to reject.\n   *        Note: `senderAccountId` and `serials` from `RejectAirdropParams` are currently ignored by this method\n   *        as `TokenRejectTransaction` operates on token types for the owner.\n   * @returns {this} The HtsBuilder instance for fluent chaining.\n   */\n  public rejectTokens(params: RejectAirdropParams): this {\n    const transaction = new TokenRejectTransaction().setOwnerId(\n      this.kit.signer.getAccountId()\n    );\n\n    const tokenToReject =\n      typeof params.tokenId === 'string'\n        ? TokenId.fromString(params.tokenId)\n        : params.tokenId;\n    transaction.addTokenId(tokenToReject);\n\n    if (params.memo) {\n      transaction.setTransactionMemo(params.memo);\n    }\n\n    this.setCurrentTransaction(transaction);\n    return this;\n  }\n}\n"],"names":[],"mappings":"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"}