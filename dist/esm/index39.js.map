{"version":3,"file":"index39.js","sources":["../../src/langchain/tools/hts/claim-airdrop-tool.ts"],"sourcesContent":["import { z } from 'zod';\nimport { ClaimAirdropParams } from '../../../types';\nimport { AccountId, TokenId, Long, PendingAirdropId, NftId } from '@hashgraph/sdk';\nimport {\n  BaseHederaTransactionTool,\n  BaseHederaTransactionToolParams,\n} from '../common/base-hedera-transaction-tool';\nimport { BaseServiceBuilder } from '../../../builders/base-service-builder';\nimport { HtsBuilder } from '../../../builders/hts/hts-builder';\n\nconst ClaimAirdropZodSchemaCore = z.object({\n  pendingAirdrops: z\n    .array(\n      z.object({\n        senderAccountId: z\n          .string()\n          .describe('The account ID of the sender of the airdrop.'),\n        tokenId: z.string().describe('The token ID of the airdropped token.'),\n        serialNumber: z\n          .union([z.number(), z.string()])\n          .describe(\n            'The serial number for an NFT, or a string/number convertible to Long(0) for fungible token claims (representing the whole pending amount for that FT from that sender).'\n          ),\n      })\n    )\n    .min(1)\n    .max(10)\n    .describe(\n      'An array of pending airdrops to claim. Each object must have senderAccountId, tokenId, and serialNumber. Max 10 entries.'\n    ),\n});\n\nexport class HederaClaimAirdropTool extends BaseHederaTransactionTool<\n  typeof ClaimAirdropZodSchemaCore\n> {\n  name = 'hedera-hts-claim-airdrop';\n  description =\n    'Claims pending airdropped tokens (fungible or NFT serials). Requires an array of airdrop objects, each specifying senderAccountId, tokenId, and serialNumber. Use metaOptions for execution control.';\n  specificInputSchema = ClaimAirdropZodSchemaCore;\n  namespace = 'hts';\n\n  constructor(params: BaseHederaTransactionToolParams) {\n    super(params);\n  }\n\n  protected getServiceBuilder(): BaseServiceBuilder {\n    return this.hederaKit.hts();\n  }\n\n  protected async callBuilderMethod(\n    builder: BaseServiceBuilder,\n    specificArgs: z.infer<typeof ClaimAirdropZodSchemaCore>\n  ): Promise<void> {\n    const sdkPendingAirdropIds: PendingAirdropId[] =\n      specificArgs.pendingAirdrops.map((item, index: number) => {\n        const itemNumber = index + 1;\n\n        let serialValue: Long;\n        if (typeof item.serialNumber === 'string') {\n          try {\n            serialValue = Long.fromString(item.serialNumber);\n          } catch (e: unknown) {\n            const error = e as Error;\n            throw new Error(\n              `Pending airdrop item #${itemNumber} serialNumber string ('${item.serialNumber}') is not a valid Long: ${error.message}`\n            );\n          }\n        } else {\n          serialValue = Long.fromNumber(item.serialNumber);\n        }\n\n        try {\n          const senderId = AccountId.fromString(item.senderAccountId);\n          const tokId = TokenId.fromString(item.tokenId);\n          return new PendingAirdropId({\n            senderId,\n            tokenId: tokId,\n            nftId: NftId.fromString(serialValue.toString()),\n          });\n        } catch (e: unknown) {\n          const error = e as Error;\n          throw new Error(\n            `Error constructing PendingAirdropId for item #${itemNumber} (sender: ${item.senderAccountId}, token: ${item.tokenId}, serial: ${item.serialNumber}): ${error.message}`\n          );\n        }\n      });\n\n    const claimParams: ClaimAirdropParams = {\n      pendingAirdropIds: sdkPendingAirdropIds,\n    };\n\n    (builder as HtsBuilder).claimAirdrop(claimParams);\n  }\n}\n"],"names":[],"mappings":";;;AAUA,MAAM,4BAA4B,EAAE,OAAO;AAAA,EACzC,iBAAiB,EACd;AAAA,IACC,EAAE,OAAO;AAAA,MACP,iBAAiB,EACd,SACA,SAAS,8CAA8C;AAAA,MAC1D,SAAS,EAAE,SAAS,SAAS,uCAAuC;AAAA,MACpE,cAAc,EACX,MAAM,CAAC,EAAE,OAAA,GAAU,EAAE,QAAQ,CAAC,EAC9B;AAAA,QACC;AAAA,MAAA;AAAA,IACF,CACH;AAAA,EAAA,EAEF,IAAI,CAAC,EACL,IAAI,EAAE,EACN;AAAA,IACC;AAAA,EAAA;AAEN,CAAC;AAEM,MAAM,+BAA+B,0BAE1C;AAAA,EAOA,YAAY,QAAyC;AACnD,UAAM,MAAM;AAPd,SAAA,OAAO;AACP,SAAA,cACE;AACF,SAAA,sBAAsB;AACtB,SAAA,YAAY;AAAA,EAAA;AAAA,EAMF,oBAAwC;AAChD,WAAO,KAAK,UAAU,IAAA;AAAA,EAAI;AAAA,EAG5B,MAAgB,kBACd,SACA,cACe;AACf,UAAM,uBACJ,aAAa,gBAAgB,IAAI,CAAC,MAAM,UAAkB;AACxD,YAAM,aAAa,QAAQ;AAE3B,UAAI;AACJ,UAAI,OAAO,KAAK,iBAAiB,UAAU;AACzC,YAAI;AACF,wBAAc,KAAK,WAAW,KAAK,YAAY;AAAA,QAAA,SACxC,GAAY;AACnB,gBAAM,QAAQ;AACd,gBAAM,IAAI;AAAA,YACR,yBAAyB,UAAU,0BAA0B,KAAK,YAAY,2BAA2B,MAAM,OAAO;AAAA,UAAA;AAAA,QACxH;AAAA,MACF,OACK;AACL,sBAAc,KAAK,WAAW,KAAK,YAAY;AAAA,MAAA;AAGjD,UAAI;AACF,cAAM,WAAW,UAAU,WAAW,KAAK,eAAe;AAC1D,cAAM,QAAQ,QAAQ,WAAW,KAAK,OAAO;AAC7C,eAAO,IAAI,iBAAiB;AAAA,UAC1B;AAAA,UACA,SAAS;AAAA,UACT,OAAO,MAAM,WAAW,YAAY,UAAU;AAAA,QAAA,CAC/C;AAAA,MAAA,SACM,GAAY;AACnB,cAAM,QAAQ;AACd,cAAM,IAAI;AAAA,UACR,iDAAiD,UAAU,aAAa,KAAK,eAAe,YAAY,KAAK,OAAO,aAAa,KAAK,YAAY,MAAM,MAAM,OAAO;AAAA,QAAA;AAAA,MACvK;AAAA,IACF,CACD;AAEH,UAAM,cAAkC;AAAA,MACtC,mBAAmB;AAAA,IAAA;AAGpB,YAAuB,aAAa,WAAW;AAAA,EAAA;AAEpD;"}