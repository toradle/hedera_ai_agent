{"version":3,"file":"index38.js","sources":["../../src/langchain/tools/hts/burn-nft-tool.ts"],"sourcesContent":["import { z } from 'zod';\nimport { BurnNFTParams } from '../../../types';\nimport {\n  BaseHederaTransactionTool,\n  BaseHederaTransactionToolParams,\n} from '../common/base-hedera-transaction-tool';\nimport { BaseServiceBuilder } from '../../../builders/base-service-builder';\nimport { HtsBuilder } from '../../../builders/hts/hts-builder';\n\nconst BurnNFTZodSchemaCore = z.object({\n  tokenId: z\n    .string()\n    .describe('The ID of the NFT collection (e.g., \"0.0.xxxx\").'),\n  serials: z\n    .array(z.union([z.number().int().positive(), z.string()]))\n    .min(1)\n    .describe(\n      'Array of serial numbers to burn. Numbers or strings for large serials. Builder handles conversion.'\n    ),\n});\n\nexport class HederaBurnNftTool extends BaseHederaTransactionTool<\n  typeof BurnNFTZodSchemaCore\n> {\n  name = 'hedera-hts-burn-nft';\n  description =\n    'Burns Non-Fungible Tokens (NFTs). Requires token ID and an array of serial numbers.';\n  specificInputSchema = BurnNFTZodSchemaCore;\n  namespace = 'hts';\n\n  constructor(params: BaseHederaTransactionToolParams) {\n    super(params);\n  }\n\n  protected getServiceBuilder(): BaseServiceBuilder {\n    return this.hederaKit.hts();\n  }\n\n  protected async callBuilderMethod(\n    builder: BaseServiceBuilder,\n    specificArgs: z.infer<typeof BurnNFTZodSchemaCore>\n  ): Promise<void> {\n    await (builder as HtsBuilder).burnNonFungibleToken(\n      specificArgs as unknown as BurnNFTParams\n    );\n  }\n}\n"],"names":[],"mappings":";;AASA,MAAM,uBAAuB,EAAE,OAAO;AAAA,EACpC,SAAS,EACN,SACA,SAAS,kDAAkD;AAAA,EAC9D,SAAS,EACN,MAAM,EAAE,MAAM,CAAC,EAAE,SAAS,IAAA,EAAM,SAAA,GAAY,EAAE,OAAA,CAAQ,CAAC,CAAC,EACxD,IAAI,CAAC,EACL;AAAA,IACC;AAAA,EAAA;AAEN,CAAC;AAEM,MAAM,0BAA0B,0BAErC;AAAA,EAOA,YAAY,QAAyC;AACnD,UAAM,MAAM;AAPd,SAAA,OAAO;AACP,SAAA,cACE;AACF,SAAA,sBAAsB;AACtB,SAAA,YAAY;AAAA,EAAA;AAAA,EAMF,oBAAwC;AAChD,WAAO,KAAK,UAAU,IAAA;AAAA,EAAI;AAAA,EAG5B,MAAgB,kBACd,SACA,cACe;AACf,UAAO,QAAuB;AAAA,MAC5B;AAAA,IAAA;AAAA,EACF;AAEJ;"}